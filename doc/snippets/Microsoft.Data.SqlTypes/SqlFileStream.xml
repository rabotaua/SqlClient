<docs>
  <members name="SqlFileStream">
    <SqlFileStream>
      <summary>
        Exposes SQL Server data that is stored with the FILESTREAM column attribute as a sequence of bytes.
      </summary>
      <remarks>
        <para>
          The <see cref="T:Microsoft.Data.SqlTypes.SqlFileStream" /> class is used to work with VARBINARY(MAX) data stored with the FILESTREAM attribute in a SQL Server 2008 database. You must install the .NET Framework 3.5 SP1 (or later) to use <see cref="T:Microsoft.Data.SqlTypes.SqlFileStream" /> to work with FILESTREAM data.
        </para>
        <para>
          Specifying the FILESTREAM attribute on a VARBINARY(MAX) column causes SQL Server to store the data in the local NTFS file system instead of in the database file. Transact-SQL statements provide data manipulation capabilities within the server, and Win32 file system interfaces provide streaming access to the data.
        </para>
        <note type="note">
          Individual files stored in a FILESTREAM column cannot be opened directly from the NTFS file system. Streaming FILESTREAM data works only in the context of a SQL Server transaction.
        </note>
        <para>
          The <see cref="T:Microsoft.Data.SqlTypes.SqlFileStream" /> class is derived from the <see cref="T:System.IO.Stream" /> class, which represents an abstraction of a sequence of bytes from some arbitrary data source such as a file or a block of memory. You can read from a FILESTREAM by transferring data from a stream into a data structure such as an array of bytes. You can write to a FILESTREAM by transferring the data from a data structure into a stream. You can also seek within the stream, which allows you to query and modify data at the current position within the stream.
        </para>
        <para>
          For conceptual documentation and code examples, see <see href="/sql/connect/ado-net/sql/filestream-data">FILESTREAM Data</see>.
        </para>
        <para>
          For documentation about setting up and configuring FILESTREAM data on SQL Server, see <see href="https://go.microsoft.com/fwlink/?LinkId=121499">Designing and Implementing FILESTREAM Storage</see> in SQL Server 2008 Books Online.
        </para>
      </remarks>
      <seealso href="https://msdn.microsoft.com/library/bd8b845c-0f09-4295-b466-97ef106eefa8">
        FILESTREAM Data in SQL Server 2008 (ADO.NET)
      </seealso>
      <seealso href="https://msdn.microsoft.com/library/fafdc31a-f435-4cd3-883f-1dfadd971277">
        SQL Server Data Type Mappings (ADO.NET)
      </seealso>
      <seealso href="https://msdn.microsoft.com/library/e00827b3-7511-4b2d-91d7-851ca86cc6b5">
        SQL Server Binary and Large-Value Data (ADO.NET)
      </seealso>
    </SqlFileStream>
    <ctor1>
      <param name="path">
        The logical path to the file. The path can be retrieved by using the Transact-SQL Pathname function on the underlying FILESTREAM column in the table.
      </param>
      <param name="transactionContext">
        The transaction context for the <see cref="T:Microsoft.Data.SqlTypes.SqlFileStream" /> object. Applications should return the byte array returned by calling the GET_FILESTREAM_TRANSACTION_CONTEXT method.
      </param>
      <param name="access">
        <para>
          The access mode to use when opening the file. Supported <see cref="T:System.IO.FileAccess" /> enumeration values are <see cref="F:System.IO.FileAccess.Read" />, <see cref="F:System.IO.FileAccess.Write" />, and <see cref="F:System.IO.FileAccess.ReadWrite" />.
        </para>
        <para>
          When using <see cref="F:System.IO.FileAccess.Read" />, the <see cref="T:Microsoft.Data.SqlTypes.SqlFileStream" /> object can be used to read all the existing data.
        </para>
        <para>
          When using <see cref="F:System.IO.FileAccess.Write" />, <see cref="T:Microsoft.Data.SqlTypes.SqlFileStream" /> points to a zero byte file. Existing data will be overwritten when the object is closed and the transaction is committed.
        </para>
        <para>
          When using <see cref="F:System.IO.FileAccess.ReadWrite" />, the <see cref="T:Microsoft.Data.SqlTypes.SqlFileStream" /> points to a file which has all the existing data in it. The handle is positioned at the beginning of the file. You can use one of the <see cref="M:System.IO.Stream.Seek" /> methods to move the handle position within the file to write or append new data.
        </para>         
      </param>
      <summary>
        Initializes a new instance of the <see cref="T:Microsoft.Data.SqlTypes.SqlFileStream" /> class.
      </summary>
      <remarks>
        <para>
          The following table lists the code access security (CAS) permissions that all callers in the stack must have to use the <see cref="T:Microsoft.Data.SqlTypes.SqlFileStream" /> constructors.
        </para>
        <para>
          <list type="table">
            <listheader>
              <term>File access</term>
              <description>Permission</description>
            </listheader>
            <item>
              <term>Read</term>
              <description><see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></description>
            </item>
            <item>
              <term>Write</term>
              <description><see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></description>
            </item>
            <item>
              <term>ReadWrite</term>
              <description>
                <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />
              </description>
            </item>
          </list>
        </para>
        <para>
          For more information about CAS, see <see href="/dotnet/framework/data/adonet/code-access-security">Code Access Security and ADO.NET</see>.
        </para>
        <para>
          If an exception is thrown, any open transactions should be rolled back. Otherwise, data loss can occur.
        </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is a null reference, or <paramref name="transactionContext" /> is null.
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters. <paramref name="path" /> begins with "\\\\.\\", for example "\\\\.\PHYSICALDRIVE0 ".
        </para>
        <para>
          The handle returned by the call to NTCreateFile is not of type FILE_TYPE_DISK. <paramref name="path" /> contains an unsupported value.
        </para>
      </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        The file cannot be found.
      </exception>
      <exception cref="T:System.IO.IOException">
        An I/O error occurred.
      </exception>
      <exception cref="T:System.Security.SecurityException">
        The caller does not have the required permission.
      </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        The specified <paramref name="path" /> is invalid, such as being on an unmapped drive.
      </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        The access requested is not permitted by the operating system for the specified path. This occurs when Write or ReadWrite access is specified, and the file or directory is set for read-only access.
      </exception>
      <exception cref="T:System.InvalidOperationException">
        NtCreateFile fails with error code set to ERROR_SHARING_VIOLATION.
      </exception>
      <seealso href="https://msdn.microsoft.com/library/bd8b845c-0f09-4295-b466-97ef106eefa8">
        FILESTREAM Data in SQL Server 2008 (ADO.NET)
      </seealso>
    </ctor1>
    <ctor2>
      <param name="path">
        The logical path to the file. The path can be retrieved by using the Transact-SQL Pathname function on the underlying FILESTREAM column in the table.
      </param>
      <param name="transactionContext">
        The transaction context for the <see langword="SqlFileStream" /> object. When set to null, an implicit transaction will be used for the <see langword="SqlFileStream" /> object. Applications should return the byte array returned by calling the GET_FILESTREAM_TRANSACTION_CONTEXT method.
      </param>
      <param name="access">
        The access mode to use when opening the file. Supported <see cref="T:System.IO.FileAccess" /> enumeration values are <see cref="F:System.IO.FileAccess.Read" />, <see cref="F:System.IO.FileAccess.Write" />, and <see cref="F:System.IO.FileAccess.ReadWrite" />. When using <see langword="FileAccess.Read" />, the <see cref="T:Microsoft.Data.SqlTypes.SqlFileStream" /> object can be used to read all the existing data.  When using <see langword="FileAccess.Write" />, <see cref="T:Microsoft.Data.SqlTypes.SqlFileStream" /> points to a zero byte file. Existing data will be overwritten when the object is closed and the transaction is committed.  When using <see langword="FileAccess.ReadWrite" />, the <see cref="T:Microsoft.Data.SqlTypes.SqlFileStream" /> points to a file which has all the existing data in it. The handle is positioned at the beginning of the file. You can use one of the <see cref="M:System.IO.Stream.Seek" /> methods to move the handle position within the file to write or append new data.
      </param>
      <param name="options">
        Specifies the option to use while opening the file. Supported <see cref="T:System.IO.FileOptions" /> values are <see cref="F:System.IO.FileOptions.Asynchronous" />, <see cref="F:System.IO.FileOptions.WriteThrough" />, <see cref="F:System.IO.FileOptions.SequentialScan" />, and <see cref="F:System.IO.FileOptions.RandomAccess" />.
      </param>
      <param name="allocationSize">
        The allocation size to use while creating a file. If set to 0, the default value is used.
      </param>
      <summary>
        Initializes a new instance of the <see cref="T:Microsoft.Data.SqlTypes.SqlFileStream" /> class.
      </summary>
      <remarks>
        <para>
          The following table lists the code access security (CAS) permissions that all callers in the stack must have to use the <c>SqlFileStream</c> constructors.
        </para>
        <para>
          <list type="table">
            <listheader>
              <term>File access</term>
              <description>Permission</description>
            </listheader>
            <item>
              <term>Read</term>
              <description><see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></description>
            </item>
            <item>
              <term>Write</term>
              <description><see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></description>
            </item>
            <item>
              <term>ReadWrite</term>
              <description>
                <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />
              </description>
            </item>
          </list>
        </para>
        <para>
          For more information about CAS, see <see href="/dotnet/framework/data/adonet/code-access-security">Code Access Security and ADO.NET</see>.
        </para>
        <para>
          If an exception is thrown, any open transactions should be rolled back. Otherwise, data loss can occur.
        </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is a null reference, or <paramref name="transactionContext" /> is null.
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters. <paramref name="path" /> begins with "\\\\.\\", for example "\\\\.\PHYSICALDRIVE0 "
        </para>
        <para>
          The handle returned by call to NTCreateFile is not of type FILE_TYPE_DISK. <paramref name="options" /> contains an unsupported value.
        </para>
     </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        The file cannot be found.
      </exception>
      <exception cref="T:System.IO.IOException">
        An I/O error occurred.
      </exception>
      <exception cref="T:System.Security.SecurityException">
        The caller does not have the required permission.
      </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        The specified <paramref name="path" /> is invalid, such as being on an unmapped drive.
      </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        The access requested is not permitted by the operating system for the specified path. This occurs when Write or ReadWrite access is specified, and the file or directory is set for read-only access.
      </exception>
      <exception cref="T:System.InvalidOperationException">
        NtCreateFile fails with error code set to ERROR_SHARING_VIOLATION.
      </exception>
      <seealso href="https://msdn.microsoft.com/library/bd8b845c-0f09-4295-b466-97ef106eefa8">
        FILESTREAM Data in SQL Server 2008 (ADO.NET)
      </seealso>
    </ctor2>
    <BeginRead>
      <param name="buffer">
        The buffer to read the data into.
      </param>
      <param name="offset">
        The byte offset in <paramref name="buffer" /> at which to begin writing data read from the stream.
      </param>
      <param name="count">
        The maximum number of bytes to read.
      </param>
      <param name="callback">
        An optional asynchronous callback, to be called when the read is complete.
      </param>
      <param name="state">
        A user-provided object that distinguishes this particular asynchronous read request from other requests
      </param>
      <summary>
        Begins an asynchronous read operation.
      </summary>
      <returns>
        An <see cref="T:System.IAsyncResult" /> that represents the asynchronous read, which could still be pending.
      </returns>
      <remarks>
        Use the <see cref="P:Microsoft.Data.SqlTypes.SqlFileStream.CanRead" /> property to determine whether the current instance supports reading.
      </remarks>
      <exception cref="T:System.NotSupportedException">
        Reading data is not supported on the stream.
      </exception>
      <seealso href="https://msdn.microsoft.com/library/bd8b845c-0f09-4295-b466-97ef106eefa8">
        FILESTREAM Data in SQL Server 2008 (ADO.NET)
      </seealso>
    </BeginRead>
    <BeginWrite>
      <param name="buffer">
        The buffer to write data from.
      </param>
      <param name="offset">
        The byte offset in <paramref name="buffer" /> from which to begin writing.
      </param>
      <param name="count">
        The maximum number of bytes to write.
      </param>
      <param name="callback">
        An optional asynchronous callback, to be called when the write is complete.
      </param>
      <param name="state">
        A user-provided object that distinguishes this particular asynchronous write request from other requests.
      </param>
      <summary>
        Begins an asynchronous write operation.
      </summary>
      <returns>
        An <see cref="T:System.IAsyncResult" /> that represents the asynchronous write, which could still be pending.
      </returns>
      <remarks>
        Use the <see cref="P:Microsoft.Data.SqlTypes.SqlFileStream.CanWrite" /> property to determine whether the current instance supports writing.
      </remarks>
      <exception cref="T:System.NotSupportedException">
        Writing data is not supported on the stream.
      </exception>
      <seealso href="https://msdn.microsoft.com/library/bd8b845c-0f09-4295-b466-97ef106eefa8">
        FILESTREAM Data in SQL Server 2008 (ADO.NET)
      </seealso>
    </BeginWrite>
    <CanRead>
      <summary>
        Gets a value indicating whether the current stream supports reading.
      </summary>
      <value>
        <see langword="true" /> if the current stream supports reading; otherwise, <see langword="false" />.
      </value>
      <seealso href="https://msdn.microsoft.com/library/bd8b845c-0f09-4295-b466-97ef106eefa8">
        FILESTREAM Data in SQL Server 2008 (ADO.NET)
      </seealso>
    </CanRead>
    <CanSeek>
      <summary>
        Gets a value indicating whether the current stream supports seeking.
      </summary>
      <value>
        <see langword="true" /> if the current stream supports seeking; otherwise, <see langword="false" />.
      </value>
      <seealso href="https://msdn.microsoft.com/library/bd8b845c-0f09-4295-b466-97ef106eefa8">
        FILESTREAM Data in SQL Server 2008 (ADO.NET)
      </seealso>
    </CanSeek>
    <CanTimeout>
      <summary>
        Gets a value indicating whether the current stream can time out.
      </summary>
      <value>
        <see langword="true" /> if the current stream can time out; otherwise, <see langword="false" />.
      </value>
    </CanTimeout>
    <CanWrite>
      <summary>
        Gets a value indicating whether the current stream supports writing.
      </summary>
      <value>
        <see langword="true" /> if the current stream supports writing; otherwise, <see langword="false" />.
      </value>
      <seealso href="https://msdn.microsoft.com/library/bd8b845c-0f09-4295-b466-97ef106eefa8">
        FILESTREAM Data in SQL Server 2008 (ADO.NET)
      </seealso>
    </CanWrite>
    <dtor>
      <summary>
        Destructor of the SqlFileStream class object.
      </summary>
    </dtor>
    <Dispose>
      <param name="disposing">
        <see langword="true" /> to release managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.
      </param>
      <summary>
        Releases the unmanaged resources used and optionally releases the managed resources.
      </summary>
      <remarks>
        This method calls <see cref="M:System.IO.Stream.Dispose" />.
      </remarks>
    </Dispose>
    <EndRead>
      <param name="asyncResult">
        The reference to the pending asynchronous request to finish.
      </param>
      <summary>
        Waits for the pending asynchronous read to complete.
      </summary>
      <returns>
        The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.
      </returns>
      <exception cref="T:System.ArgumentException">
        The <see cref="T:System.IAsyncResult" /> object did not come from the corresponding <see cref="M:Microsoft.Data.SqlTypes.SqlFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method.
      </exception>
      <seealso href="https://msdn.microsoft.com/library/bd8b845c-0f09-4295-b466-97ef106eefa8">
        FILESTREAM Data in SQL Server 2008 (ADO.NET)
      </seealso>
    </EndRead>
    <EndWrite>
      <param name="asyncResult">
        A reference to the outstanding asynchronous I/O request.
      </param>
      <summary>
        Ends an asynchronous write operation.
      </summary>
      <exception cref="T:System.ArgumentException">
        The <see cref="T:System.IAsyncResult" /> object did not come from the corresponding <see cref="M:Microsoft.Data.SqlTypes.SqlFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method.
      </exception>
      <seealso href="https://msdn.microsoft.com/library/bd8b845c-0f09-4295-b466-97ef106eefa8">
        FILESTREAM Data in SQL Server 2008 (ADO.NET)
      </seealso>
    </EndWrite>
    <Finalize>
      <summary>
        Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:Microsoft.Data.SqlTypes.SqlFileStream" />.
      </summary>
    </Finalize>
    <Flush>
      <summary>
        Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
      </summary>
      <seealso href="https://msdn.microsoft.com/library/bd8b845c-0f09-4295-b466-97ef106eefa8">
        FILESTREAM Data in SQL Server 2008 (ADO.NET)
      </seealso>
    </Flush>
    <Length>
      <summary>
        Gets a value indicating the length of the current stream in bytes.
      </summary>
      <value>
        An <see cref="T:System.Int64" /> indicating the length of the current stream in bytes.
      </value>
      <seealso href="https://msdn.microsoft.com/library/bd8b845c-0f09-4295-b466-97ef106eefa8">
        FILESTREAM Data in SQL Server 2008 (ADO.NET)
      </seealso>
    </Length>
    <Name>
      <summary>
        Gets the logical path of the <see cref="T:Microsoft.Data.SqlTypes.SqlFileStream" /> passed to the constructor.
      </summary>
      <value>
        A string value indicating the name of the <see cref="T:Microsoft.Data.SqlTypes.SqlFileStream" />.
      </value>
      <seealso href="https://msdn.microsoft.com/library/bd8b845c-0f09-4295-b466-97ef106eefa8">
        FILESTREAM Data in SQL Server 2008 (ADO.NET)
      </seealso>
    </Name>
    <Position>
      <summary>
        Gets or sets the position within the current stream.
      </summary>
      <value>
        The current position within the <see cref="T:Microsoft.Data.SqlTypes.SqlFileStream" />.
      </value>
      <seealso href="https://msdn.microsoft.com/library/bd8b845c-0f09-4295-b466-97ef106eefa8">
        FILESTREAM Data in SQL Server 2008 (ADO.NET)
      </seealso>
    </Position>
    <Read>
      <param name="buffer">
        An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.
      </param>
      <param name="offset">
        The zero-based byte offset in buffer at which to begin storing the data read from the current stream.
      </param>
      <param name="count">
        The maximum number of bytes to be read from the current stream.
      </param>
      <summary>
        Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
      </summary>
      <returns>
        The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
      </returns>
      <remarks>
        Use the <see cref="P:Microsoft.Data.SqlTypes.SqlFileStream.CanRead" /> property to determine whether the current instance supports writing.
      </remarks>
      <exception cref="T:System.NotSupportedException">
        The object does not support reading of data.
      </exception>
      <seealso href="https://msdn.microsoft.com/library/bd8b845c-0f09-4295-b466-97ef106eefa8">
        FILESTREAM Data in SQL Server 2008 (ADO.NET)
      </seealso>
    </Read>
    <ReadByte>
      <summary>
        Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
      </summary>
      <returns>
        The unsigned byte cast to an <see cref="T:System.Int32" />, or -1 if at the end of the stream.
      </returns>
      <remarks>
        Use the <see cref="P:Microsoft.Data.SqlTypes.SqlFileStream.CanRead" /> property to determine whether the current instance supports reading.
      </remarks>
      <exception cref="T:System.NotSupportedException">
        The object does not support reading of data.
      </exception>
      <seealso href="https://msdn.microsoft.com/library/bd8b845c-0f09-4295-b466-97ef106eefa8">
        FILESTREAM Data in SQL Server 2008 (ADO.NET)
      </seealso>
    </ReadByte>
    <ReadTimeout>
      <summary>
        Gets or sets a value, in milliseconds, that determines how long the stream will attempt to read before timing out.
      </summary>
      <value>
        A value, in milliseconds, that determines how long the stream will attempt to read before timing out.
      </value>
      <seealso href="https://msdn.microsoft.com/library/bd8b845c-0f09-4295-b466-97ef106eefa8">
        FILESTREAM Data in SQL Server 2008 (ADO.NET)
      </seealso>
    </ReadTimeout>
    <Seek>
      <param name="offset">
        A byte offset relative to the <paramref name="origin" /> parameter
      </param>
      <param name="origin">
        A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position
      </param>
      <summary>
        Sets the position within the current stream.
      </summary>
      <returns>
        The new position within the current stream.
      </returns>
      <seealso href="https://msdn.microsoft.com/library/bd8b845c-0f09-4295-b466-97ef106eefa8">
        FILESTREAM Data in SQL Server 2008 (ADO.NET)
      </seealso>
    </Seek>
    <SetLength>
      <param name="value">
        The desired length of the current stream in bytes.
      </param>
      <summary>
        Sets the length of the current stream.
      </summary>
      <remarks>
        Use the <see cref="P:Microsoft.Data.SqlTypes.SqlFileStream.CanRead" /> property to determine whether the current instance supports reading.
      </remarks>
      <exception cref="T:System.NotSupportedException">
        The object does not support reading of data.
      </exception>
      <seealso href="https://msdn.microsoft.com/library/bd8b845c-0f09-4295-b466-97ef106eefa8">
        FILESTREAM Data in SQL Server 2008 (ADO.NET)
      </seealso>
    </SetLength>
    <TransactionContext>
      <summary>
        Gets or sets the transaction context for this <see cref="T:Microsoft.Data.SqlTypes.SqlFileStream" /> object.
      </summary>
      <value>
        The <b>TransactionContext</b> array that was passed to the constructor for this <see cref="T:Microsoft.Data.SqlTypes.SqlFileStream" /> object.
      </value>
      <seealso href="https://msdn.microsoft.com/library/bd8b845c-0f09-4295-b466-97ef106eefa8">
        FILESTREAM Data in SQL Server 2008 (ADO.NET)
      </seealso>
    </TransactionContext>
    <Write>
      <param name="buffer">
        An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream.
      </param>
      <param name="offset">
        The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.
      </param>
      <param name="count">
        The number of bytes to be written to the current stream.
      </param>
      <summary>
        Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
      </summary>
      <remarks>
        Use the <see cref="P:Microsoft.Data.SqlTypes.SqlFileStream.CanWrite" /> property to determine whether the current instance supports writing.
      </remarks>
      <exception cref="T:System.NotSupportedException">
        The object does not support writing of data.
      </exception>
      <seealso href="https://msdn.microsoft.com/library/bd8b845c-0f09-4295-b466-97ef106eefa8">
        FILESTREAM Data in SQL Server 2008 (ADO.NET)
      </seealso>
    </Write>
    <WriteByte>
      <param name="value">
        The byte to write to the stream.
      </param>
      <summary>
        Writes a byte to the current position in the stream and advances the position within the stream by one byte.
      </summary>
      <remarks>
        Use the <see cref="P:Microsoft.Data.SqlTypes.SqlFileStream.CanWrite" /> property to determine whether the current instance supports writing.
      </remarks>
      <exception cref="T:System.NotSupportedException">
        The object does not support writing of data.
      </exception>
      <seealso href="https://msdn.microsoft.com/library/bd8b845c-0f09-4295-b466-97ef106eefa8">
        FILESTREAM Data in SQL Server 2008 (ADO.NET)
      </seealso>
    </WriteByte>
    <WriteTimeout>
      <summary>
        Gets or sets a value, in milliseconds, that determines how long the stream will attempt to write before timing out.
      </summary>
      <value>
        A value, in milliseconds, that determines how long the stream will attempt to write before timing out.
      </value>
      <seealso href="https://msdn.microsoft.com/library/bd8b845c-0f09-4295-b466-97ef106eefa8">
        FILESTREAM Data in SQL Server 2008 (ADO.NET)
      </seealso>
    </WriteTimeout>
  </members>
</docs>

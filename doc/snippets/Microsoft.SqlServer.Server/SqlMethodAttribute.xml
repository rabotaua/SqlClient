<docs>
  <members name="SqlMethodAttribute">
    <SqlMethodAttribute>
      <summary>
        Indicates the determinism and data access properties of a method or property on a user-defined type (UDT). The properties on the attribute reflect the physical characteristics that are used when the type is registered with SQL Server.
      </summary>
      <remarks>
        <para>
          For a property, the <see cref="T:Microsoft.SqlServer.Server.SqlMethodAttribute" /> should be used on the setter or the getter directly.
        </para>
        <para>
          <see cref="T:Microsoft.SqlServer.Server.SqlMethodAttribute" /> inherits from a <see cref="T:Microsoft.SqlServer.Server.SqlFunctionAttribute" />, so <see cref="T:Microsoft.SqlServer.Server.SqlMethodAttribute" /> inherits the <see cref="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.FillRowMethodName" /> and <see cref="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.TableDefinition" /> fields from <see cref="T:Microsoft.SqlServer.Server.SqlFunctionAttribute" />. Note that it is not possible to write a table-valued method, although the names of these fields might suggest that it is possible.
        </para>
      </remarks>
      <example>
        <para>
          The following example shows a UDT method that is attributed to indicate that the method will not be invoked on null instances of the type, that the method will not change the state of the type, and that the method will not be called when <see langword="null" /> parameters are supplied to the method invocation.
        </para>
        <!-- SqlMethod -->
        <code language="c#">
          using System;
          using System.Data.SqlTypes;
          using System.Text;
          using Microsoft.SqlServer.Server;
          
          [Serializable]
          [SqlUserDefinedType(
              Format.Native,
              IsByteOrdered = true,
              Name = "Point",
              ValidationMethodName = "ValidatePoint")]
          public struct Point : INullable
          {
              private bool is_Null;
              private int _x;
              private int _y;
          
              // Distance from Point to the specified x and y values method.
              [SqlMethod(OnNullCall = false, IsMutator = false, InvokeIfReceiverIsNull = false)]
              public Double DistanceFromXY(int iX, int iY)
              {
                  return Math.Sqrt(Math.Pow(iX - _x, 2.0) + Math.Pow(iY - _y, 2.0));
              }
          }
        </code>
      </example>
    </SqlMethodAttribute>
    <ctor>
      <summary>
        An attribute on a user-defined type (UDT), used to indicate the determinism and data access properties of a method or a property on a UDT.
      </summary>
    </ctor>
    <InvokeIfReceiverIsNull>
      <summary>
        Indicates whether SQL Server should invoke the method on null instances.
      </summary>
      <value>
        <see langword="true" /> if SQL Server should invoke the method on null instances; otherwise, <see langword="false" />. If the method cannot be invoked (because of an attribute on the method), the SQL Server <see cref="T:System.Data.DbNull" /> is returned.
      </value>
      <remarks>
        The default value of the <b>InvokeIfReceiverIsNull</b> property is <see langword="false" />. That is, the method is not invoked on a null instance. If <b>InvokeIfReceiverIsNull</b> is <see langword="true" />, the return value of the method depends upon its type. If the return type of the method is nullable, the distinguished null value for the type is returned. If the return type is non-nullable, the default CLR value for the type is returned. The default value for reference types is <see langword="null" />. The default value for a value type is the value that is returned when you call the parameterless constructor for the type.
      </remarks>
    </InvokeIfReceiverIsNull>
    <IsMutator>
      <summary>
        Indicates whether a method on a user-defined type (UDT) is a mutator.
      </summary>
      <value>
        <see langword="true" /> if the method is a mutator; otherwise <see langword="false" />.
      </value>
      <remarks>
        <para>
          If the <see cref="P:Microsoft.SqlServer.Server.SqlMethodAttribute.IsMutator" /> property is set to <see langword="true" /> and the return type of the method is <see langword="void" />, SQL Server marks the method as a mutator. A mutator method is one that causes a state change in the UDT instance. Mutator methods can be called in assignment statements or data modification statements, but cannot be used in queries. If a method is marked as a mutator but does not return void, then CREATE TYPE does not fail with an error. Even though a returned value other than <see langword="void" /> does not raise an error, the returned value is not accessible and cannot be used.
        </para>
        <para>
          The default value of the <see cref="P:Microsoft.SqlServer.Server.SqlMethodAttribute.IsMutator" /> property is <see langword="false" />.
        </para>
        <para>
          A property can be a mutator if <see cref="T:Microsoft.SqlServer.Server.SqlMethodAttribute" /> is used on the setter and <see cref="P:Microsoft.SqlServer.Server.SqlMethodAttribute.IsMutator" /> is set to <see langword="true" />. However, a property setter is implicitly treated as a mutator, so it is not necessary to set the <see cref="P:Microsoft.SqlServer.Server.SqlMethodAttribute.IsMutator" /> property of the <see cref="T:Microsoft.SqlServer.Server.SqlMethodAttribute" /> to <see langword="true" />.
        </para>
      </remarks>
    </IsMutator>
    <OnNullCall>
      <summary>
        Indicates whether the method on a user-defined type (UDT) is called when <see langword="null" /> input arguments are specified in the method invocation.
      </summary>
      <value>
        <see langword="true" /> if the method is called when <see langword="null" /> input arguments are specified in the method invocation; <see langword="false" /> if the method returns a <see langword="null" /> value when any of its input parameters are <see langword="null" />. If the method cannot be invoked (because of an attribute on the method), the SQL Server <see cref="T:System.Data.DbNull" /> is returned.
      </value>
      <remarks>
        The default value of the <see cref="P:Microsoft.SqlServer.Server.SqlMethodAttribute.OnNullCall" /> property is <see langword="true" />.
      </remarks>
    </OnNullCall>
  </members>
</docs>

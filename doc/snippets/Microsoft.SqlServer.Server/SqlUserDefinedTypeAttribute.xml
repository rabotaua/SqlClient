<docs>
  <members name="SqlUserDefinedTypeAttribute">
    <SqlUserDefinedTypeAttribute>
      <summary>
        Used to mark a type definition in an assembly as a user-defined type (UDT) in SQL Server. The properties on the attribute reflect the physical characteristics used when the type is registered with SQL Server. This class cannot be inherited.
      </summary>
      <remarks>
        SQL Server creates a user-defined type that is bound to the type definition that has the <see cref="T:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute" /> custom attribute. Every UDT must be annotated with this attribute. See <see href="https://go.microsoft.com/fwlink/?LinkId=128028">CLR User-Defined Types</see>for more information about UDTs, including an example of a UDT.
      </remarks>
      <example>
        <para>
          The following example shows the <c>UserDefinedType</c> attribute of the Point UDT.  The UDT is byte-ordered, is named "Point", has a validation method named "ValidatePoint", and uses the native serialization format.
        </para>
        <!-- DataWorks_SqlUserDefinedTypeAttribute_Sample #1 -->
        <code language="c#">
          [Serializable]
          [Microsoft.SqlServer.Server.SqlUserDefinedType(
               Format.Native,
               IsByteOrdered=true,
               Name="Point",
               ValidationMethodName = "ValidatePoint")]
          public struct Point : INullable
          {
          }
        </code>
        <!-- DataWorks_SqlUserDefinedTypeAttribute_Sample #1 -->
        <code language="vb">
          &lt;Serializable(), SqlUserDefinedTypeAttribute( _
            Format.Native, _
            IsByteOrdered:=True, _
            Name:="Point", _
            ValidationMethodName:="ValidatePoint")> _
            Public Structure Point
              Implements INullable
          End Structure
        </code>
      </example>
    </SqlUserDefinedTypeAttribute>
    <ctor>
      <param name="format">
        One of the <see cref="T:Microsoft.SqlServer.Server.Format" /> values representing the serialization format of the type.
      </param>
      <summary>
        A required attribute on a user-defined type (UDT), used to confirm that the given type is a UDT and to indicate the storage format of the UDT.
      </summary>
      <remarks>
        The following example specifies that the <see cref="P:Microsoft.SqlServer.Server.Format" /> of the user-defined type is <see cref="F:Microsoft.SqlServer.Server.Format.Native" /> and the <see cref="P:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.MaxByteSize" /> is 8000 bytes.
      </remarks>
      <example>
        <!-- SqlUserDefinedTypeAttribute_Type1 #12 -->
        <code language="c#">
          [SqlUserDefinedType(Format.Native, MaxByteSize=8000)]
          public class SampleType
          {
             //...
          }
        </code>
        <!-- SqlUserDefinedTypeAttribute_Type1 #12 -->
        <code language="vb">
          &lt;SqlUserDefinedType(Format.Native, MaxByteSize:=8000)&gt;
          Public Class SampleType
             '...
          End Class
        </code>
      </example>
    </ctor>
    <Format>
      <summary>
        The serialization format as a <see cref="T:Microsoft.SqlServer.Server.Format" />.
      </summary>
      <value>
        A <see cref="T:Microsoft.SqlServer.Server.Format" /> value representing the serialization format.
      </value>
    </Format>
    <IsByteOrdered>
      <summary>
        Indicates whether the user-defined type is byte ordered.
      </summary>
      <value>
        <see langword="true" /> if the user-defined type is byte ordered; otherwise <see langword="false" />.
      </value>
      <remarks>
        <para>
          When set to <see langword="true" />, the <see cref="P:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.IsByteOrdered" /> property in effect guarantees that the serialized binary data can be used for semantic ordering of the information. Thus, each instance of a byte-ordered UDT object can only have one serialized representation. When a comparison operation is performed in SQL Server on the serialized bytes, its results should be the same as if the same comparison operation had taken place in managed code.
        </para>
        <para>
          The following features are supported when <see cref="P:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.IsByteOrdered" /> is set to <see langword="true" />:
        </para>
        <list type="bullet">
          <item>The ability to create indexes on columns of this type.</item>
          <item>The ability to create primary and foreign keys as well as CHECK and UNIQUE constraints on columns of this type.</item>
          <item>The ability to use Transact-SQL ORDER BY, GROUP BY, and PARTITION BY clauses. In these cases, the binary representation of the type is used to determine the order.</item>
          <item>The ability to use comparison operators in Transact-SQL statements.</item>
          <item>The ability to persist computed columns of this type.</item>
        </list>
        <para>
          Note that both the <c>Native</c> and <c>UserDefined</c> serialization formats support the following comparison operators when <see cref="P:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.IsByteOrdered" /> is set to <see langword="true" />:
        </para>
        <list type="bullet">
          <item>Equal to (=)</item>
          <item>Not equal to (!=)</item>
          <item>Greater than (&gt;)</item>
          <item>Less than (&lt;)</item>
          <item>Greater than or equal to (&gt;=)</item>
          <item>Less than or equal to (&lt;=)</item>
        </list>
      </remarks>
    </IsByteOrdered>
    <IsFixedLength>
      <summary>
        Indicates whether all instances of this user-defined type are the same length.
      </summary>
      <value>
        <see langword="true" /> if all instances of this type are the same length; otherwise <see langword="false" />.
      </value>
      <remarks>
        <para>
          If set to <see langword="true" />, all instances of UDTs corresponding to this common language runtime (CLR) type must have a length in bytes exactly equal to <see cref="P:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.MaxByteSize" />. This attribute is only relevant for UDTs with <c>UserDefined</c> serialization <see cref="T:Microsoft.SqlServer.Server.Format" />.
        </para>
      </remarks>
    </IsFixedLength>
    <MaxByteSize>
      <summary>
        The maximum size of the instance, in bytes.
      </summary>
      <value>
        An <see cref="T:System.Int32" /> value representing the maximum size of the instance.
      </value>
      <remarks>
        <para>
          You must specify the <see cref="P:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.MaxByteSize" /> property with the <c>UserDefined</c> serialization <see cref="T:Microsoft.SqlServer.Server.Format" />.
        </para>
        <para>
          When connecting to SQL Server 2005 or earlier, <see cref="P:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.MaxByteSize" /> must be between 1 and 8000.
        </para>
        <para>
          When connecting to SQL Server 2008 or later, set <see cref="P:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.MaxByteSize" /> between 1 and 8000, for a type whose instances are always 8,000 bytes or fewer. For types that can have instances larger than 8000, specify -1.
        </para>
        <para>
          For a UDT with user-defined serialization specified, <see cref="P:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.MaxByteSize" /> refers to the total size of the UDT in its serialized form as defined by the user. Consider a UDT with a property of a string of 10 characters (<see cref="T:System.Char" />). When the UDT is serialized using a <see cref="T:System.IO.BinaryWriter" />, the total size of the serialized string is 22 bytes: 2 bytes per Unicode UTF-16 character, multiplied by the maximum number of characters, plus 2 control bytes of overhead incurred from serializing a binary stream. So, when determining the value of <see cref="P:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.MaxByteSize" />, the total size of the serialized UDT must be considered: the size of the data serialized in binary form plus the overhead incurred by serialization.
        </para>
        <para>
          This property should not be used with <c>Native</c> serialization <see cref="T:Microsoft.SqlServer.Server.Format" />.
        </para>
      </remarks>
    </MaxByteSize>
    <Name>
      <summary>
        The SQL Server name of the user-defined type.
      </summary>
      <value>
        A <see cref="T:System.String" /> value representing the SQL Server name of the user-defined type.
      </value>
      <remarks>
        The <see cref="P:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.Name" /> property is not used within SQL Server, but is used by the Microsoft Visual Studio .NET Integrated Development Environment (IDE).
      </remarks>
    </Name>
    <ValidationMethodName>
      <summary>
        The name of the method used to validate instances of the user-defined type.
      </summary>
      <value>
        A <see cref="T:System.String" /> representing the name of the method used to validate instances of the user-defined type.
      </value>
      <remarks>
        The method specified by this attribute validates instances of the UDT when the UDT has been deserialized from a binary value that is not trusted.
      </remarks>
    </ValidationMethodName>
  </members>
</docs>

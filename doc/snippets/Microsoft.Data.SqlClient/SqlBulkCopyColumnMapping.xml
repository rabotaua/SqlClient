<docs>
  <members name="SqlBulkCopyColumnMapping">
    <SqlBulkCopyColumnMapping>
      <summary>
        Defines the mapping between a column in a <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopy" /> instance's data source and a column in the instance's destination table.
      </summary>
      <remarks>
        <para>
          Column mappings define the mapping between data source and the target table.
        </para>
        <para>
          If mappings are not defined - that is, the <see cref="P:Microsoft.Data.SqlClient.SqlBulkCopy.ColumnMappings" /> collection is empty - the columns are mapped implicitly based on ordinal position. For this to work, source and target schemas must match. If they do not, an <see cref="T:System.InvalidOperationException" /> will be thrown.
        </para>
        <para>
          If the <see cref="P:Microsoft.Data.SqlClient.SqlBulkCopy.ColumnMappings" /> collection is not empty, not every column present in the data source has to be specified. Those not mapped by the collection are ignored.
        </para>
        <para>
          You can refer to source and target columns by either name or ordinal. You can also mix by-name and by-ordinal column references in the same mappings collection.
        </para>
      </remarks>
      <example>
        <para>
          The following example bulk copies data from a source table in the <b>AdventureWorks</b>
          sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, and each destination column is in the same ordinal position as its corresponding source column, the column names do not match. <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> objects are used to create a column map for the bulk copy.
        </para>
        <note type="important">
          This sample will not run unless you have created the work tables as described in <see href="/sql/connect/ado-net/sql/bulk-copy-example-setup">Bulk Copy Example Setup</see>.
        </note>
        <para>
          This code is provided to demonstrate the syntax for using<b>SqlBulkCopy</b>only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <c>INSERT … SELECT</c> statement to copy the data.
        </para>
        <!-- SqlBulkCopy_ColumnMapping -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  string connectionString = GetConnectionString();
                  
                  // Open a sourceConnection to the AdventureWorks database.
                  using (SqlConnection sourceConnection = new SqlConnection(connectionString))
                  {
                      sourceConnection.Open();
          
                      // Perform an initial count on the destination table.
                      SqlCommand commandRowCount = new SqlCommand(
                          "SELECT COUNT(*) FROM dbo.BulkCopyDemoDifferentColumns;",
                          sourceConnection);
                      long countStart = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Starting row count = {0}", countStart);
          
                      // Get data from the source table as a SqlDataReader.
                      SqlCommand commandSourceData = new SqlCommand(
                          "SELECT ProductID, Name, ProductNumber FROM Production.Product;",
                          sourceConnection);
                      SqlDataReader reader = commandSourceData.ExecuteReader();
          
                      // Set up the bulk copy object.
                      using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connectionString))
                      {
                          bulkCopy.DestinationTableName = "dbo.BulkCopyDemoDifferentColumns";
          
                          // Set up the column mappings by name.
                          SqlBulkCopyColumnMapping mapID =
                              new SqlBulkCopyColumnMapping("ProductID", "ProdID");
                          bulkCopy.ColumnMappings.Add(mapID);
          
                          SqlBulkCopyColumnMapping mapName =
                              new SqlBulkCopyColumnMapping("Name", "ProdName");
                          bulkCopy.ColumnMappings.Add(mapName);
          
                          SqlBulkCopyColumnMapping mapNumber =
                              new SqlBulkCopyColumnMapping("ProductNumber", "ProdNum");
                          bulkCopy.ColumnMappings.Add(mapNumber);
          
                          // Write from the source to the destination.
                          try
                          {
                              bulkCopy.WriteToServer(reader);
                          }
                          catch (Exception ex)
                          {
                              Console.WriteLine(ex.Message);
                          }
                          finally
                          {
                              // Close the SqlDataReader. The SqlBulkCopy
                              // object is automatically closed at the end
                              // of the using block.
                              reader.Close();
                          }
                      }
          
                      // Perform a final count on the destination 
                      // table to see how many rows were added.
                      long countEnd = System.Convert.ToInt32(commandRowCount.ExecuteScalar());
                      Console.WriteLine("Ending row count = {0}", countEnd);
                      Console.WriteLine("{0} rows were added.", countEnd - countStart);
                      Console.WriteLine("Press Enter to finish.");
                      Console.ReadLine();
                  }
              }
          
              private static string GetConnectionString()
              {
                  // To avoid storing the sourceConnection string in your code,
                  // you can retrieve it from a configuration file.
                  return "Data Source=(local); " +
                         " Integrated Security=true;" +
                         "Initial Catalog=AdventureWorks;";
              }
          }
        </code>
      </example>
    </SqlBulkCopyColumnMapping>
    <ctor name="default">
      <summary>
        Parameterless constructor that initializes a new <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> object.
      </summary>
      <remarks>
        If you use this constructor, you must then define the source for the mapping using the <see cref="P:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping.SourceColumn" /> property or the <see cref="P:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping.SourceOrdinal" /> property, and define the destination for the mapping using the <see cref="P:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationColumn" /> property or the <see cref="P:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationOrdinal" /> property.
      </remarks>
      <example>
        <para>
          The following example bulk copies data from a source table in the <b>AdventureWorks</b>  sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> objects are used to create a column map for the bulk copy.
        </para>
        <note type="important">
          This sample will not run unless you have created the work tables as described in <see href="/sql/connect/ado-net/sql/bulk-copy-example-setup">Bulk Copy Example Setup</see>.
        </note>
        <para>
          This code is provided to demonstrate the syntax for using <b>SqlBulkCopy</b> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <c>INSERT … SELECT</c> statement to copy the data.
        </para>
        <!-- SqlBulkCopy_ColumnMapping -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  string connectionString = GetConnectionString();
                  
                  // Open a sourceConnection to the AdventureWorks database.
                  using (SqlConnection sourceConnection = new SqlConnection(connectionString))
                  {
                      sourceConnection.Open();
          
                      // Perform an initial count on the destination table.
                      SqlCommand commandRowCount = new SqlCommand(
                          "SELECT COUNT(*) FROM dbo.BulkCopyDemoDifferentColumns;",
                          sourceConnection);
                      long countStart = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Starting row count = {0}", countStart);
          
                      // Get data from the source table as a SqlDataReader.
                      SqlCommand commandSourceData = new SqlCommand(
                          "SELECT ProductID, Name, ProductNumber FROM Production.Product;",
                          sourceConnection);
                      SqlDataReader reader = commandSourceData.ExecuteReader();
          
                      // Set up the bulk copy object.
                      using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connectionString))
                      {
                          bulkCopy.DestinationTableName = "dbo.BulkCopyDemoDifferentColumns";
          
                          // Set up the column mappings by name.
                          SqlBulkCopyColumnMapping mapID =
                              new SqlBulkCopyColumnMapping("ProductID", "ProdID");
                          bulkCopy.ColumnMappings.Add(mapID);
          
                          SqlBulkCopyColumnMapping mapName =
                              new SqlBulkCopyColumnMapping("Name", "ProdName");
                          bulkCopy.ColumnMappings.Add(mapName);
          
                          SqlBulkCopyColumnMapping mapNumber =
                              new SqlBulkCopyColumnMapping("ProductNumber", "ProdNum");
                          bulkCopy.ColumnMappings.Add(mapNumber);
          
                          // Write from the source to the destination.
                          try
                          {
                              bulkCopy.WriteToServer(reader);
                          }
                          catch (Exception ex)
                          {
                              Console.WriteLine(ex.Message);
                          }
                          finally
                          {
                              // Close the SqlDataReader. The SqlBulkCopy
                              // object is automatically closed at the end
                              // of the using block.
                              reader.Close();
                          }
                      }
          
                      // Perform a final count on the destination 
                      // table to see how many rows were added.
                      long countEnd = System.Convert.ToInt32(commandRowCount.ExecuteScalar());
                      Console.WriteLine("Ending row count = {0}", countEnd);
                      Console.WriteLine("{0} rows were added.", countEnd - countStart);
                      Console.WriteLine("Press Enter to finish.");
                      Console.ReadLine();
                  }
              }
          
              private static string GetConnectionString()
              {
                  // To avoid storing the sourceConnection string in your code,
                  // you can retrieve it from a configuration file.
                  return "Data Source=(local); " +
                         " Integrated Security=true;" +
                         "Initial Catalog=AdventureWorks;";
              }
          }
        </code>
      </example>
    </ctor>
    <ctor name="sourceColumnOrdinalIntegerAndDestinationOrdinalInteger">
      <param name="sourceColumnOrdinal">
        The ordinal position of the source column within the data source.
      </param>
      <param name="destinationOrdinal">
        The ordinal position of the destination column within the destination table.
      </param>
      <summary>
        Creates a new column mapping, using column ordinals to refer to source and destination columns.
      </summary>
      <example>
        <para>
          The following example bulk copies data from a source table in the <b>AdventureWorks</b>  sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> objects are used to create a column map for the bulk copy based on the ordinal positions of the columns.
        </para>
        <note type="important">
          This sample will not run unless you have created the work tables as described in <see href="/sql/connect/ado-net/sql/bulk-copy-example-setup">Bulk Copy Example Setup</see>.
        </note>
        <para>
          This code is provided to demonstrate the syntax for using <b>SqlBulkCopy</b> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <c>INSERT … SELECT</c> statement to copy the data.
        </para>
        <!-- SqlBulkCopy_ColumnMappingOrdinal -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  string connectionString = GetConnectionString();
                  // Open a sourceConnection to the AdventureWorks database.
                  using (SqlConnection sourceConnection =
                             new SqlConnection(connectionString))
                  {
                      sourceConnection.Open();
          
                      // Perform an initial count on the destination table.
                      SqlCommand commandRowCount = new SqlCommand(
                          "SELECT COUNT(*) FROM " +
                          "dbo.BulkCopyDemoDifferentColumns;",
                          sourceConnection);
                      long countStart = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Starting row count = {0}", countStart);
          
                      // Get data from the source table as a SqlDataReader.
                      SqlCommand commandSourceData = new SqlCommand(
                          "SELECT ProductID, Name, " +
                          "ProductNumber " +
                          "FROM Production.Product;", sourceConnection);
                      SqlDataReader reader =
                          commandSourceData.ExecuteReader();
          
                      // Set up the bulk copy object.
                      using (SqlBulkCopy bulkCopy =
                                 new SqlBulkCopy(connectionString))
                      {
                          bulkCopy.DestinationTableName = "dbo.BulkCopyDemoDifferentColumns";
          
                          // Set up the column mappings by ordinal.
                          SqlBulkCopyColumnMapping columnMapID =
                              new SqlBulkCopyColumnMapping(0, 0);
                          bulkCopy.ColumnMappings.Add(columnMapID);
          
                          SqlBulkCopyColumnMapping columnMapName =
                              new SqlBulkCopyColumnMapping(1, 2);
                          bulkCopy.ColumnMappings.Add(columnMapName);
          
                          SqlBulkCopyColumnMapping columnMapNumber =
                              new SqlBulkCopyColumnMapping(2, 1);
                          bulkCopy.ColumnMappings.Add(columnMapNumber);
          
                          // Write from the source to the destination.
                          try
                          {
                              bulkCopy.WriteToServer(reader);
                          }
                          catch (Exception ex)
                          {
                              Console.WriteLine(ex.Message);
                          }
                          finally
                          {
                              // Close the SqlDataReader. The SqlBulkCopy
                              // object is automatically closed at the end
                              // of the using block.
                              reader.Close();
                          }
                      }
          
                      // Perform a final count on the destination 
                      // table to see how many rows were added.
                      long countEnd = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Ending row count = {0}", countEnd);
                      Console.WriteLine("{0} rows were added.", countEnd - countStart);
                      Console.WriteLine("Press Enter to finish.");
                      Console.ReadLine();
                  }
              }
          
              private static string GetConnectionString()
              {
                  // To avoid storing the sourceConnection string in your code,
                  // you can retrieve it from a configuration file.
                  return "Data Source=(local); " +
                         " Integrated Security=true;" +
                         "Initial Catalog=AdventureWorks;";
              }
          }
        </code>
      </example>
    </ctor>
    <ctor name="sourceColumnOrdinalIntegerAndDestinationColumnString">
      <param name="sourceColumnOrdinal">
        The ordinal position of the source column within the data source.
      </param>
      <param name="destinationColumn">
        The name of the destination column within the destination table.
      </param>
      <summary>
        Creates a new column mapping, using a column ordinal to refer to the source column and a column name for the target column.
      </summary>
      <example>
        <para>
          The following example bulk copies data from a source table in the <b>AdventureWorks</b> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> objects are used to create a column map for the bulk copy.
        </para>
        <note type="important">
          This sample will not run unless you have created the work tables as described in <see href="/sql/connect/ado-net/sql/bulk-copy-example-setup">Bulk Copy Example Setup</see>.
        </note>
        <para>
          This code is provided to demonstrate the syntax for using <b>SqlBulkCopy</b> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <c>INSERT … SELECT</c> statement to copy the data.
        </para>
        <!-- SqlBulkCopy_ColumnMappingOrdinalName -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  string connectionString = GetConnectionString();
                  
                  // Open a sourceConnection to the AdventureWorks database.
                  using (SqlConnection sourceConnection = new SqlConnection(connectionString))
                  {
                      sourceConnection.Open();
          
                      // Perform an initial count on the destination table.
                      SqlCommand commandRowCount = new SqlCommand(
                          "SELECT COUNT(*) FROM " +
                          "dbo.BulkCopyDemoDifferentColumns;",
                          sourceConnection);
                      long countStart = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Starting row count = {0}", countStart);
          
                      // Get data from the source table as a SqlDataReader.
                      SqlCommand commandSourceData = new SqlCommand(
                          "SELECT ProductID, Name, " +
                          "ProductNumber " +
                          "FROM Production.Product;", sourceConnection);
                      SqlDataReader reader =
                          commandSourceData.ExecuteReader();
          
                      // Set up the bulk copy object.
                      using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connectionString))
                      {
                          bulkCopy.DestinationTableName =
                              "dbo.BulkCopyDemoDifferentColumns";
          
                          // Set up the column mappings by ordinal and name.
                          SqlBulkCopyColumnMapping columnMapID =
                              new SqlBulkCopyColumnMapping(0, "ProdID");
                          bulkCopy.ColumnMappings.Add(columnMapID);
          
                          SqlBulkCopyColumnMapping columnMapName =
                              new SqlBulkCopyColumnMapping(1, "ProdName");
                          bulkCopy.ColumnMappings.Add(columnMapName);
          
                          SqlBulkCopyColumnMapping columnMapNumber =
                              new SqlBulkCopyColumnMapping(2, "ProdNum");
                          bulkCopy.ColumnMappings.Add(columnMapNumber);
          
                          // Write from the source to the destination.
                          try
                          {
                              bulkCopy.WriteToServer(reader);
                          }
                          catch (Exception ex)
                          {
                              Console.WriteLine(ex.Message);
                          }
                          finally
                          {
                              // Close the SqlDataReader. The SqlBulkCopy
                              // object is automatically closed at the end
                              // of the using block.
                              reader.Close();
                          }
                      }
          
                      // Perform a final count on the destination 
                      // table to see how many rows were added.
                      long countEnd = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Ending row count = {0}", countEnd);
                      Console.WriteLine("{0} rows were added.", countEnd - countStart);
                      Console.WriteLine("Press Enter to finish.");
                      Console.ReadLine();
                  }
              }
          
              private static string GetConnectionString()
              {
                  // To avoid storing the sourceConnection string in your code,
                  // you can retrieve it from a configuration file.
                  return "Data Source=(local); " +
                         " Integrated Security=true;" +
                         "Initial Catalog=AdventureWorks;";
              }
          }          
        </code>
      </example>
    </ctor>
    <ctor name="sourceColumnStringAndDestinationOrdinalInteger">
      <param name="sourceColumn">
        The name of the source column within the data source.
      </param>
      <param name="destinationOrdinal">
        The ordinal position of the destination column within the destination table.
      </param>
      <summary>
        Creates a new column mapping, using a column name to refer to the source column and a column ordinal for the target column.
      </summary>
      <example>
        <para>
          The following example bulk copies data from a source table in the <b>AdventureWorks</b> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> objects are used to create a column map for the bulk copy.
        </para>
        <note type="important">
          This sample will not run unless you have created the work tables as described in <see href="/sql/connect/ado-net/sql/bulk-copy-example-setup">Bulk Copy Example Setup</see>.
        </note>
        <para>
          This code is provided to demonstrate the syntax for using <b>SqlBulkCopy</b> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <c>INSERT … SELECT</c> statement to copy the data.
        </para>
        <!-- SqlBulkCopy_ColumnMappingNameOrdinal -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  string connectionString = GetConnectionString();
                  // Open a sourceConnection to the AdventureWorks database.
                  using (SqlConnection sourceConnection = new SqlConnection(connectionString))
                  {
                      sourceConnection.Open();
          
                      // Perform an initial count on the destination table.
                      SqlCommand commandRowCount = new SqlCommand(
                          "SELECT COUNT(*) FROM " +
                          "dbo.BulkCopyDemoDifferentColumns;",
                          sourceConnection);
                      long countStart = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Starting row count = {0}", countStart);
          
                      // Get data from the source table as a SqlDataReader.
                      SqlCommand commandSourceData = new SqlCommand(
                          "SELECT ProductID, Name, " +
                          "ProductNumber " +
                          "FROM Production.Product;", sourceConnection);
                      SqlDataReader reader =
                          commandSourceData.ExecuteReader();
          
                      // Set up the bulk copy object.
                      using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connectionString))
                      {
                          bulkCopy.DestinationTableName =
                              "dbo.BulkCopyDemoDifferentColumns";
          
                          // Set up the column mappings by name and ordinal.
                          SqlBulkCopyColumnMapping columnMapID =
                              new SqlBulkCopyColumnMapping("ProductID", 0);
                          bulkCopy.ColumnMappings.Add(columnMapID);
          
                          SqlBulkCopyColumnMapping columnMapName =
                              new SqlBulkCopyColumnMapping("Name", 2);
                          bulkCopy.ColumnMappings.Add(columnMapName);
          
                          SqlBulkCopyColumnMapping columnMapNumber =
                              new SqlBulkCopyColumnMapping("ProductNumber", 1);
                          bulkCopy.ColumnMappings.Add(columnMapNumber);
          
                          // Write from the source to the destination.
                          try
                          {
                              bulkCopy.WriteToServer(reader);
                          }
                          catch (Exception ex)
                          {
                              Console.WriteLine(ex.Message);
                          }
                          finally
                          {
                              // Close the SqlDataReader. The SqlBulkCopy
                              // object is automatically closed at the end
                              // of the using block.
                              reader.Close();
                          }
                      }
          
                      // Perform a final count on the destination 
                      // table to see how many rows were added.
                      long countEnd = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Ending row count = {0}", countEnd);
                      Console.WriteLine("{0} rows were added.", countEnd - countStart);
                      Console.WriteLine("Press Enter to finish.");
                      Console.ReadLine();
                  }
              }
          
              private static string GetConnectionString() 
              {
                  // To avoid storing the sourceConnection string in your code,
                  // you can retrieve it from a configuration file.
                  return "Data Source=(local); " +
                         " Integrated Security=true;" +
                         "Initial Catalog=AdventureWorks;";
              }
          }
        </code>
      </example>
    </ctor>
    <ctor name="sourceColumnStringAndDestinationColumnString">
      <param name="sourceColumn">
        The name of the source column within the data source.
      </param>
      <param name="destinationColumn">
        The name of the destination column within the destination table.
      </param>
      <summary>
        Creates a new column mapping, using column names to refer to source and destination columns.
      </summary>
      <example>
        <para>
          The following example bulk copies data from a source table in the <b>AdventureWorks</b>  sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> objects are used to create a column map for the bulk copy.
        </para>
        <note type="important">
          This sample will not run unless you have created the work tables as described in <see href="/sql/connect/ado-net/sql/bulk-copy-example-setup">Bulk Copy Example Setup</see>.
        </note>
        <para>
          This code is provided to demonstrate the syntax for using <b>SqlBulkCopy</b> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <c>INSERT … SELECT</c> statement to copy the data.
        </para>
        <!-- SqlBulkCopy_ColumnMapping -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  string connectionString = GetConnectionString();
                  
                  // Open a sourceConnection to the AdventureWorks database.
                  using (SqlConnection sourceConnection = new SqlConnection(connectionString))
                  {
                      sourceConnection.Open();
          
                      // Perform an initial count on the destination table.
                      SqlCommand commandRowCount = new SqlCommand(
                          "SELECT COUNT(*) FROM dbo.BulkCopyDemoDifferentColumns;",
                          sourceConnection);
                      long countStart = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Starting row count = {0}", countStart);
          
                      // Get data from the source table as a SqlDataReader.
                      SqlCommand commandSourceData = new SqlCommand(
                          "SELECT ProductID, Name, ProductNumber FROM Production.Product;",
                          sourceConnection);
                      SqlDataReader reader = commandSourceData.ExecuteReader();
          
                      // Set up the bulk copy object.
                      using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connectionString))
                      {
                          bulkCopy.DestinationTableName = "dbo.BulkCopyDemoDifferentColumns";
          
                          // Set up the column mappings by name.
                          SqlBulkCopyColumnMapping mapID =
                              new SqlBulkCopyColumnMapping("ProductID", "ProdID");
                          bulkCopy.ColumnMappings.Add(mapID);
          
                          SqlBulkCopyColumnMapping mapName =
                              new SqlBulkCopyColumnMapping("Name", "ProdName");
                          bulkCopy.ColumnMappings.Add(mapName);
          
                          SqlBulkCopyColumnMapping mapNumber =
                              new SqlBulkCopyColumnMapping("ProductNumber", "ProdNum");
                          bulkCopy.ColumnMappings.Add(mapNumber);
          
                          // Write from the source to the destination.
                          try
                          {
                              bulkCopy.WriteToServer(reader);
                          }
                          catch (Exception ex)
                          {
                              Console.WriteLine(ex.Message);
                          }
                          finally
                          {
                              // Close the SqlDataReader. The SqlBulkCopy
                              // object is automatically closed at the end
                              // of the using block.
                              reader.Close();
                          }
                      }
          
                      // Perform a final count on the destination 
                      // table to see how many rows were added.
                      long countEnd = System.Convert.ToInt32(commandRowCount.ExecuteScalar());
                      Console.WriteLine("Ending row count = {0}", countEnd);
                      Console.WriteLine("{0} rows were added.", countEnd - countStart);
                      Console.WriteLine("Press Enter to finish.");
                      Console.ReadLine();
                  }
              }
          
              private static string GetConnectionString()
              {
                  // To avoid storing the sourceConnection string in your code,
                  // you can retrieve it from a configuration file.
                  return "Data Source=(local); " +
                         " Integrated Security=true;" +
                         "Initial Catalog=AdventureWorks;";
              }
          }
        </code>
      </example>
    </ctor>
    <DestinationColumn>
      <summary>
        Name of the column being mapped in the destination database table.
      </summary>
      <value>
        The string value of the <see cref="P:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationColumn" /> property.
      </value>
      <remarks>
        The <see cref="P:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationColumn" /> and <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationOrdinal" /> properties are mutually exclusive. The last value set takes precedence.
      </remarks>
      <example>
        <para>
          The following example bulk copies data from a source table in the <b>AdventureWorks</b>  sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> objects are used to create a column map for the bulk copy.
        </para>
        <note type="important">
          This sample will not run unless you have created the work tables as described in <see href="/sql/connect/ado-net/sql/bulk-copy-example-setup">Bulk Copy Example Setup</see>.
        </note>
        <para>
          This code is provided to demonstrate the syntax for using <b>SqlBulkCopy</b> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <c>INSERT … SELECT</c> statement to copy the data.
        </para>
        <!-- SqlBulkCopy_ColumnMappingDestinationColumn -->
        <code language="c#">
            using System;
            using System.Data;
            using Microsoft.Data.SqlClient;
            
            class Program
            {
                static void Main()
                {
                    string connectionString = GetConnectionString();
                    // Open a sourceConnection to the AdventureWorks database.
                    using (SqlConnection sourceConnection = new SqlConnection(connectionString))
                    {
                        sourceConnection.Open();
            
                        // Perform an initial count on the destination table.
                        SqlCommand commandRowCount = new SqlCommand(
                            "SELECT COUNT(*) FROM " +
                            "dbo.BulkCopyDemoDifferentColumns;",
                            sourceConnection);
                        long countStart = System.Convert.ToInt32(
                            commandRowCount.ExecuteScalar());
                        Console.WriteLine("Starting row count = {0}", countStart);
            
                        // Get data from the source table as a SqlDataReader.
                        SqlCommand commandSourceData = new SqlCommand(
                            "SELECT ProductID, Name, " +
                            "ProductNumber " +
                            "FROM Production.Product;", sourceConnection);
                        SqlDataReader reader =
                            commandSourceData.ExecuteReader();
            
                        // Set up the bulk copy object.
                        using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connectionString))
                        {
                            bulkCopy.DestinationTableName =
                                "dbo.BulkCopyDemoDifferentColumns";
            
                            // Set up the column mappings source and destination.
                            SqlBulkCopyColumnMapping mapID = new SqlBulkCopyColumnMapping();
                            mapID.SourceColumn = "ProductID";
                            mapID.DestinationColumn = "ProdID";
                            bulkCopy.ColumnMappings.Add(mapID);
            
                            SqlBulkCopyColumnMapping mapName = new SqlBulkCopyColumnMapping();
                            mapName.SourceColumn = "Name";
                            mapName.DestinationColumn = "ProdName";
                            bulkCopy.ColumnMappings.Add(mapName);
            
                            SqlBulkCopyColumnMapping mapNumber = new SqlBulkCopyColumnMapping();
                            mapNumber.SourceColumn = "ProductNumber";
                            mapNumber.DestinationColumn = "ProdNum";
                            bulkCopy.ColumnMappings.Add(mapNumber);
            
                            // Write from the source to the destination.
                            try
                            {
                                bulkCopy.WriteToServer(reader);
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine(ex.Message);
                            }
                            finally
                            {
                                // Close the SqlDataReader. The SqlBulkCopy
                                // object is automatically closed at the end
                                // of the using block.
                                reader.Close();
                            }
                        }
            
                        // Perform a final count on the destination 
                        // table to see how many rows were added.
                        long countEnd = System.Convert.ToInt32(
                            commandRowCount.ExecuteScalar());
                        Console.WriteLine("Ending row count = {0}", countEnd);
                        Console.WriteLine("{0} rows were added.", countEnd - countStart);
                        Console.WriteLine("Press Enter to finish.");
                        Console.ReadLine();
                    }
                }
            
                private static string GetConnectionString()
                {
                    // To avoid storing the sourceConnection string in your code,
                    // you can retrieve it from a configuration file.
                    return "Data Source=(local); " +
                        " Integrated Security=true;" +
                        "Initial Catalog=AdventureWorks;";
                }
            }
        </code>
      </example>
    </DestinationColumn>
    <DestinationOrdinal>
      <summary>
        Ordinal value of the destination column within the destination table.
      </summary>
      <value>
        The integer value of the <see cref="P:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationOrdinal" /> property, or -1 if the property has not been set.
      </value>
      <remarks>
        The <see cref="P:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationColumn" /> and <see cref="P:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationOrdinal" /> properties are mutually exclusive. The last value set takes precedence.
      </remarks>
      <example>
        <para>
          The following example bulk copies data from a source table in the <b>AdventureWorks</b> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> objects are used to create a column map for the bulk copy.
        </para>
        <note type="important">
          This sample will not run unless you have created the work tables as described in <see href="/sql/connect/ado-net/sql/bulk-copy-example-setup">Bulk Copy Example Setup</see>.
        </note>
        <para>
          This code is provided to demonstrate the syntax for using <b>SqlBulkCopy</b> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <c>INSERT … SELECT</c> statement to copy the data.
        </para>
        <!-- SqlBulkCopy_ColumnMappingDestinationOrdinal -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  string connectionString = GetConnectionString();
                  // Open a sourceConnection to the AdventureWorks database.
                  using (SqlConnection sourceConnection = new SqlConnection(connectionString))
                  {
                      sourceConnection.Open();
          
                      // Perform an initial count on the destination table.
                      SqlCommand commandRowCount = new SqlCommand(
                          "SELECT COUNT(*) FROM " +
                          "dbo.BulkCopyDemoDifferentColumns;",
                          sourceConnection);
                      long countStart = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Starting row count = {0}", countStart);
          
                      // Get data from the source table as a SqlDataReader.
                      SqlCommand commandSourceData = new SqlCommand(
                          "SELECT ProductID, Name, " +
                          "ProductNumber " +
                          "FROM Production.Product;", sourceConnection);
                      SqlDataReader reader =
                          commandSourceData.ExecuteReader();
          
                      // Set up the bulk copy object.
                      using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connectionString))
                      {
                          bulkCopy.DestinationTableName =
                              "dbo.BulkCopyDemoDifferentColumns";
          
                          // Set up the column mappings source and destination.
                          SqlBulkCopyColumnMapping mapID = new SqlBulkCopyColumnMapping();
                          mapID.SourceOrdinal = 0;
                          mapID.DestinationOrdinal = 0;
                          bulkCopy.ColumnMappings.Add(mapID);
          
                          SqlBulkCopyColumnMapping mapName = new SqlBulkCopyColumnMapping();
                          mapName.SourceOrdinal = 1;
                          mapName.DestinationOrdinal = 2;
                          bulkCopy.ColumnMappings.Add(mapName);
          
                          SqlBulkCopyColumnMapping mapNumber = new SqlBulkCopyColumnMapping();
                          mapNumber.SourceOrdinal = 2;
                          mapNumber.DestinationOrdinal = 1;
                          bulkCopy.ColumnMappings.Add(mapNumber);
          
                          // Write from the source to the destination.
                          try
                          {
                              bulkCopy.WriteToServer(reader);
                          }
                          catch (Exception ex)
                          {
                              Console.WriteLine(ex.Message);
                          }
                          finally
                          {
                              // Close the SqlDataReader. The SqlBulkCopy
                              // object is automatically closed at the end
                              // of the using block.
                              reader.Close();
                          }
                      }
          
                      // Perform a final count on the destination 
                      // table to see how many rows were added.
                      long countEnd = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Ending row count = {0}", countEnd);
                      Console.WriteLine("{0} rows were added.", countEnd - countStart);
                      Console.WriteLine("Press Enter to finish.");
                      Console.ReadLine();
                  }
              }
          
              private static string GetConnectionString()
              {
                  // To avoid storing the sourceConnection string in your code,
                  // you can retrieve it from a configuration file.
                  return "Data Source=(local); " +
                      " Integrated Security=true;" +
                      "Initial Catalog=AdventureWorks;";
              }
          }
        </code>
      </example>
    </DestinationOrdinal>
    <SourceColumn>
      <summary>
        Name of the column being mapped in the data source.
      </summary>
      <value>
        The string value of the <see cref="P:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping.SourceColumn" /> property.
      </value>
      <remarks>
        The <see cref="P:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping.SourceColumn" /> and <see cref="P:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping.SourceOrdinal " /> properties are mutually exclusive. The last value set takes precedence.
      </remarks>
      <example>
        <para>
          The following example bulk copies data from a source table in the <b>AdventureWorks</b> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> objects are used to create a column map for the bulk copy.
        </para>
        <note type="important">
          This sample will not run unless you have created the work tables as described in <see href="/sql/connect/ado-net/sql/bulk-copy-example-setup">Bulk Copy Example Setup</see>.
        </note>
        <para>
          This code is provided to demonstrate the syntax for using <b>SqlBulkCopy</b> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <c>INSERT … SELECT</c> statement to copy the data.
        </para>
        <!-- SqlBulkCopy_ColumnMappingDestinationColumn -->
        <code language="c#">
            using System;
            using System.Data;
            using Microsoft.Data.SqlClient;
            
            class Program
            {
                static void Main()
                {
                    string connectionString = GetConnectionString();
                    // Open a sourceConnection to the AdventureWorks database.
                    using (SqlConnection sourceConnection = new SqlConnection(connectionString))
                    {
                        sourceConnection.Open();
            
                        // Perform an initial count on the destination table.
                        SqlCommand commandRowCount = new SqlCommand(
                            "SELECT COUNT(*) FROM " +
                            "dbo.BulkCopyDemoDifferentColumns;",
                            sourceConnection);
                        long countStart = System.Convert.ToInt32(
                            commandRowCount.ExecuteScalar());
                        Console.WriteLine("Starting row count = {0}", countStart);
            
                        // Get data from the source table as a SqlDataReader.
                        SqlCommand commandSourceData = new SqlCommand(
                            "SELECT ProductID, Name, " +
                            "ProductNumber " +
                            "FROM Production.Product;", sourceConnection);
                        SqlDataReader reader =
                            commandSourceData.ExecuteReader();
            
                        // Set up the bulk copy object.
                        using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connectionString))
                        {
                            bulkCopy.DestinationTableName =
                                "dbo.BulkCopyDemoDifferentColumns";
            
                            // Set up the column mappings source and destination.
                            SqlBulkCopyColumnMapping mapID = new SqlBulkCopyColumnMapping();
                            mapID.SourceColumn = "ProductID";
                            mapID.DestinationColumn = "ProdID";
                            bulkCopy.ColumnMappings.Add(mapID);
            
                            SqlBulkCopyColumnMapping mapName = new SqlBulkCopyColumnMapping();
                            mapName.SourceColumn = "Name";
                            mapName.DestinationColumn = "ProdName";
                            bulkCopy.ColumnMappings.Add(mapName);
            
                            SqlBulkCopyColumnMapping mapNumber = new SqlBulkCopyColumnMapping();
                            mapNumber.SourceColumn = "ProductNumber";
                            mapNumber.DestinationColumn = "ProdNum";
                            bulkCopy.ColumnMappings.Add(mapNumber);
            
                            // Write from the source to the destination.
                            try
                            {
                                bulkCopy.WriteToServer(reader);
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine(ex.Message);
                            }
                            finally
                            {
                                // Close the SqlDataReader. The SqlBulkCopy
                                // object is automatically closed at the end
                                // of the using block.
                                reader.Close();
                            }
                        }
            
                        // Perform a final count on the destination 
                        // table to see how many rows were added.
                        long countEnd = System.Convert.ToInt32(
                            commandRowCount.ExecuteScalar());
                        Console.WriteLine("Ending row count = {0}", countEnd);
                        Console.WriteLine("{0} rows were added.", countEnd - countStart);
                        Console.WriteLine("Press Enter to finish.");
                        Console.ReadLine();
                    }
                }
            
                private static string GetConnectionString()
                {
                    // To avoid storing the sourceConnection string in your code,
                    // you can retrieve it from a configuration file.
                    return "Data Source=(local); " +
                        " Integrated Security=true;" +
                        "Initial Catalog=AdventureWorks;";
                }
            }
        </code>
      </example>
    </SourceColumn>
    <SourceOrdinal>
      <summary>
        The ordinal position of the source column within the data source.
      </summary>
      <value>
        The integer value of the <see cref="P:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping.SourceOrdinal" /> property.
      </value>
      <remarks>
        The <see cref="P:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping.SourceColumn" /> and <see cref="P:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping.SourceOrdinal" /> properties are mutually exclusive. The last value set takes precedence.
      </remarks>
      <example>
        <para>
          The following example bulk copies data from a source table in the <b>AdventureWorks</b>  sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> objects are used to create a column map for the bulk copy.
        </para>
        <note type="important">
          This sample will not run unless you have created the work tables as described in <see href="/sql/connect/ado-net/sql/bulk-copy-example-setup">Bulk Copy Example Setup</see>.
        </note>
        <para>
          This code is provided to demonstrate the syntax for using <b>SqlBulkCopy</b> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <c>INSERT … SELECT</c> statement to copy the data.
        </para>
        <!-- SqlBulkCopy_ColumnMappingDestinationOrdinal -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  string connectionString = GetConnectionString();
                  // Open a sourceConnection to the AdventureWorks database.
                  using (SqlConnection sourceConnection = new SqlConnection(connectionString))
                  {
                      sourceConnection.Open();
          
                      // Perform an initial count on the destination table.
                      SqlCommand commandRowCount = new SqlCommand(
                          "SELECT COUNT(*) FROM " +
                          "dbo.BulkCopyDemoDifferentColumns;",
                          sourceConnection);
                      long countStart = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Starting row count = {0}", countStart);
          
                      // Get data from the source table as a SqlDataReader.
                      SqlCommand commandSourceData = new SqlCommand(
                          "SELECT ProductID, Name, " +
                          "ProductNumber " +
                          "FROM Production.Product;", sourceConnection);
                      SqlDataReader reader =
                          commandSourceData.ExecuteReader();
          
                      // Set up the bulk copy object.
                      using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connectionString))
                      {
                          bulkCopy.DestinationTableName =
                              "dbo.BulkCopyDemoDifferentColumns";
          
                          // Set up the column mappings source and destination.
                          SqlBulkCopyColumnMapping mapID = new SqlBulkCopyColumnMapping();
                          mapID.SourceOrdinal = 0;
                          mapID.DestinationOrdinal = 0;
                          bulkCopy.ColumnMappings.Add(mapID);
          
                          SqlBulkCopyColumnMapping mapName = new SqlBulkCopyColumnMapping();
                          mapName.SourceOrdinal = 1;
                          mapName.DestinationOrdinal = 2;
                          bulkCopy.ColumnMappings.Add(mapName);
          
                          SqlBulkCopyColumnMapping mapNumber = new SqlBulkCopyColumnMapping();
                          mapNumber.SourceOrdinal = 2;
                          mapNumber.DestinationOrdinal = 1;
                          bulkCopy.ColumnMappings.Add(mapNumber);
          
                          // Write from the source to the destination.
                          try
                          {
                              bulkCopy.WriteToServer(reader);
                          }
                          catch (Exception ex)
                          {
                              Console.WriteLine(ex.Message);
                          }
                          finally
                          {
                              // Close the SqlDataReader. The SqlBulkCopy
                              // object is automatically closed at the end
                              // of the using block.
                              reader.Close();
                          }
                      }
          
                      // Perform a final count on the destination 
                      // table to see how many rows were added.
                      long countEnd = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Ending row count = {0}", countEnd);
                      Console.WriteLine("{0} rows were added.", countEnd - countStart);
                      Console.WriteLine("Press Enter to finish.");
                      Console.ReadLine();
                  }
              }
          
              private static string GetConnectionString()
              {
                  // To avoid storing the sourceConnection string in your code,
                  // you can retrieve it from a configuration file.
                  return "Data Source=(local); " +
                      " Integrated Security=true;" +
                      "Initial Catalog=AdventureWorks;";
              }
          }
        </code>
      </example>
    </SourceOrdinal>
  </members>
</docs>

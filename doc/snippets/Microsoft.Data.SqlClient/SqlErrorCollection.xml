<docs>
  <members name="SqlErrorCollection">
    <ctor>
      <summary>Constructs and initializes a new instance of the <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" /> class.</summary>
    </ctor>
    <SqlErrorCollection>
      <summary>
        Collects all errors generated by the .NET Framework Data Provider for SQL Server. This class cannot be inherited.
      </summary>
      <remarks>
        This class is created by <see cref="T:Microsoft.Data.SqlClient.SqlException" /> to collect instances of the <see cref="T:Microsoft.Data.SqlClient.SqlError" /> class. <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" /> always contains at least one instance of the <see cref="T:Microsoft.Data.SqlClient.SqlError" /> class.
      </remarks>
      <example>
        <para>
          The following example displays each <see cref="T:Microsoft.Data.SqlClient.SqlError" /> within the <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" /> collection.
        </para>
        <!-- SqlError_ToString -->
        <code language="c#">
          using System;
          using System.Data;
          using System.Text;
          using Microsoft.Data.SqlClient;

          class Program
          {
              static void Main()
              {
                  string s = GetConnectionString();
                  ShowSqlException(s);
                  Console.ReadLine();
              }

              public static void ShowSqlException(string connectionString)
              {
                  string queryString = "EXECUTE NonExistentStoredProcedure";

                  using (SqlConnection connection = new SqlConnection(connectionString))
                  {
                      SqlCommand command = new SqlCommand(queryString, connection);
                      try
                      {
                          command.Connection.Open();
                          command.ExecuteNonQuery();
                      }
                      catch (SqlException ex)
                      {
                          DisplaySqlErrors(ex);
                      }
                  }
              }

              private static void DisplaySqlErrors(SqlException exception)
              {
                  for (int i = 0; i &lt; exception.Errors.Count; i++)
                  {
                      Console.WriteLine("Index #" + i + "\n" +
                          "Error: " + exception.Errors[i].ToString() + "\n");
                  }
                  Console.ReadLine();
              }

              static private string GetConnectionString()
              {
                  // To avoid storing the connection string in your code,
                  // you can retrieve it from a configuration file.
                  return "Data Source=(local);Initial Catalog=AdventureWorks;"
                      + "Integrated Security=SSPI";
              }
          }
        </code>
      </example>
      <seealso cref="T:Microsoft.Data.SqlClient.SqlError" />
      <seealso cref="T:Microsoft.Data.SqlClient.SqlException" />
    </SqlErrorCollection>
    <CopyToArrayIndex1>
      <param name="array">
        The <see cref="T:System.Array" /> to copy elements into.
      </param>
      <param name="index">
        The index from which to start copying into the <paramref name="array" /> parameter.
      </param>
      <summary>
        Copies the elements of the <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" /> collection into an <see cref="T:System.Array" />, starting at the specified index.
      </summary>
      <exception cref="T:System.ArgumentException">
        The sum of <paramref name="index" /> and the number of elements in the <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" /> collection is greater than the <see cref="P:System.Array.Length" /> of the <see cref="T:System.Array" />.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        The <paramref name="array" /> is <see langword="null" />.
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        The <paramref name="index" /> is not valid for <paramref name="array" />.
      </exception>
    </CopyToArrayIndex1>
    <CopyToArrayIndex2>
      <param name="array">
        The <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" /> to copy the elements into.
      </param>
      <param name="index">
        The index from which to start copying into the <paramref name="array" /> parameter.
      </param>
      <summary>
        Copies the elements of the <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" /> collection into a <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" />, starting at the specified index.
      </summary>
      <exception cref="T:System.ArgumentException">
        The sum of <paramref name="index" /> and the number of elements in the <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" /> collection is greater than the length of the <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" />.
      </exception>
      <exception cref="T:System.ArgumentNullException">
        The <paramref name="array" /> is <see langword="null" />.
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        The <paramref name="index" /> is not valid for <paramref name="array" />.
      </exception>
    </CopyToArrayIndex2>
    <Count>
      <summary>
        Gets the number of errors in the collection.
      </summary>
      <value>
        The total number of errors in the collection.
      </value>
      <example>
        <para>
          The following example displays each <see cref="T:Microsoft.Data.SqlClient.SqlError" /> within the <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" /> collection.
        </para>
        <!-- SqlError_ToString -->
        <code language="c#">
          using System;
          using System.Data;
          using System.Text;
          using Microsoft.Data.SqlClient;

          class Program
          {
              static void Main()
              {
                  string s = GetConnectionString();
                  ShowSqlException(s);
                  Console.ReadLine();
              }

              public static void ShowSqlException(string connectionString)
              {
                  string queryString = "EXECUTE NonExistentStoredProcedure";

                  using (SqlConnection connection = new SqlConnection(connectionString))
                  {
                      SqlCommand command = new SqlCommand(queryString, connection);
                      try
                      {
                          command.Connection.Open();
                          command.ExecuteNonQuery();
                      }
                      catch (SqlException ex)
                      {
                          DisplaySqlErrors(ex);
                      }
                  }
              }

              private static void DisplaySqlErrors(SqlException exception)
              {
                  for (int i = 0; i &lt; exception.Errors.Count; i++)
                  {
                      Console.WriteLine("Index #" + i + "\n" +
                          "Error: " + exception.Errors[i].ToString() + "\n");
                  }
                  Console.ReadLine();
              }

              static private string GetConnectionString()
              {
                  // To avoid storing the connection string in your code,
                  // you can retrieve it from a configuration file.
                  return "Data Source=(local);Initial Catalog=AdventureWorks;"
                      + "Integrated Security=SSPI";
              }
          }
        </code>
      </example>
    </Count>
    <GetEnumerator>
      <summary>
        Returns an enumerator that iterates through the <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" />.
      </summary>
      <returns>
        An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" />.
      </returns>
      <remarks>
        Enumerators can be used to read the data in a collection, but they cannot be used to modify the underlying collection.
      </remarks>
    </GetEnumerator>
    <Item>
      <param name="index">
        The zero-based index of the error to retrieve.
      </param>
      <summary>
        Gets the error at the specified index.
      </summary>
      <value>
        A <see cref="T:Microsoft.Data.SqlClient.SqlError" /> that contains the error at the specified index.
      </value>
      <example>
        <para>
          The following example displays each <see cref="T:Microsoft.Data.SqlClient.SqlError" /> within the <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" /> collection.
        </para>
        <!-- SqlError_ToString -->
        <code language="c#">
          using System;
          using System.Data;
          using System.Text;
          using Microsoft.Data.SqlClient;

          class Program
          {
              static void Main()
              {
                  string s = GetConnectionString();
                  ShowSqlException(s);
                  Console.ReadLine();
              }

              public static void ShowSqlException(string connectionString)
              {
                  string queryString = "EXECUTE NonExistentStoredProcedure";

                  using (SqlConnection connection = new SqlConnection(connectionString))
                  {
                      SqlCommand command = new SqlCommand(queryString, connection);
                      try
                      {
                          command.Connection.Open();
                          command.ExecuteNonQuery();
                      }
                      catch (SqlException ex)
                      {
                          DisplaySqlErrors(ex);
                      }
                  }
              }

              private static void DisplaySqlErrors(SqlException exception)
              {
                  for (int i = 0; i &lt; exception.Errors.Count; i++)
                  {
                      Console.WriteLine("Index #" + i + "\n" +
                          "Error: " + exception.Errors[i].ToString() + "\n");
                  }
                  Console.ReadLine();
              }

              static private string GetConnectionString()
              {
                  // To avoid storing the connection string in your code,
                  // you can retrieve it from a configuration file.
                  return "Data Source=(local);Initial Catalog=AdventureWorks;"
                      + "Integrated Security=SSPI";
              }
          }
        </code>
      </example>
      <exception cref="T:System.IndexOutOfRangeException">
        Index parameter is outside array bounds.
      </exception>
      <seealso cref="P:Microsoft.Data.SqlClient.SqlErrorCollection.Count" />
    </Item>
    <System.Collections.ICollection.IsSynchronized>
      <summary>
        For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.
      </summary>
      <value>
        <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.
      </value>
      <remarks>
        This member is an explicit interface member implementation. It can be used only when the <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" /> instance is cast to an <see cref="T:System.Collections.ICollection" /> interface.
      </remarks>
    </System.Collections.ICollection.IsSynchronized>
    <System.Collections.ICollection.SyncRoot>
      <summary>
        For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.
      </summary>
      <value>
        An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
      </value>
      <remarks>
        This member is an explicit interface member implementation. It can be used only when the <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" /> instance is cast to an <see cref="T:System.Collections.ICollection" /> interface.
      </remarks>
    </System.Collections.ICollection.SyncRoot>
  </members>
</docs>

<docs>
  <members name="SqlColumnEncryptionCspProvider">
    <SqlColumnEncryptionCspProvider>
      <summary>
        The CMK Store provider implementation for using Microsoft CAPI based Cryptographic Service Providers (CSP) with <see href="https://docs.microsoft.com/sql/relational-databases/security/encryption/always-encrypted-database-engine">Always Encrypted</see>.
      </summary>
      <remarks>
        Enables storing Always Encrypted column master key keys in a store, such as a hardware security module (HSM), that supports the Microsoft CAPI based Cryptographic Service Providers (CSP).
      </remarks>
    </SqlColumnEncryptionCspProvider>
    <ctor>
      <summary>
        Initializes a new instance of the <see cref="T:Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider" /> class.
      </summary>
    </ctor>
    <DecryptColumnEncryptionKey>
      <param name="masterKeyPath">
        The master key path.
      </param>
      <param name="encryptionAlgorithm">
        The encryption algorithm.
      </param>
      <param name="encryptedColumnEncryptionKey">
        The encrypted column encryption key.
      </param>
      <summary>
        Decrypts the given encrypted value using an asymmetric key specified by the key path and algorithm. The key path will be in the format of <c>[ProviderName]/KeyIdentifier</c> and should be an asymmetric key stored in the specified CSP provider. The valid algorithm used to encrypt/decrypt the CEK is <c>RSA_OAEP</c>'.
      </summary>
      <returns>
        The decrypted column encryption key.
      </returns>
    </DecryptColumnEncryptionKey>
    <EncryptColumnEncryptionKey>
      <param name="masterKeyPath">
        The master key path.
      </param>
      <param name="encryptionAlgorithm">
        The encryption algorithm.
      </param>
      <param name="columnEncryptionKey">
        The plaintext column encryption key.
      </param>
      <summary>
        Encrypts the given plain text column encryption key using an asymmetric key specified by the key path and the specified algorithm. The key path will be in the format of <c>[ProviderName]/KeyIdentifier</c> and should be an asymmetric key stored in the specified CSP provider. The valid algorithm used to encrypt/decrypt the CEK is <c>RSA_OAEP</c>.
      </summary>
      <returns>
        The encrypted column encryption key.
      </returns>
    </EncryptColumnEncryptionKey>
    <ProviderName>
      <summary>
        A constant string for the provider name <c>MSSQL_CSP_PROVIDER</c>.
      </summary>
    </ProviderName>
    <SignColumnMasterKeyMetadata>
      <param name="masterKeyPath">
        The column master key path. The path format is specific to a key store provider.
      </param>
      <param name="allowEnclaveComputations">
        <see langword="true" /> to indicate that the column master key supports enclave computations; otherwise, <see langword="false" />.
      </param>
      <summary>
        Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.
      </summary>
      <returns>
        The signature of the column master key metadata.
      </returns>
      <remarks>
        The <see cref="P:Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider.SignColumnMasterKeyMetadata" /> method must be implemented by the corresponding key store providers. <see cref="P:Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider.SignColumnMasterKeyMetadata" /> should use an asymmetric key identified by a key path and sign the master key metadata consisting of <paramref name="masterKeyPath" />, <paramref name="allowEnclaveComputations" />, and <see cref="P:Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider.ProviderName" />.
      </remarks>
    </SignColumnMasterKeyMetadata>
    <VerifyColumnMasterKeyMetadata>
      <param name="masterKeyPath">
        The complete path of an asymmetric key. The path format is specific to a key store provider.
      </param>
      <param name="allowEnclaveComputations">
        A boolean that indicates if this key can be sent to the trusted enclave.
      </param>
      <param name="signature">
        Master key metadata signature.
      </param>
      <summary>
        This function must be implemented by the corresponding Key Store providers. This function should use an asymmetric key identified by a key path and sign the masterkey metadata consisting of (<paramref name="masterKeyPath" />, <paramref name="allowEnclaveComputations" />, <see cref="P:Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider.ProviderName" />).
      </summary>
      <returns>
        A Boolean that indicates if the master key metadata can be verified based on the provided signature.
      </returns>
    </VerifyColumnMasterKeyMetadata>
  </members>
</docs>

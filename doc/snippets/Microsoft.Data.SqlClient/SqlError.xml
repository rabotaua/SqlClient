<docs>
  <members name="SqlError">
    <SqlError>
      <summary>
        Collects information relevant to a warning or error returned by SQL Server.
      </summary>
      <remarks>
        <para>
          This class is created by the .NET Framework Data Provider for SQL Server when an error occurs. An instance of <see cref="T:Microsoft.Data.SqlClient.SqlError" /> is created and managed by the <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" />, which in turn is created by the <see cref="T:Microsoft.Data.SqlClient.SqlException" /> class.
        </para>
        <para>
          Messages with a severity level of 10 or less are informational and indicate problems caused by mistakes in information that a user has entered. Severity levels from 11 through 16 are generated by the user, and can be corrected by the user. Severity levels from 17 through 25 indicate software or hardware errors. When a level 17, 18, or 19 error occurs, you can continue working, although you might not be able to execute a particular statement.
        </para>
        <para>
          The <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> remains open when the severity level is 19 or less. When the severity level is 20 or greater, the server usually closes the <see cref="T:Microsoft.Data.SqlClient.SqlConnection" />. However, the user can reopen the connection and continue. In both cases, a <see cref="T:Microsoft.Data.SqlClient.SqlException" /> is generated by the method executing the command.
        </para>
        <para>
          For more information on errors generated by SQL Server, see <see href="https://msdn.microsoft.com/library/ms365262.aspx">Cause and Resolution of Database Engine Errors</see>. For more information about severity levels, see <see href="https://msdn.microsoft.com/library/ms164086.aspx">Database Engine Error Severities</see>.
        </para>
      </remarks>
      <example>
        <para>
          The following example displays each <see cref="T:Microsoft.Data.SqlClient.SqlError" /> within the <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" /> collection.
        </para>
        <!-- SqlError_ToString -->
        <code language="c#">
          using System;
          using System.Data;
          using System.Text;
          using Microsoft.Data.SqlClient;

          class Program
          {
              static void Main()
              {
                  string s = GetConnectionString();
                  ShowSqlException(s);
                  Console.ReadLine();
              }

              public static void ShowSqlException(string connectionString)
              {
                  string queryString = "EXECUTE NonExistentStoredProcedure";

                  using (SqlConnection connection = new SqlConnection(connectionString))
                  {
                      SqlCommand command = new SqlCommand(queryString, connection);
                      try
                      {
                          command.Connection.Open();
                          command.ExecuteNonQuery();
                      }
                      catch (SqlException ex)
                      {
                          DisplaySqlErrors(ex);
                      }
                  }
              }

              private static void DisplaySqlErrors(SqlException exception)
              {
                  for (int i = 0; i &lt; exception.Errors.Count; i++)
                  {
                      Console.WriteLine("Index #" + i + "\n" +
                          "Error: " + exception.Errors[i].ToString() + "\n");
                  }
                  Console.ReadLine();
              }

              static private string GetConnectionString()
              {
                  // To avoid storing the connection string in your code,
                  // you can retrieve it from a configuration file.
                  return "Data Source=(local);Initial Catalog=AdventureWorks;"
                       + "Integrated Security=SSPI";
              }
          }
        </code>
      </example>
      <seealso cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" />
      <seealso cref="T:Microsoft.Data.SqlClient.SqlException" />
    </SqlError>
    <ctor>
      <summary>Constructs a new instance of the <see cref="T:Microsoft.Data.SqlClient.SqlError" /> class.</summary>
    </ctor>
    <Class>
      <summary>
        Gets the severity level of the error returned from SQL Server.
      </summary>
      <value>
        A value from 1 to 25 that indicates the severity level of the error. The default is 0.
      </value>
      <remarks>
        <para>
          Messages with a severity level of 10 or less are informational and indicate problems caused by mistakes in information that a user has entered. Severity levels from 11 through 16 are generated by the user, and can be corrected by the user. Severity levels from 17 through 25 indicate software or hardware errors. When a level 17, 18, or 19 error occurs, you can continue working, although you might not be able to execute a particular statement.
        </para>
        <para>
          The <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> remains open when the severity level is 19 or less. When the severity level is 20 or greater, the server usually closes the <see cref="T:Microsoft.Data.SqlClient.SqlConnection" />. However, the user can reopen the connection and continue. In both cases, a <see cref="T:Microsoft.Data.SqlClient.SqlException" /> is generated by the method executing the command.
        </para>
        <para>
          For more information on errors generated by SQL Server, see <see href="/sql/relational-databases/errors-events/database-engine-events-and-errors">Database Engine Events and Errors</see>.
        </para>
      </remarks>
      <example>
        <para>
          The following example displays each <see cref="T:Microsoft.Data.SqlClient.SqlError" /> within the <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" /> collection.
        </para>
        <!-- SqlError_State -->
        <code language="c#">
          using System;
          using System.Collections.Generic;
          using System.Text;
          using Microsoft.Data.SqlClient;

          namespace Classic_WebData_SqlError.StateCS
          {
              class Program
              {
                  static void Main()
                  {
                      //DisplaySqlErrors();
                  }

                  public void DisplaySqlErrors(SqlException exception)
                  {
                      for (int i = 0; i &lt; exception.Errors.Count; i++)
                      {
                          Console.WriteLine("Index #" + i + "\n" +
                              "Source: " + exception.Errors[i].Source + "\n" +
                              "Number: " + exception.Errors[i].Number.ToString() + "\n" +
                              "State: " + exception.Errors[i].State.ToString() + "\n" +
                              "Class: " + exception.Errors[i].Class.ToString() + "\n" +
                              "Server: " + exception.Errors[i].Server + "\n" +
                              "Message: " + exception.Errors[i].Message + "\n" +
                              "Procedure: " + exception.Errors[i].Procedure + "\n" +
                              "LineNumber: " + exception.Errors[i].LineNumber.ToString());
                      }
                      Console.ReadLine();
                  }
              }
          }
        </code>
      </example>
    </Class>
    <LineNumber>
      <summary>
        Gets the line number within the Transact-SQL command batch or stored procedure that contains the error.
      </summary>
      <value>
        The line number within the Transact-SQL command batch or stored procedure that contains the error.
      </value>
      <remarks>
        <para>
          Line numbering starts at 1. If the value is 0, the line number is not applicable.
        </para>
        <para>
          For more information on errors generated by SQL Server, see <see href="/sql/relational-databases/errors-events/database-engine-events-and-errors">Database Engine Events and Errors</see>.
        </para>
      </remarks>
      <example>
        <para>
          The following example displays each <see cref="T:Microsoft.Data.SqlClient.SqlError" /> within the <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" /> collection.
        </para>
        <!-- SqlError_State -->
        <code language="c#">
          using System;
          using System.Collections.Generic;
          using System.Text;
          using Microsoft.Data.SqlClient;

          namespace Classic_WebData_SqlError.StateCS
          {
              class Program
              {
                  static void Main()
                  {
                      //DisplaySqlErrors();
                  }

                  public void DisplaySqlErrors(SqlException exception)
                  {
                      for (int i = 0; i &lt; exception.Errors.Count; i++)
                      {
                          Console.WriteLine("Index #" + i + "\n" +
                              "Source: " + exception.Errors[i].Source + "\n" +
                              "Number: " + exception.Errors[i].Number.ToString() + "\n" +
                              "State: " + exception.Errors[i].State.ToString() + "\n" +
                              "Class: " + exception.Errors[i].Class.ToString() + "\n" +
                              "Server: " + exception.Errors[i].Server + "\n" +
                              "Message: " + exception.Errors[i].Message + "\n" +
                              "Procedure: " + exception.Errors[i].Procedure + "\n" +
                              "LineNumber: " + exception.Errors[i].LineNumber.ToString());
                      }
                      Console.ReadLine();
                  }
              }
          }
        </code>
      </example>
    </LineNumber>
    <Message>
      <summary>
        Gets the text describing the error.
      </summary>
      <value>
        The text describing the error. For more information on errors generated by SQL Server, see <see href="/sql/relational-databases/errors-events/database-engine-events-and-errors">
          Database Engine Events and Errors
        </see>.
      </value>
      <example>
        <para>
          The following example displays each <see cref="T:Microsoft.Data.SqlClient.SqlError" /> within the <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" /> collection.
        </para>
        <!-- SqlError_State -->
        <code language="c#">
          using System;
          using System.Collections.Generic;
          using System.Text;
          using Microsoft.Data.SqlClient;

          namespace Classic_WebData_SqlError.StateCS
          {
              class Program
              {
                  static void Main()
                  {
                      //DisplaySqlErrors();
                  }

                  public void DisplaySqlErrors(SqlException exception)
                  {
                      for (int i = 0; i &lt; exception.Errors.Count; i++)
                      {
                          Console.WriteLine("Index #" + i + "\n" +
                              "Source: " + exception.Errors[i].Source + "\n" +
                              "Number: " + exception.Errors[i].Number.ToString() + "\n" +
                              "State: " + exception.Errors[i].State.ToString() + "\n" +
                              "Class: " + exception.Errors[i].Class.ToString() + "\n" +
                              "Server: " + exception.Errors[i].Server + "\n" +
                              "Message: " + exception.Errors[i].Message + "\n" +
                              "Procedure: " + exception.Errors[i].Procedure + "\n" +
                              "LineNumber: " + exception.Errors[i].LineNumber.ToString());
                      }
                      Console.ReadLine();
                  }
              }
          }
        </code>
      </example>
    </Message>
    <Number>
      <summary>
        Gets a number that identifies the type of error.
      </summary>
      <value>
        The number that identifies the type of error.
      </value>
      <remarks>
        <para>
          The following table describes the possible values for this property:
        </para>
        <list type="table">
          <listheader>
            <term>Source of Error</term>
            <description>SqlError.Number</description>
            <description>SqlError.State</description>
            <description>SqlException has inner Win32Exception (beginning with.NET Framework 4.5)</description>
          </listheader>
          <item>
            <term>Error from server</term>
            <description>
              <para>
                Server error code
              </para>
              <para>
                This number corresponds to an entry in the <c>master.dbo.sysmessages</c> table.
              </para>
            </description>
            <description>Typically greater than 0</description>
            <description>No</description>
          </item>
          <item>
            <term>Connection timeout</term>
            <description>-2</description>
            <description>0</description>
            <description>Yes (Number = 258)</description>
          </item>
          <item>
            <term>Communication error (non-LocalDB)</term>
            <description>Win32 error code</description>
            <description>0</description>
            <description>Yes (Number = Win32 error code)</description>
          </item>
          <item>
            <term>Communication error (LocalDB)</term>
            <description>Win32 error code</description>
            <description>0</description>
            <description>No</description>
          </item>
          <item>
            <term>Encryption capability mismatch</term>
            <description>20</description>
            <description>0</description>
            <description>No</description>
          </item>
          <item>
            <term>Failed to start LocalDB</term>
            <description>Win32 error code</description>
            <description>0</description>
            <description>No</description>
          </item>
          <item>
            <term>Read-only routing failure</term>
            <description>0</description>
            <description>0</description>
            <description>No</description>
          </item>
          <item>
            <term>Server had severe error processing query</term>
            <description>0</description>
            <description>0</description>
            <description>No</description>
          </item>
          <item>
            <term>Processed cancellation while parsing results</term>
            <description>0</description>
            <description>0</description>
            <description>No</description>
          </item>
          <item>
            <term>Failed to create user instance</term>
            <description>0</description>
            <description>0</description>
            <description>No</description>
          </item>
        </list>
        <para>
          For more information on errors generated by SQL Server, see <see href="/sql/relational-databases/errors-events/database-engine-events-and-errors">Database Engine Events and Errors</see>.
        </para>
      </remarks>
      <example>
        <para>
          The following example displays each <see cref="T:Microsoft.Data.SqlClient.SqlError" /> within the <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" /> collection.
        </para>
        <!-- SqlError_State -->
        <code language="c#">
          using System;
          using System.Collections.Generic;
          using System.Text;
          using Microsoft.Data.SqlClient;

          namespace Classic_WebData_SqlError.StateCS
          {
              class Program
              {
                  static void Main()
                  {
                      //DisplaySqlErrors();
                  }

                  public void DisplaySqlErrors(SqlException exception)
                  {
                      for (int i = 0; i &lt; exception.Errors.Count; i++)
                      {
                          Console.WriteLine("Index #" + i + "\n" +
                              "Source: " + exception.Errors[i].Source + "\n" +
                              "Number: " + exception.Errors[i].Number.ToString() + "\n" +
                              "State: " + exception.Errors[i].State.ToString() + "\n" +
                              "Class: " + exception.Errors[i].Class.ToString() + "\n" +
                              "Server: " + exception.Errors[i].Server + "\n" +
                              "Message: " + exception.Errors[i].Message + "\n" +
                              "Procedure: " + exception.Errors[i].Procedure + "\n" +
                              "LineNumber: " + exception.Errors[i].LineNumber.ToString());
                      }
                      Console.ReadLine();
                  }
              }
          }
        </code>
      </example>
    </Number>
    <Procedure>
      <summary>
        Gets the name of the stored procedure or remote procedure call (RPC) that generated the error.
      </summary>
      <value>
        The name of the stored procedure or RPC. For more information on errors generated by SQL Server, see <see href="/sql/relational-databases/errors-events/database-engine-events-and-errors">Database Engine Events and Errors</see>.
      </value>
      <example>
        <para>
          The following example displays each <see cref="T:Microsoft.Data.SqlClient.SqlError" /> within the <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" /> collection.
        </para>
        <!-- SqlError_State -->
        <code language="c#">
          using System;
          using System.Collections.Generic;
          using System.Text;
          using Microsoft.Data.SqlClient;

          namespace Classic_WebData_SqlError.StateCS
          {
              class Program
              {
                  static void Main()
                  {
                      //DisplaySqlErrors();
                  }

                  public void DisplaySqlErrors(SqlException exception)
                  {
                      for (int i = 0; i &lt; exception.Errors.Count; i++)
                      {
                          Console.WriteLine("Index #" + i + "\n" +
                              "Source: " + exception.Errors[i].Source + "\n" +
                              "Number: " + exception.Errors[i].Number.ToString() + "\n" +
                              "State: " + exception.Errors[i].State.ToString() + "\n" +
                              "Class: " + exception.Errors[i].Class.ToString() + "\n" +
                              "Server: " + exception.Errors[i].Server + "\n" +
                              "Message: " + exception.Errors[i].Message + "\n" +
                              "Procedure: " + exception.Errors[i].Procedure + "\n" +
                              "LineNumber: " + exception.Errors[i].LineNumber.ToString());
                      }
                      Console.ReadLine();
                  }
              }
          }
        </code>
      </example>
    </Procedure>
    <Server>
      <summary>
        Gets the name of the instance of SQL Server that generated the error.
      </summary>
      <value>
        The name of the instance of SQL Server.
      </value>
      <example>
        <para>
          The following example displays each <see cref="T:Microsoft.Data.SqlClient.SqlError" /> within the <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" /> collection.
        </para>
        <!-- SqlError_State -->
        <code language="c#">
          using System;
          using System.Collections.Generic;
          using System.Text;
          using Microsoft.Data.SqlClient;

          namespace Classic_WebData_SqlError.StateCS
          {
              class Program
              {
                  static void Main()
                  {
                      //DisplaySqlErrors();
                  }

                  public void DisplaySqlErrors(SqlException exception)
                  {
                      for (int i = 0; i &lt; exception.Errors.Count; i++)
                      {
                          Console.WriteLine("Index #" + i + "\n" +
                              "Source: " + exception.Errors[i].Source + "\n" +
                              "Number: " + exception.Errors[i].Number.ToString() + "\n" +
                              "State: " + exception.Errors[i].State.ToString() + "\n" +
                              "Class: " + exception.Errors[i].Class.ToString() + "\n" +
                              "Server: " + exception.Errors[i].Server + "\n" +
                              "Message: " + exception.Errors[i].Message + "\n" +
                              "Procedure: " + exception.Errors[i].Procedure + "\n" +
                              "LineNumber: " + exception.Errors[i].LineNumber.ToString());
                      }
                      Console.ReadLine();
                  }
              }
          }
        </code>
      </example>
    </Server>
    <Source>
      <summary>
        Gets the name of the provider that generated the error.
      </summary>
      <value>
        The name of the provider that generated the error.
      </value>
      <example>
        <para>
          The following example displays each <see cref="T:Microsoft.Data.SqlClient.SqlError" /> within the <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" /> collection.
        </para>
        <!-- SqlError_State -->
        <code language="c#">
          using System;
          using System.Collections.Generic;
          using System.Text;
          using Microsoft.Data.SqlClient;

          namespace Classic_WebData_SqlError.StateCS
          {
              class Program
              {
                  static void Main()
                  {
                      //DisplaySqlErrors();
                  }

                  public void DisplaySqlErrors(SqlException exception)
                  {
                      for (int i = 0; i &lt; exception.Errors.Count; i++)
                      {
                          Console.WriteLine("Index #" + i + "\n" +
                              "Source: " + exception.Errors[i].Source + "\n" +
                              "Number: " + exception.Errors[i].Number.ToString() + "\n" +
                              "State: " + exception.Errors[i].State.ToString() + "\n" +
                              "Class: " + exception.Errors[i].Class.ToString() + "\n" +
                              "Server: " + exception.Errors[i].Server + "\n" +
                              "Message: " + exception.Errors[i].Message + "\n" +
                              "Procedure: " + exception.Errors[i].Procedure + "\n" +
                              "LineNumber: " + exception.Errors[i].LineNumber.ToString());
                      }
                      Console.ReadLine();
                  }
              }
          }
        </code>
      </example>
    </Source>
    <State>
      <summary>
        Some error messages can be raised at multiple points in the code for the Database Engine. For example, an 1105 error can be raised for several different conditions. Each specific condition that raises an error assigns a unique state code.
      </summary>
      <value>
        The state code.
      </value>
      <remarks>
        <para>
          State is only set for errors that are received from the server.
        </para>
        <para>
          For more information on errors generated by SQL Server, see <see href="https://msdn.microsoft.com/library/ms165761.aspx">Understanding Database Engine Errors</see>.
        </para>
      </remarks>
      <example>
        <para>
          The following example displays each <see cref="T:Microsoft.Data.SqlClient.SqlError" /> within the <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" /> collection.
        </para>
        <!-- SqlError_State -->
        <code language="c#">
          using System;
          using System.Collections.Generic;
          using System.Text;
          using Microsoft.Data.SqlClient;

          namespace Classic_WebData_SqlError.StateCS
          {
              class Program
              {
                  static void Main()
                  {
                      //DisplaySqlErrors();
                  }

                  public void DisplaySqlErrors(SqlException exception)
                  {
                      for (int i = 0; i &lt; exception.Errors.Count; i++)
                      {
                          Console.WriteLine("Index #" + i + "\n" +
                              "Source: " + exception.Errors[i].Source + "\n" +
                              "Number: " + exception.Errors[i].Number.ToString() + "\n" +
                              "State: " + exception.Errors[i].State.ToString() + "\n" +
                              "Class: " + exception.Errors[i].Class.ToString() + "\n" +
                              "Server: " + exception.Errors[i].Server + "\n" +
                              "Message: " + exception.Errors[i].Message + "\n" +
                              "Procedure: " + exception.Errors[i].Procedure + "\n" +
                              "LineNumber: " + exception.Errors[i].LineNumber.ToString());
                      }
                      Console.ReadLine();
                  }
              }
          }
        </code>
      </example>
    </State>
    <ToString>
      <summary>
        Gets the complete text of the error message.
      </summary>
      <returns>
        The complete text of the error.
      </returns>
      <remarks>
        <para>
          The string is in the form "SqlError:", followed by the <see cref="P:Microsoft.Data.SqlClient.SqlError.Message" />, and the stack trace. For example:
        </para>
        <code>
          SqlError:UserId or Password not valid. \&lt;stack trace&gt;
        </code>
      </remarks>
      <example>
        <para>
          The following example displays each <see cref="T:Microsoft.Data.SqlClient.SqlError" /> within the <see cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" /> collection.
        </para>
        <!-- SqlError_ToString -->
        <code language="c#">
          using System;
          using System.Data;
          using System.Text;
          using Microsoft.Data.SqlClient;

          class Program
          {
              static void Main()
              {
                  string s = GetConnectionString();
                  ShowSqlException(s);
                  Console.ReadLine();
              }

              public static void ShowSqlException(string connectionString)
              {
                  string queryString = "EXECUTE NonExistentStoredProcedure";

                  using (SqlConnection connection = new SqlConnection(connectionString))
                  {
                      SqlCommand command = new SqlCommand(queryString, connection);
                      try
                      {
                          command.Connection.Open();
                          command.ExecuteNonQuery();
                      }
                      catch (SqlException ex)
                      {
                          DisplaySqlErrors(ex);
                      }
                  }
              }

              private static void DisplaySqlErrors(SqlException exception)
              {
                  for (int i = 0; i &lt; exception.Errors.Count; i++)
                  {
                      Console.WriteLine("Index #" + i + "\n" +
                          "Error: " + exception.Errors[i].ToString() + "\n");
                  }
                  Console.ReadLine();
              }

              static private string GetConnectionString()
              {
                  // To avoid storing the connection string in your code,
                  // you can retrieve it from a configuration file.
                  return "Data Source=(local);Initial Catalog=AdventureWorks;"
                       + "Integrated Security=SSPI";
              }
          }
        </code>
      </example>
    </ToString>
  </members>
</docs>

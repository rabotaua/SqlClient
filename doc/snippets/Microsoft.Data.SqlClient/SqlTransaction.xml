<docs>
  <members name="SqlTransaction">
    <SqlTransaction>
      <summary>
        Represents a Transact-SQL transaction to be made in a SQL Server database. This class cannot be inherited.
      </summary>
      <remarks>
        <para>
          The application creates a <see cref="T:Microsoft.Data.SqlClient.SqlTransaction" /> object by calling <see cref="M:Microsoft.Data.SqlClient.SqlConnection.BeginTransaction" /> on the <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> object. All subsequent operations associated with the transaction (for example, committing or aborting the transaction), are performed on the <see cref="T:Microsoft.Data.SqlClient.SqlTransaction" /> object.
        </para>
        <note type="note">
          <c>Try</c> / <c>Catch</c> exception handling should always be used when committing or rolling back a <see cref="T:Microsoft.Data.SqlClient.SqlTransaction" />. Both <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Commit" /> and <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Rollback" /> generate an <see cref="T:System.InvalidOperationException" /> if the connection is terminated or if the transaction has already been rolled back on the server.
        </note>
        <para>
          For more information on SQL Server transactions, see <see href="https://msdn.microsoft.com/library/ms175127\(SQL.105\).aspx">Explicit Transactions</see> and <see href="ttps://msdn.microsoft.com/library/ms187484\(SQL.105\).aspx">Coding Efficient Transactions</see>
        </para>
      </remarks>
      <example>
        <para>
          The following example creates a <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> and a <see cref="T:Microsoft.Data.SqlClient.SqlTransaction" />. It also demonstrates how to use the <see cref="M:Microsoft.Data.SqlClient.SqlConnection.BeginTransaction" />, <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Commit" />, and <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Rollback" /> methods. The transaction is rolled back on any error, or if it is disposed without first being committed. <c>Try</c> / <c>Catch</c> error handling is used to handle any errors when attempting to commit or roll back the transaction.
        </para>
        <!-- SqlConnection_BeginTransaction -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          namespace Transaction1CS
          {
              class Program
              {
                  static void Main()
                  {
                      string connectionString =
                          "Persist Security Info=False;Integrated Security=SSPI;database=Northwind;server=(local)";
                      ExecuteSqlTransaction(connectionString);
                      Console.ReadLine();
                  }
                  
                  private static void ExecuteSqlTransaction(string connectionString)
                  {
                      using (SqlConnection connection = new SqlConnection(connectionString))
                      {
                          connection.Open();
          
                          SqlCommand command = connection.CreateCommand();
                          SqlTransaction transaction;
          
                          // Start a local transaction.
                          transaction = connection.BeginTransaction();
          
                          // Must assign both transaction object and connection
                          // to Command object for a pending local transaction
                          command.Connection = connection;
                          command.Transaction = transaction;
          
                          try
                          {
                              command.CommandText =
                                  "Insert into Region (RegionID, RegionDescription) VALUES (100, 'Description')";
                              command.ExecuteNonQuery();
                              command.CommandText =
                                  "Insert into Region (RegionID, RegionDescription) VALUES (101, 'Description')";
                              command.ExecuteNonQuery();
          
                              // Attempt to commit the transaction.
                              transaction.Commit();
                              Console.WriteLine("Both records are written to database.");
                          }
                          catch (Exception ex)
                          {
                              Console.WriteLine("Commit Exception Type: {0}", ex.GetType());
                              Console.WriteLine("  Message: {0}", ex.Message);
          
                              // Attempt to roll back the transaction.
                              try
                              {
                                  transaction.Rollback();
                              }
                              catch (Exception ex2)
                              {
                                  // This catch block will handle any errors that may have occurred
                                  // on the server that would cause the rollback to fail, such as
                                  // a closed connection.
                                  Console.WriteLine("Rollback Exception Type: {0}", ex2.GetType());
                                  Console.WriteLine("  Message: {0}", ex2.Message);
                              }
                          }
                      }
                  }
              }
          }
        </code>
      </example>
    </SqlTransaction>
    <Commit>
      <summary>
        Commits the database transaction.
      </summary>
      <remarks>
        <para>
          The <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Commit" /> method is equivalent to the Transact-SQL COMMIT TRANSACTION statement. You cannot roll back a transaction once it has been committed, because all modifications have become a permanent part of the database. For more information, see <see href="/sql/t-sql/language-elements/commit-transaction-transact-sql">COMMIT TRANSACTION (Transact-SQL)</see>.
        </para>
        <note type="note">
          <c>Try</c> / <c>Catch</c> exception handling should always be used when committing or rolling back a <see cref="T:Microsoft.Data.SqlClient.SqlTransaction" />. Both <b>Commit</b> and <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Rollback" /> generates an <see cref="T:System.InvalidOperationException" /> if the connection is terminated or if the transaction has already been rolled back on the server.
        </note>
        <para>
          For more information on SQL Server transactions, see <see href="/sql/t-sql/language-elements/transactions-transact-sql">Transactions (Transact-SQL)</see>. 
        </para>
      </remarks>
      <example>
        <para>
          The following example creates a <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> and a <see cref="T:Microsoft.Data.SqlClient.SqlTransaction" />. It also demonstrates how to use the <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Commit" />, <see cref="M:Microsoft.Data.SqlClient.SqlConnection.BeginTransaction" />, and <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Rollback" /> methods. The transaction is rolled back on any error. <c>Try</c> / <c>Catch</c> error handling is used to handle any errors when attempting to commit or roll back the transaction.
        </para>
        <!-- SqlConnection_BeginTransaction -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          namespace Transaction1CS
          {
              class Program
              {
                  static void Main()
                  {
                      string connectionString =
                          "Persist Security Info=False;Integrated Security=SSPI;database=Northwind;server=(local)";
                      ExecuteSqlTransaction(connectionString);
                      Console.ReadLine();
                  }
                  
                  private static void ExecuteSqlTransaction(string connectionString)
                  {
                      using (SqlConnection connection = new SqlConnection(connectionString))
                      {
                          connection.Open();
          
                          SqlCommand command = connection.CreateCommand();
                          SqlTransaction transaction;
          
                          // Start a local transaction.
                          transaction = connection.BeginTransaction();
          
                          // Must assign both transaction object and connection
                          // to Command object for a pending local transaction
                          command.Connection = connection;
                          command.Transaction = transaction;
          
                          try
                          {
                              command.CommandText =
                                  "Insert into Region (RegionID, RegionDescription) VALUES (100, 'Description')";
                              command.ExecuteNonQuery();
                              command.CommandText =
                                  "Insert into Region (RegionID, RegionDescription) VALUES (101, 'Description')";
                              command.ExecuteNonQuery();
          
                              // Attempt to commit the transaction.
                              transaction.Commit();
                              Console.WriteLine("Both records are written to database.");
                          }
                          catch (Exception ex)
                          {
                              Console.WriteLine("Commit Exception Type: {0}", ex.GetType());
                              Console.WriteLine("  Message: {0}", ex.Message);
          
                              // Attempt to roll back the transaction.
                              try
                              {
                                  transaction.Rollback();
                              }
                              catch (Exception ex2)
                              {
                                  // This catch block will handle any errors that may have occurred
                                  // on the server that would cause the rollback to fail, such as
                                  // a closed connection.
                                  Console.WriteLine("Rollback Exception Type: {0}", ex2.GetType());
                                  Console.WriteLine("  Message: {0}", ex2.Message);
                              }
                          }
                      }
                  }
              }
          }
        </code>
      </example>
      <exception cref="T:System.Exception">
        An error occurred while trying to commit the transaction.
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <list type="bullet">
          <item>The transaction has already been committed or rolled back.</item>
          <item>The connection is broken.</item>
        </list>
      </exception>
    </Commit>
    <Connection>
      <summary>
        Gets the <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> object associated with the transaction, or <see langword="null" /> if the transaction is no longer valid.
      </summary>
      <value>
        The <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> object associated with the transaction.
      </value>
      <remarks>
        A single application may have multiple database connections, each with zero or more transactions. This property lets you determine the connection object associated with a particular transaction created by <see cref="M:Microsoft.Data.SqlClient.SqlConnection.BeginTransaction" />.
      </remarks>
    </Connection>
    <DbConnection>
      <summary>
        To be added.
      </summary>
      <value>
        To be added.
      </value>
      <remarks>
        To be added.
      </remarks>
    </DbConnection>
    <Dispose>
      <summary>
        Releases the resources that are held by the object.
      </summary>
    </Dispose>
    <DisposeDisposing>
      <param name="disposing">
        <see langword="true" /> to release managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.
      </param>
      <summary>
        Releases the unmanaged resources used and optionally releases the managed resources.
      </summary>
      <remarks>
        This method calls <see cref="M:System.Data.Common.DbTransaction.Dispose" />.
      </remarks>
    </DisposeDisposing>
    <IsolationLevel>
      <summary>
        Specifies the <see cref="T:System.Data.IsolationLevel" /> for this transaction.
      </summary>
      <value>
        The <see cref="T:System.Data.IsolationLevel" /> for this transaction. The default is <see cref="F:System.Data.IsolationLevel.ReadCommitted" />.
      </value>
      <remarks>
        <para>
          Parallel transactions are not supported. Therefore, the <see cref="T:System.Data.IsolationLevel" /> applies to the whole transaction.
        </para>
        <para>
          For more information on SQL Server isolation levels, see <see href="/sql/t-sql/language-elements/transaction-isolation-levels">Transaction Isolation Levels</see>.
        </para>
      </remarks>
    </IsolationLevel>
    <Rollback1>
      <summary>
        Rolls back a transaction from a pending state.
      </summary>
    </Rollback1>
    <Rollback2>
      <summary>
        Rolls back a transaction from a pending state.
      </summary>
      <remarks>
        <para>
          The <b>Rollback</b> method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement. For more information, see <see href="/sql/t-sql/language-elements/rollback-transaction-transact-sql">ROLLBACK TRANSACTION (Transact-SQL)</see>.
        </para>
        <para>
          The transaction can only be rolled back from a pending state (after <see cref="M:Microsoft.Data.SqlClient.SqlConnection.BeginTransaction" /> has been called, but before <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Commit" /> is called). The transaction is rolled back in the event it is disposed before <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Commit" /> or <b>Rollback</b> is called.
        </para>
        <note type="note">
          <c>Try</c> / <c>Catch</c> exception handling should always be used when rolling back a transaction. A <b>Rollback</b> generates an <see cref="T:System.InvalidOperationException" /> if the connection is terminated or if the transaction has already been rolled back on the server.
        </note>
        <para>
          For more information on SQL Server transactions, see <see href="/sql/t-sql/language-elements/transactions-transact-sql">Transactions (Transact-SQL)</see>.
        </para>
      </remarks>
      <example>
        <para>
          The following example creates a <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> and a <see cref="T:Microsoft.Data.SqlClient.SqlTransaction" />. It also demonstrates how to use the <see cref="M:Microsoft.Data.SqlClient.SqlConnection.BeginTransaction" />, <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Commit" />, and <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Rollback" /> methods. The transaction is rolled back on any error. <c>Try</c> / <c>Catch</c> error handling is used to handle any errors when attempting to commit or roll back the transaction.
        </para>
        <!-- SqlConnection_BeginTransaction -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          namespace Transaction1CS
          {
              class Program
              {
                  static void Main()
                  {
                      string connectionString =
                          "Persist Security Info=False;Integrated Security=SSPI;database=Northwind;server=(local)";
                      ExecuteSqlTransaction(connectionString);
                      Console.ReadLine();
                  }
                  
                  private static void ExecuteSqlTransaction(string connectionString)
                  {
                      using (SqlConnection connection = new SqlConnection(connectionString))
                      {
                          connection.Open();
          
                          SqlCommand command = connection.CreateCommand();
                          SqlTransaction transaction;
          
                          // Start a local transaction.
                          transaction = connection.BeginTransaction();
          
                          // Must assign both transaction object and connection
                          // to Command object for a pending local transaction
                          command.Connection = connection;
                          command.Transaction = transaction;
          
                          try
                          {
                              command.CommandText =
                                  "Insert into Region (RegionID, RegionDescription) VALUES (100, 'Description')";
                              command.ExecuteNonQuery();
                              command.CommandText =
                                  "Insert into Region (RegionID, RegionDescription) VALUES (101, 'Description')";
                              command.ExecuteNonQuery();
          
                              // Attempt to commit the transaction.
                              transaction.Commit();
                              Console.WriteLine("Both records are written to database.");
                          }
                          catch (Exception ex)
                          {
                              Console.WriteLine("Commit Exception Type: {0}", ex.GetType());
                              Console.WriteLine("  Message: {0}", ex.Message);
          
                              // Attempt to roll back the transaction.
                              try
                              {
                                  transaction.Rollback();
                              }
                              catch (Exception ex2)
                              {
                                  // This catch block will handle any errors that may have occurred
                                  // on the server that would cause the rollback to fail, such as
                                  // a closed connection.
                                  Console.WriteLine("Rollback Exception Type: {0}", ex2.GetType());
                                  Console.WriteLine("  Message: {0}", ex2.Message);
                              }
                          }
                      }
                  }
              }
          }
        </code>
      </example>
      <exception cref="T:System.Exception">
        An error occurred while trying to commit the transaction.
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <list type="bullet">
          <item>The transaction has already been committed or rolled back.</item>
          <item>The connection is broken.</item>
        </list>
      </exception>
    </Rollback2>
    <RollbackTransactionName>
      <param name="transactionName">
        The name of the transaction to roll back, or the savepoint to which to roll back.
      </param>
      <summary>
        Rolls back a transaction from a pending state, and specifies the transaction or savepoint name.
      </summary>
      <remarks>
        <para>
          The <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Rollback" /> method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement. For more information, see <see href="/sql/t-sql/language-elements/transactions-transact-sql">Transactions (Transact-SQL)</see>.
        </para>
        <para>
          The transaction can only be rolled back from a pending state (after <see cref="M:Microsoft.Data.SqlClient.SqlConnection.BeginTransaction" /> has been called, but before <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Commit" /> is called). The transaction is rolled back if it is disposed before <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Commit" /> or <c>Rollback</c> is called.
        </para>
        <note type="note">
          <c>Try</c> / <c>Catch</c> exception handling should always be used when rolling back a transaction. A <c>Rollback</c> generates an <see cref="T:System.InvalidOperationException" /> if the connection is terminated or if the transaction has already been rolled back on the server.
        </note>
        <para>
          For more information on SQL Server transactions, see <see href="/sql/t-sql/language-elements/transactions-transact-sql">Transactions (Transact-SQL)</see>.
        </para>
      </remarks>
      <example>
        <para>
          The following example creates a <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> and a <see cref="T:Microsoft.Data.SqlClient.SqlTransaction" />. It also demonstrates how to use the <see cref="M:Microsoft.Data.SqlClient.SqlConnection.BeginTransaction" />, <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Commit" />, and <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Rollback" /> methods. The transaction is rolled back on any error. <c>Try</c> / <c>Catch</c> error handling is used to handle any errors when attempting to commit or roll back the transaction.
        </para>
        <!-- SqlConnection_BeginTransaction2 -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          namespace Transaction1CS
          {
              class Program
              {
                  static void Main()
                  {
                      string connectionString =
                          "Persist Security Info=False;Integrated Security=SSPI;database=Northwind;server=(local)";
                      ExecuteSqlTransaction(connectionString);
                      Console.ReadLine();
                  }

                  private static void ExecuteSqlTransaction(string connectionString)
                  {
                      using (SqlConnection connection = new SqlConnection(connectionString))
                      {
                          connection.Open();
          
                          SqlCommand command = connection.CreateCommand();
                          SqlTransaction transaction;
          
                          // Start a local transaction.
                          transaction = connection.BeginTransaction("SampleTransaction");
          
                          // Must assign both transaction object and connection
                          // to Command object for a pending local transaction
                          command.Connection = connection;
                          command.Transaction = transaction;
          
                          try
                          {
                              command.CommandText =
                                  "Insert into Region (RegionID, RegionDescription) VALUES (100, 'Description')";
                              command.ExecuteNonQuery();
                              command.CommandText =
                                  "Insert into Region (RegionID, RegionDescription) VALUES (101, 'Description')";
                              command.ExecuteNonQuery();
          
                              // Attempt to commit the transaction.
                              transaction.Commit();
                              Console.WriteLine("Both records are written to database.");
                          }
                          catch (Exception ex)
                          {
                              Console.WriteLine("Commit Exception Type: {0}", ex.GetType());
                              Console.WriteLine("  Message: {0}", ex.Message);
          
                              // Attempt to roll back the transaction.
                              try
                              {
                                  transaction.Rollback("SampleTransaction");
                              }
                              catch (Exception ex2)
                              {
                                  // This catch block will handle any errors that may have occurred
                                  // on the server that would cause the rollback to fail, such as
                                  // a closed connection.
                                  Console.WriteLine("Rollback Exception Type: {0}", ex2.GetType());
                                  Console.WriteLine("  Message: {0}", ex2.Message);
                              }
                          }
                      }
                  }
              }
          }
        </code>
      </example>
      <exception cref="T:System.ArgumentException">
        No transaction name was specified.
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <list type="bullet">
          <item>The transaction has already been committed or rolled back.</item>
          <item>The connection is broken.</item>
        </list>
      </exception>
    </RollbackTransactionName>
    <Save>
      <param name="savePointName">
        The name of the savepoint.
      </param>
      <summary>
        Creates a savepoint in the transaction that can be used to roll back a part of the transaction, and specifies the savepoint name.
      </summary>
      <remarks>
        <para>
          The <b>Save</b> method is equivalent to the Transact-SQL SAVE TRANSACTION statement.
        </para>
        <para>
          The value used in the <paramref name="savePointName" /> parameter can be the same value used in the <c>transactionName</c> parameter of some implementations of the <see cref="M:Microsoft.Data.SqlClient.SqlConnection.BeginTransaction" /> method.
        </para>
        <para>
          Savepoints offer a mechanism to roll back parts of transactions. You create a savepoint using the <b>Save</b> method, and then later call the <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Rollback" /> method to roll back to the savepoint instead of rolling back to the start of the transaction.
        </para>
      </remarks>
      <exception cref="T:System.Exception">
        An error occurred while trying to commit the transaction.
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <list type="bullet">
          <item>The transaction has already been committed or rolled back.</item>
          <item>The connection is broken.</item>
        </list>
      </exception>
    </Save>
  </members>
</docs>

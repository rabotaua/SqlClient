<docs>
  <members name="SqlRetryLogicBase">
    <SqlRetryLogicBase>
      <summary>
        Retrieves the next time interval with respect to the number of retries if a transient condition occurs.
      </summary>
    </SqlRetryLogicBase>
    <NumberOfTries>
      <summary>
        Maximum number of retries.
      </summary>
      <value>
        <see langword="int" /> that returns the maximum number of retry execution attempts that will be attempted after the first failure.
      </value>
    </NumberOfTries>
    <Current>
      <summary>
        Current retry number starting from zero.
      </summary>
      <value>
        <see langword="int" /> that returns the number of retry execution attempts after the first failure.
      </value>
    </Current>
    <RetryIntervalEnumerator>
      <summary>
        The timer interval enumerator.
      </summary>
      <value>
        <see cref="T:Microsoft.Data.SqlClient.SqlRetryIntervalBaseEnumerator" /> value that indicates an enumerator to generate a sequence of time intervals.
      </value>
    </RetryIntervalEnumerator>
    <TransientPredicate>
      <summary>
        Delegate to a transient condition predicate. The function that this delegate points to must return a true value when an expected transient exception happens.
      </summary>
      <value>
        <see cref="T:System.Predicate`1" /> value that delegates to a function that receives a <see cref="T:System.Exception" /> input parameter.
      </value>
    </TransientPredicate>
    <RetryCondition>
      <param name="sender">
        The sender object.
      </param>
      <summary>
        Pre-retry validation for the sender state.
      </summary>
      <returns>
        Returns <see langword="true" /> if the sender is authorized to retry the operation.
      </returns>
      <remarks>
        <note type="important">
          Operations that are part of a <b>Transaction</b> are not safe to retry without specific knowledge of business logic. Due to this complexity, retry logic should be managed at the application level.
        </note>
        <note type="note">
          The <b>RetryCondition</b> is an extra condition that checks before executing the <see cref="P:Microsoft.Data.SqlClient.SqlRetryLogicBase.TransientPredicate" /> and the default condition always returns <see langword="true" />.
        </note>
      </remarks>
    </RetryCondition>
    <TryNextInterval>
      <param name="intervalTime">
        The interval time that is generated by the <see cref="P:Microsoft.Data.SqlClient.SqlRetryLogicBase.RetryIntervalEnumerator" />.
      </param>
      <summary>
        Try to get the next interval time by using the enumerator if the counter does not exceed the number of retries.
      </summary>
      <returns>
        Returns <see langword="true" /> if the number of retry attempts has not been exceeded; otherwise <see langword="false" />.
      </returns>
    </TryNextInterval>
    <Reset>
      <summary>
        Set the counters and enumerator to default values for next use.
      </summary>
    </Reset>
    <Clone>
      <summary>
        Creates a new object that is a copy of the current instance.
      </summary>
      <returns>
        When implemented in a derived class, the method is expected to return a new object of the current instance. The default implementation throws <see cref="T:System.NotImplementedException" />.
      </returns>
      <exception cref="T:System.NotImplementedException">
        In all cases.
      </exception>
    </Clone>
  </members>
</docs>

<docs>
  <members name="SqlConnection">
    <SqlConnection>
      <summary>
        Represents a connection to a SQL Server database. This class cannot be inherited.
      </summary>
      <remarks>
        <para>
          A <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> object represents a unique session to a SQL Server data source. With a client/server database system, it is equivalent to a network connection to the server. <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> is used together with <see cref="T:Microsoft.Data.SqlClient.SqlDataAdapter" /> and <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> to increase performance when connecting to a Microsoft SQL Server database. For all third-party SQL Server products and other OLE DB-supported data sources, use <see cref="T:System.Data.OleDb.OleDbConnection" />.
        </para>
        <para>
          When you create an instance of <see cref="T:Microsoft.Data.SqlClient.SqlConnection" />, all properties are set to their initial values. For a list of these values, see the <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> constructor.
        </para>
        <para>
          See <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionString" /> for a list of the keywords in a connection string.
        </para>
        <para>
          If the <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> goes out of scope, it won't be closed. Therefore, you must explicitly close the connection by calling <see cref="M:Microsoft.Data.SqlClient.SqlConnection.Close" /> or <see cref="M:Microsoft.Data.SqlClient.SqlConnection.Dispose" />. <see cref="M:Microsoft.Data.SqlClient.SqlConnection.Close" /> and <see cref="M:Microsoft.Data.SqlClient.SqlConnection.Dispose" /> are functionally equivalent. If the connection pooling value <c>Pooling</c> is set to <c>true</c> or <c>yes</c>, the underlying connection is returned back to the connection pool. On the other hand, if <c>Pooling</c> is set to <c>false</c> or <c>no</c>, the underlying connection to the server is actually closed.
        </para>
        <note type="note">
          Login and logout events will not be raised on the server when a connection is fetched from or returned to the connection pool, because the connection is not actually closed when it is returned to the connection pool. For more information, see <see href="/sql/connect/ado-net/sql-server-connection-pooling">SQL Server Connection Pooling (ADO.NET)</see>.
        </note>
        <para>
          To ensure that connections are always closed, open the connection inside of a <c>using</c> block, as shown in the following code fragment. Doing so ensures that the connection is automatically closed when the code exits the block.
        </para>
        <code language='vb'>
          Using connection As New SqlConnection(connectionString)
          connection.Open()
          ' Do work here; connection closed on following line.
          End Using
        </code>
        <code language='csharp'>
          using (SqlConnection connection = new SqlConnection(connectionString))
          {
            connection.Open();
            // Do work here; connection closed on following line.
          }
        </code>
        <note type="note">
          To deploy high-performance applications, you must use connection pooling. When you use the .NET Framework Data Provider for SQL Server, you do not have to enable connection pooling because the provider manages this automatically, although you can modify some settings. For more information, see <see href="/sql/connect/ado-net/sql-server-connection-pooling">SQL Server Connection Pooling (ADO.NET)</see>.
        </note>
        <para>
          If a <see cref="T:Microsoft.Data.SqlClient.SqlException" /> is generated by the method executing a <see cref="T:Microsoft.Data.SqlClient.SqlCommand" />, the <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> remains open when the severity level is 19 or less. When the severity level is 20 or greater, the server ordinarily closes the <see cref="T:Microsoft.Data.SqlClient.SqlConnection" />. However, the user can reopen the connection and continue. An application that creates an instance of the <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> object can require all direct and indirect callers to have sufficient permission to the code by setting declarative or imperative security demands. <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> makes security demands using the <see cref="T:Microsoft.Data.SqlClient.SqlClientPermission" /> object. Users can verify that their code has sufficient permissions by using the <see cref="T:Microsoft.Data.SqlClient.SqlClientPermissionAttribute" /> object. Users and administrators can also use the <see href="/dotnet/framework/tools/caspol-exe-code-access-security-policy-tool">Caspol.exe (Code Access Security Policy Tool)</see> to modify security policy at the machine, user, and enterprise levels. For more information, see <see href="/dotnet/standard/security/">Security in .NET</see>. For an example demonstrating how to use security demands, see <see href="/dotnet/framework/data/adonet/code-access-security">Code Access Security and ADO.NET</see>.
          For more information about handling warning and informational messages from the server, see <see href="/sql/connect/ado-net/connection-events">Connection Events</see>. For more information about SQL Server engine errors and error messages, see <see href="/sql/relational-databases/errors-events/database-engine-events-and-errors">Database Engine Events and Errors</see>.
        </para>  
        <note type="caution">
          You can force TCP instead of shared memory. You can do that by prefixing tcp: to the server name in the connection string or you can use localhost.
        </note>
      </remarks>
      <example>
        <para>
          The following example creates a <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> and a <see cref="T:Microsoft.Data.SqlClient.SqlConnection" />. The <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> is opened and set as the <see cref="P:Microsoft.Data.SqlClient.SqlCommand.Connection" /> for the <see cref="T:Microsoft.Data.SqlClient.SqlCommand" />. The example then calls <see cref="M:Microsoft.Data.SqlClient.SqlCommand.ExecuteNonQuery" />. To accomplish this, the <see cref="M:Microsoft.Data.SqlClient.SqlCommand.ExecuteNonQuery" /> is passed a SqlConnection and a query string that is a Transact-SQL INSERT statement. The connection is closed automatically when the code exits the using block.
        </para>
        <!-- SqlCommand_ExecuteNonQuery -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          namespace SqlCommandCS
          {
              class Program
              {
                  static void Main()
                  {
                      string str = "Data Source=(local);Initial Catalog=Northwind;"
                                 + "Integrated Security=SSPI";
                      string qs = "SELECT OrderID, CustomerID FROM dbo.Orders;";
                      CreateCommand(qs, str);
                  }
                  private static void CreateCommand(string queryString, string connectionString)
                  {
                      using (SqlConnection connection = new SqlConnection(connectionString))
                      {
                          SqlCommand command = new SqlCommand(queryString, connection);
                          command.Connection.Open();
                          command.ExecuteNonQuery();
                      }
                  }
              }
          }
        </code>
      </example>
    </SqlConnection>
    <ctor2>
      <summary>
        Initializes a new instance of the <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> class.
      </summary>
      <remarks>
        <para>
          When a new instance of <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> is created, the read/write properties are set to the following initial values unless they are specifically set using their associated keywords in the <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionString" /> property.
        </para>
        <list type="table">
          <listheader>
            <term>Properties</term>
            <description>Initial value</description>
          </listheader>
          <item>
            <term><see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionString" /></term>
            <description>empty string ("")</description>
          </item>
          <item>
            <term><see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionTimeout" /></term>
            <description>15</description>
          </item>
          <item>
            <term><see cref="P:Microsoft.Data.SqlClient.SqlConnection.Database" /></term>
            <description>empty string ("")</description>
          </item>
          <item>
            <term><see cref="P:Microsoft.Data.SqlClient.SqlConnection.DataSource" /></term>
            <description>empty string ("")</description>
          </item>
        </list>
        <para>
          You can change the value for these properties only by using the <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionString" /> property. The <see cref="T:Microsoft.Data.SqlClient.SqlConnectionStringBuilder" /> class provides functionality for creating and managing the contents of connection strings.
        </para>
      </remarks>
      <example>
        <para>
          The following example creates and opens a <see cref="T:Microsoft.Data.SqlClient.SqlConnection" />.
        </para>
        <!-- SqlConnection_SqlConnection -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  OpenSqlConnection();
                  Console.ReadLine();
              }
          
              private static void OpenSqlConnection()
              {
                  string connectionString = GetConnectionString();
                  using (SqlConnection connection = new SqlConnection(connectionString))
                  {
                      connection.Open();
                      Console.WriteLine("ServerVersion: {0}", connection.ServerVersion);
                      Console.WriteLine("State: {0}", connection.State);
                  }
              }
          
              static private string GetConnectionString()
              {
                  // To avoid storing the connection string in your code, 
                  // you can retrieve it from a configuration file, using the 
                  // System.Configuration.ConfigurationManager.ConnectionStrings property 
                  return "Data Source=(local);Initial Catalog=AdventureWorks;"
                       + "Integrated Security=SSPI;";
              }
          }
        </code>
      </example>
    </ctor2>
    <ctorConnectionString>
      <param name="connectionString">
        The connection used to open the SQL Server database.
      </param>
      <summary>
        Initializes a new instance of the <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> class when given a string that contains the connection string.
      </summary>
      <remarks>
        <para>
          When a new instance of <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> is created, the read/write properties are set to the following initial values unless they are specifically set using their associated keywords in the <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionString" /> property.
        </para>
        <list type="table">
          <listheader>
            <term>Properties</term>
            <description>Initial value</description>
          </listheader>
          <item>
            <term><see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionString" /></term>
            <description><c>connectionString</c></description>
          </item>
          <item>
            <term><see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionTimeout" /></term>
            <description>15</description>
          </item>
          <item>
            <term><see cref="P:Microsoft.Data.SqlClient.SqlConnection.Database" /></term>
            <description>empty string ("")</description>
          </item>
          <item>
            <term><see cref="P:Microsoft.Data.SqlClient.SqlConnection.DataSource" /></term>
            <description>empty string ("")</description>
          </item>
        </list>
        <para>
          You can change the value for these properties only by using the <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionString" /> property. The <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> class provides functionality for creating and managing the contents of connection strings.
        </para>
      </remarks>
      <example>
        <para>
          The following example creates and opens a <see cref="T:Microsoft.Data.SqlClient.SqlConnection" />.
        </para>
        <!-- SqlConnection_SqlConnection1 -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  OpenSqlConnection();
                  Console.ReadLine();
              }
          
              private static void OpenSqlConnection()
              {
                  string connectionString = GetConnectionString();
          
                  using (SqlConnection connection = new SqlConnection(connectionString))
                  {
                      connection.Open();
          
                      Console.WriteLine("State: {0}", connection.State);
                      Console.WriteLine("ConnectionString: {0}",
                          connection.ConnectionString);
                  }
              }
          
              static private string GetConnectionString()
              {
                  // To avoid storing the connection string in your code, 
                  // you can retrieve it from a configuration file, using the 
                  // System.Configuration.ConfigurationSettings.AppSettings property 
                  return "Data Source=(local);Initial Catalog=AdventureWorks;"
                       + "Integrated Security=SSPI;";
              }
          }
        </code>
      </example>
      <exception cref="T:System.ArgumentException">
        The supplied connection string argument failed <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionString" /> validation.
      </exception>
    </ctorConnectionString>
    <ctorConnectionStringCredential>
      <param name="connectionString">
        A connection string that does not use any of the following connection string keywords: <c>Integrated Security = true</c>, <c>UserId</c>, or <c>Password</c>; or that does not use <c>ConnectionContext = true</c>.
      </param>
      <param name="credential">
        A <see cref="T:Microsoft.Data.SqlClient.SqlCredential" /> object. If <paramref name="credential" /> is null, <see cref="M:Microsoft.Data.SqlClient.SqlConnection.#ctor(System.String,Microsoft.Data.SqlClient.SqlCredential)" /> is functionally equivalent to <see cref="M:Microsoft.Data.SqlClient.SqlConnection.#ctor(System.String)" />.
      </param>
      <summary>
        Initializes a new instance of the <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> class given a connection string, that does not use <c>Integrated Security = true</c> and a <see cref="T:Microsoft.Data.SqlClient.SqlCredential" /> object that contains the user ID and password.
      </summary>
      <exception cref="T:System.ArgumentException">
        The supplied arguments failed validation, including <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionString" /> validation.
      </exception>
    </ctorConnectionStringCredential>
    <AccessToken>
      <summary>
        Gets or sets the access token for the connection.
      </summary>
      <value>
        The access token for the connection.
      </value>
      <remarks>
        The AccessToken is a part of the connection pool key. Care should be taken when using this property to manage your own access token. The application is responsible for knowing when the token expires and connections from the pool should no longer be used. If you set a minimum pool size > 0 along with AccessToken, you must call <see cref="M:Microsoft.Data.SqlClient.SqlConnection.ClearPool(Microsoft.Data.SqlClient.SqlConnection)" /> after the access token expires to ensure the connection pool doesn't maintain those connections indefinitely.
      </remarks>
    </AccessToken>
    <AccessTokenCallback>
      <summary>
        Gets or sets the access token callback for the connection.
      </summary>
      <value>
        The Func that takes a <see cref="T:SqlAuthenticationParameters" /> and <see cref="T:System.Threading.CancellationToken" /> and returns a <see cref="T:Microsoft.Data.SqlClient.SqlAuthenticationToken" />.
      </value>
      <example>
        <para>
          The following example demonstrates how to define and set an <see cref="P:Microsoft.Data.SqlClient.SqlConnection.AccessTokenCallback" />.
        </para>
        <!-- SqlConnection_AccessTokenCallback -->
        <code language="c#">
          using System;
          using System.Collections.Concurrent;
          using System.Threading;
          using System.Threading.Tasks;
          using Azure.Core;
          using Azure.Identity;
          using Microsoft.Data.SqlClient;

          class Program
          {
              static void Main()
              {
                  OpenSqlConnection();
                  Console.ReadLine();
              }

              const string defaultScopeSuffix = "/.default";

              // Reuse credential objects to take advantage of underlying token caches
              private static ConcurrentDictionar&lt;string, DefaultAzureCredential&gt; credentials = new ConcurrentDictionary&lt;string, DefaultAzureCredential&gt;();

              // Use a shared callback function for connections that should be in the same connection pool
              private static Func&lt;SqlAuthenticationParameters, CancellationToken, Task&lt;SqlAuthenticationToken&gt;&gt; myAccessTokenCallback =
                  async (authParams, cancellationToken) =>
                  {
                      string scope = authParams.Resource.EndsWith(defaultScopeSuffix)
                          ? authParams.Resource
                          : $"{authParams.Resource}{defaultScopeSuffix}";

                      DefaultAzureCredentialOptions options = new DefaultAzureCredentialOptions();
                      options.ManagedIdentityClientId = authParams.UserId;

                      // Reuse the same credential object if we are using the same MI Client ID
                      AccessToken token = await credentials.GetOrAdd(authParams.UserId, new DefaultAzureCredential(options)).GetTokenAsync(
                          new TokenRequestContext(new string[] { scope }),
                          cancellationToken);

                      return new SqlAuthenticationToken(token.Token, token.ExpiresOn);
                  };

              private static void OpenSqlConnection()
              {
                  // (Optional) Pass a User-Assigned Managed Identity Client ID.
                  // This will ensure different MI Client IDs are in different connection pools.
                  string connectionString = "Server=myServer.database.windows.net;Encrypt=Mandatory;UserId=&lt;ManagedIdentityClientId&gt;;";

                  using (SqlConnection connection = new SqlConnection(connectionString)
                  {
                      // The callback function is part of the connection pool key. Using a static callback function
                      // ensures connections will not create a new pool per connection just for the callback.
                      AccessTokenCallback = myAccessTokenCallback
                  })
                  {
                      connection.Open();
                      Console.WriteLine("ServerVersion: {0}", connection.ServerVersion);
                      Console.WriteLine("State: {0}", connection.State);
                  }
              }
          }
        </code>
      </example>
      <exception cref="T:System.InvalidOperationException">
        The <see cref="P:Microsoft.Data.SqlClient.SqlConnection.AccessTokenCallback" /> is combined with other conflicting authentication configurations.
      </exception>
    </AccessTokenCallback>
    <BeginDbTransaction>
      <param name="isolationLevel">
        To be added.
      </param>
      <summary>
        To be added.
      </summary>
      <returns>
        To be added.
      </returns>
      <remarks>
        To be added.
      </remarks>
    </BeginDbTransaction>
    <BeginTransaction2>
      <summary>
        Starts a database transaction.
      </summary>
      <returns>
        An object representing the new transaction.
      </returns>
      <remarks>
        <para>
          This command maps to the SQL Server implementation of <c>BEGIN TRANSACTION</c>.You must explicitly commit or roll back the transaction using the <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Commit" /> or <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Rollback" /> method. To make sure that the .NET Framework Data Provider for SQL Server transaction management model performs correctly, avoid using other transaction management models, such as the one provided by SQL Server.
        </para>
        <note type="note">
          If you do not specify an isolation level, the default isolation level is used. To specify an isolation level with the <see cref="M:Microsoft.Data.SqlClient.SqlConnection.BeginTransaction" /> method, use the overload that takes the <c>iso</c> parameter (<see cref="M:Microsoft.Data.SqlClient.SqlConnection.BeginTransaction" />). The isolation level set for a transaction persists after the transaction is completed and until the connection is closed or disposed. Setting the isolation level to <b>Snapshot</b> in a database where the snapshot isolation level is not enabled does not throw an exception. The transaction will complete using the default isolation level.
        </note>
        <note type="caution">
          If a transaction is started and a level 16 or higher error occurs on the server, the transaction will not be rolled back until the <see cref="M:Microsoft.Data.SqlClient.SqlDataReader.Read" /> method is invoked. No exception is thrown on <see cref="M:Microsoft.Data.SqlClient.SqlCommand.ExecuteReader" />.
        </note>
        <note type="caution">
          When your query returns a large amount of data and calls <see cref="M:Microsoft.Data.SqlClient.SqlConnection.BeginTransaction" />, a <see cref="T:Microsoft.Data.SqlClient.SqlException" /> is thrown because SQL Server does not allow parallel transactions when using MARS. To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.
        </note>
        <para>
          For more information on SQL Server transactions, see <see href="/sql/t-sql/language-elements/transactions-transact-sql">Transactions (Transact-SQL)</see>.
        </para>
      </remarks>
      <example>
        <para>
          The following example creates a <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> and a <see cref="T:Microsoft.Data.SqlClient.SqlTransaction" />. It also demonstrates how to use the <see cref="M:Microsoft.Data.SqlClient.SqlConnection.BeginTransaction" />, a <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Commit" />, and <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Rollback" /> methods.
        </para>
        <!-- SqlConnection_BeginTransaction -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          namespace Transaction1Cs
          {
              class Program
              {
                  static void Main()
                  {
                      string connectionString =
                          "Persist Security Info=False;Integrated Security=SSPI;database=Northwind;server=(local)";
                      ExecuteSqlTransaction(connectionString);
                      Console.ReadLine();
                  }
                  private static void ExecuteSqlTransaction(string connectionString)
                  {
                      using (SqlConnection connection = new SqlConnection(connectionString))
                      {
                          connection.Open();
          
                          SqlCommand command = connection.CreateCommand();
                          SqlTransaction transaction;
          
                          // Start a local transaction.
                          transaction = connection.BeginTransaction();
          
                          // Must assign both transaction object and connection
                          // to Command object for a pending local transaction
                          command.Connection = connection;
                          command.Transaction = transaction;
          
                          try
                          {
                              command.CommandText =
                                  "Insert into Region (RegionID, RegionDescription) VALUES (100, 'Description')";
                              command.ExecuteNonQuery();
                              command.CommandText =
                                  "Insert into Region (RegionID, RegionDescription) VALUES (101, 'Description')";
                              command.ExecuteNonQuery();
          
                              // Attempt to commit the transaction.
                              transaction.Commit();
                              Console.WriteLine("Both records are written to database.");
                          }
                          catch (Exception ex)
                          {
                              Console.WriteLine("Commit Exception Type: {0}", ex.GetType());
                              Console.WriteLine("  Message: {0}", ex.Message);
          
                              // Attempt to roll back the transaction.
                              try
                              {
                                  transaction.Rollback();
                              }
                              catch (Exception ex2)
                              {
                                  // This catch block will handle any errors that may have occurred
                                  // on the server that would cause the rollback to fail, such as
                                  // a closed connection.
                                  Console.WriteLine("Rollback Exception Type: {0}", ex2.GetType());
                                  Console.WriteLine("  Message: {0}", ex2.Message);
                              }
                          }
                      }
                  }
              }
          }
        </code>
      </example>
      <exception cref="T:Microsoft.Data.SqlClient.SqlException">
        Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).
      </exception>
      <exception cref="T:System.InvalidOperationException">
        Parallel transactions are not supported.
      </exception>
    </BeginTransaction2>
    <BeginTransactionIso>
      <param name="iso">
        The isolation level under which the transaction should run.
      </param>
      <summary>
        Starts a database transaction with the specified isolation level.
      </summary>
      <returns>
        An object representing the new transaction.
      </returns>
      <remarks>
        <para>
          This command maps to the SQL Server implementation of <c>BEGIN TRANSACTION</c>. You must explicitly commit or roll back the transaction using the <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Commit" /> or <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Rollback" /> method. To make sure that the .NET Framework Data Provider for SQL Server transaction management model performs correctly, avoid using other transaction management models, such as the one provided by SQL Server.
        </para>
        <note type="note">
          After a transaction is committed or rolled back, the isolation level of the transaction persists for all subsequent commands that are in autocommit mode (the SQL Server default). This can produce unexpected results, such as an isolation level of REPEATABLE READ persisting and locking other users out of a row. To reset the isolation level to the default (READ COMMITTED), execute the Transact-SQL SET TRANSACTION ISOLATION LEVEL READ COMMITTED statement, or call <see cref="M:Microsoft.Data.SqlClient.SqlConnection.BeginTransaction" /> followed immediately by <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Commit" />. For more information on SQL Server isolation levels, see <see href="/sql/t-sql/language-elements/transaction-isolation-levels">Transaction Isolation Levels</see>.
        </note>
        <para>
          For more information on SQL Server transactions, see <see href="/sql/t-sql/language-elements/transactions-transact-sql">Transactions (Transact-SQL)</see>.
        </para>
        <note type="caution">
          When your query returns a large amount of data and calls <see cref="M:Microsoft.Data.SqlClient.SqlConnection.BeginTransaction" />, a <see cref="T:Microsoft.Data.SqlClient.SqlException" /> is thrown because SQL Server does not allow parallel transactions when using MARS. To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.
        </note>
      </remarks>
      <example>
        <para>
          The following example creates a <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> and a <see cref="T:Microsoft.Data.SqlClient.SqlTransaction" />. It also demonstrates how to use the <see cref="M:Microsoft.Data.SqlClient.SqlConnection.BeginTransaction" />, a <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Commit" />, and <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Rollback" /> methods.
        </para>
        <!-- SqlConnection_BeginTransaction1 -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  string connectionString =
                      "Persist Security Info=False;Integrated Security=SSPI;database=Northwind;server=(local)";
                  ExecuteSqlTransaction(connectionString);
                  Console.ReadLine();
              }
            
              private static void ExecuteSqlTransaction(string connectionString)
              {
                  using (SqlConnection connection = new SqlConnection(connectionString))
                  {
                      connection.Open();
          
                      SqlCommand command = connection.CreateCommand();
                      SqlTransaction transaction;
          
                      // Start a local transaction.
                      transaction = connection.BeginTransaction(IsolationLevel.ReadCommitted);
          
                      // Must assign both transaction object and connection
                      // to Command object for a pending local transaction
                      command.Connection = connection;
                      command.Transaction = transaction;
          
                      try
                      {
                          command.CommandText =
                              "Insert into Region (RegionID, RegionDescription) VALUES (100, 'Description')";
                          command.ExecuteNonQuery();
                          command.CommandText =
                              "Insert into Region (RegionID, RegionDescription) VALUES (101, 'Description')";
                          command.ExecuteNonQuery();
                          transaction.Commit();
                          Console.WriteLine("Both records are written to database.");
                      }
                      catch (Exception e)
                      {
                          try
                          {
                              transaction.Rollback();
                          }
                          catch (SqlException ex)
                          {
                              if (transaction.Connection != null)
                              {
                                  Console.WriteLine("An exception of type " + ex.GetType() +
                                      " was encountered while attempting to roll back the transaction.");
                              }
                          }
          
                          Console.WriteLine("An exception of type " + e.GetType() +
                              " was encountered while inserting the data.");
                          Console.WriteLine("Neither record was written to database.");
                      }
                  }
              }
          }
        </code>
      </example>
      <exception cref="T:Microsoft.Data.SqlClient.SqlException">
        Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).
      </exception>
      <exception cref="T:System.InvalidOperationException">
        Parallel transactions are not supported.
      </exception>
    </BeginTransactionIso>
    <BeginTransactionTransactionName>
      <param name="transactionName">
        The name of the transaction.
      </param>
      <summary>
        Starts a database transaction with the specified transaction name.
      </summary>
      <returns>
        An object representing the new transaction.
      </returns>
      <remarks>
        <para>
          This command maps to the SQL Server implementation of <c>BEGIN TRANSACTION</c>. The length of the <paramref name="transactionName" /> parameter must not exceed 32 characters; otherwise an exception will be thrown. The value in the <paramref name="transactionName" /> parameter can be used in later calls to <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Rollback" /> and in the <c>savePoint</c> parameter of the <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Save" /> method. You must explicitly commit or roll back the transaction using the <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Commit" /> or <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Rollback" /> method. To make sure that the .NET Data Provider for SQL Server transaction management model performs correctly, avoid using other transaction management models, such as the one provided by SQL Server. For more information on SQL Server transactions, see <see href="/sql/t-sql/language-elements/transactions-transact-sql">Transactions (Transact-SQL)</see>.
        </para>
        <note type="caution">
          When your query returns a large amount of data and calls <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.BeginTransaction" />, a <see cref="T:Microsoft.Data.SqlClient.SqlException" /> is thrown because SQL Server does not allow parallel transactions when using MARS. To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.
        </note>
      </remarks>
      <example>
        <para>
          The following example creates a <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> and a <see cref="T:Microsoft.Data.SqlClient.SqlTransaction" />. It also demonstrates how to use the <see cref="M:Microsoft.Data.SqlClient.SqlConnection.BeginTransaction" />, a <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Commit" />, and <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Rollback" /> methods.
        </para>
        <!-- SqlConnection_BeginTransaction2 -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          namespace Transaction1CS
          {
              class Program
              {
                  static void Main()
                  {
                      string connectionString =
                          "Persist Security Info=False;Integrated Security=SSPI;database=Northwind;server=(local)";
                      ExecuteSqlTransaction(connectionString);
                      Console.ReadLine();
                  }
          
                  private static void ExecuteSqlTransaction(string connectionString)
                  {
                      using (SqlConnection connection = new SqlConnection(connectionString))
                      {
                          connection.Open();
          
                          SqlCommand command = connection.CreateCommand();
                          SqlTransaction transaction;
          
                          // Start a local transaction.
                          transaction = connection.BeginTransaction("SampleTransaction");
          
                          // Must assign both transaction object and connection
                          // to Command object for a pending local transaction
                          command.Connection = connection;
                          command.Transaction = transaction;
          
                          try
                          {
                              command.CommandText =
                                  "Insert into Region (RegionID, RegionDescription) VALUES (100, 'Description')";
                              command.ExecuteNonQuery();
                              command.CommandText =
                                  "Insert into Region (RegionID, RegionDescription) VALUES (101, 'Description')";
                              command.ExecuteNonQuery();
          
                              // Attempt to commit the transaction.
                              transaction.Commit();
                              Console.WriteLine("Both records are written to database.");
                          }
                          catch (Exception ex)
                          {
                              Console.WriteLine("Commit Exception Type: {0}", ex.GetType());
                              Console.WriteLine("  Message: {0}", ex.Message);
          
                              // Attempt to roll back the transaction.
                              try
                              {
                                  transaction.Rollback("SampleTransaction");
                              }
                              catch (Exception ex2)
                              {
                                  // This catch block will handle any errors that may have occurred
                                  // on the server that would cause the rollback to fail, such as
                                  // a closed connection.
                                  Console.WriteLine("Rollback Exception Type: {0}", ex2.GetType());
                                  Console.WriteLine("  Message: {0}", ex2.Message);
                              }
                          }
                      }
                  }
              }
          }
        </code>
      </example>
      <exception cref="T:Microsoft.Data.SqlClient.SqlException">
        Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).
      </exception>
      <exception cref="T:System.InvalidOperationException">
        Parallel transactions are not supported.
      </exception>
    </BeginTransactionTransactionName>
    <BeginTransactionIsoTransactionName>
      <param name="iso">
        The isolation level under which the transaction should run.
      </param>
      <param name="transactionName">
        The name of the transaction.
      </param>
      <summary>
        Starts a database transaction with the specified isolation level and transaction name.
      </summary>
      <returns>
        An object representing the new transaction.
      </returns>
      <remarks>
        <para>
          This command maps to the SQL Server implementation of <c>BEGIN TRANSACTION</c>. The value in the <paramref name="transactionName" /> parameter can be used in later calls to <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Rollback" /> and in the <c>savePoint</c> parameter of the <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Save" /> method. You must explicitly commit or roll back the transaction using the <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Commit" /> or <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Rollback" /> method. To make sure that the SQL Server transaction management model performs correctly, avoid using other transaction management models, such as the one provided by SQL Server.
        </para>
        <note type="note">
          After a transaction is committed or rolled back, the isolation level of the transaction persists for all subsequent commands that are in autocommit mode (the SQL Server default). This can produce unexpected results, such as an isolation level of REPEATABLE READ persisting and locking other users out of a row. To reset the isolation level to the default (READ COMMITTED), execute the Transact-SQL SET TRANSACTION ISOLATION LEVEL READ COMMITTED statement, or call <see cref="M:Microsoft.Data.SqlClient.SqlConnection.BeginTransaction" /> followed immediately by <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Commit" />. For more information on SQL Server isolation levels, see <see href="/sql/t-sql/language-elements/transaction-isolation-levels">Transaction Isolation Levels</see>.
        </note>
        <para>
          For more information on SQL Server transactions, see <see href="/sql/t-sql/language-elements/transactions-transact-sql">Transactions (Transact-SQL)</see>.
        </para>
        <note type="caution">
          When your query returns a large amount of data and calls <see cref="M:Microsoft.Data.SqlClient.SqlConnection.BeginTransaction" />, a <see cref="T:Microsoft.Data.SqlClient.SqlException" /> is thrown because SQL Server does not allow parallel transactions when using MARS. To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.
        </note>
      </remarks>
      <example>
        <para>
          The following example creates a <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> and a <see cref="T:Microsoft.Data.SqlClient.SqlTransaction" />. It also demonstrates how to use the <see cref="M:Microsoft.Data.SqlClient.SqlConnection.BeginTransaction" />, a <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Commit" />, and <see cref="M:Microsoft.Data.SqlClient.SqlTransaction.Rollback" /> methods.
        </para>
        <!-- SqlConnection_BeginTransaction3 -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          namespace Transaction1CS
          {
              class Program
              {
                  static void Main()
                  {
                      string connectionString =
                          "Persist Security Info=False;Integrated Security=SSPI;database=Northwind;server=(local)";
                      ExecuteSqlTransaction(connectionString);
                      Console.ReadLine();
                  }

                  private static void ExecuteSqlTransaction(string connectionString)
                  {
                      using (SqlConnection connection = new SqlConnection(connectionString))
                      {
                          connection.Open();
          
                          SqlCommand command = connection.CreateCommand();
                          SqlTransaction transaction;
          
                          // Start a local transaction.
                          transaction = connection.BeginTransaction(
                              IsolationLevel.ReadCommitted, "SampleTransaction");
          
                          // Must assign both transaction object and connection
                          // to Command object for a pending local transaction.
                          command.Connection = connection;
                          command.Transaction = transaction;
          
                          try
                          {
                              command.CommandText =
                                  "Insert into Region (RegionID, RegionDescription) VALUES (100, 'Description')";
                              command.ExecuteNonQuery();
                              command.CommandText =
                                  "Insert into Region (RegionID, RegionDescription) VALUES (101, 'Description')";
                              command.ExecuteNonQuery();
                              transaction.Commit();
                              Console.WriteLine("Both records are written to database.");
                          }
                          catch (Exception e)
                          {
                              try
                              {
                                  transaction.Rollback("SampleTransaction");
                              }
                              catch (SqlException ex)
                              {
                                  if (transaction.Connection != null)
                                  {
                                      Console.WriteLine("An exception of type " + ex.GetType() +
                                          " was encountered while attempting to roll back the transaction.");
                                  }
                              }
          
                              Console.WriteLine("An exception of type " + e.GetType() +
                                  " was encountered while inserting the data.");
                              Console.WriteLine("Neither record was written to database.");
                          }
                      }
                  }
              }
          }
        </code>
      </example>
      <exception cref="T:Microsoft.Data.SqlClient.SqlException">
        Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).
      </exception>
      <exception cref="T:System.InvalidOperationException">
        Parallel transactions are not supported.
      </exception>
    </BeginTransactionIsoTransactionName>
    <CanCreateBatch>
      <summary>
        Gets a value that indicates whether this <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> instance supports the <see cref="T:System.Data.Common.DbBatch" /> class.
      </summary>
      <value>
        <see langword="true" /> if this instance supports the <see cref="T:System.Data.Common.DbBatch" /> class; otherwise, <see langword="false" />. The default is <see langword="true" />.
      </value>
      <remarks>
        ADO.net SQL provider implemented <see cref="T:System.Data.Common.DbBatch" /> and overrides <c>CanCreateBatch</c> property to return <see langword="true" />.
      </remarks>
    </CanCreateBatch>
    <ChangeDatabase>
      <param name="database">
        The name of the database to use instead of the current database.
      </param>
      <summary>
        Changes the current database for an open <see cref="T:Microsoft.Data.SqlClient.SqlConnection" />.
      </summary>
      <remarks>
        The value supplied in the <paramref name="database" /> parameter must be a valid database name. The <paramref name="database" /> parameter cannot contain a null value, an empty string, or a string with only blank characters.
      </remarks>
      <example>
        <para>
          The following example creates a <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> and displays some of its read-only properties.
        </para>
        <!-- SqlConnection_Database -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program1
          {
              static void Main()
              {
                  string s = GetConnectionString();
          
                  ChangeSqlDatabase(s);
                  Console.ReadLine();
              }
          
              private static void ChangeSqlDatabase(string connectionString)
              {
                  // Assumes connectionString represents a valid connection string
                  // to the AdventureWorks sample database.
                  using (SqlConnection connection = new SqlConnection(connectionString))
                  {
                      connection.Open();
                      Console.WriteLine("ServerVersion: {0}", connection.ServerVersion);
                      Console.WriteLine("Database: {0}", connection.Database);
          
                      connection.ChangeDatabase("Northwind");
                      Console.WriteLine("Database: {0}", connection.Database);
                  }
              }
          
              static private string GetConnectionString()
              {
                  // To avoid storing the connection string in your code, 
                  // you can retrieve it from a configuration file, using the 
                  // System.Configuration.ConfigurationSettings.AppSettings property 
                  return "Data Source=(local);Initial Catalog=AdventureWorks;"
                      + "Integrated Security=SSPI;";
              }
          }
        </code>
      </example>
      <exception cref="T:System.ArgumentException">
        The database name is not valid.
      </exception>
      <exception cref="T:System.InvalidOperationException">
        The connection is not open.
      </exception>
      <exception cref="T:Microsoft.Data.SqlClient.SqlException">
        Cannot change the database.
      </exception>
    </ChangeDatabase>
    <ChangePassword>
      <summary>
        Changes the SQL Server password.
      </summary>
    </ChangePassword>
    <ChangePasswordConnectionStringNewPassword>
      <param name="connectionString">
        The connection string that contains enough information to connect to the server that you want. The connection string must contain the user ID and the current password.
      </param>
      <param name="newPassword">
        The new password to set. This password must comply with any password security policy set on the server, including minimum length, requirements for specific characters, and so on.
      </param>
      <summary>
        Changes the SQL Server password for the user indicated in the connection string to the supplied new password.
      </summary>
      <remarks>
        When you are using SQL Server on Windows Server, developers can take advantage of functionality that lets the client application supply both the current and a new password in order to change the existing password. Applications can implement functionality such as prompting the user for a new password during initial login if the old one has expired, and this operation can be completed without administrator intervention. This method changes the SQL Server password for the user indicated in the supplied <c>connectionString</c> parameter to the value supplied in the <paramref name="newPassword" /> parameter. If the connection string includes the option for integrated security (that is, "Integrated Security=True" or the equivalent), an exception is thrown. To determine that the password has expired, calling the <see cref="M:Microsoft.Data.SqlClient.SqlConnection.Open" /> method raises a <see cref="T:Microsoft.Data.SqlClient.SqlException" />. In order to indicate that the password that is contained within the connection string must be reset, the <see cref="P:Microsoft.Data.SqlClient.SqlException.Number" /> property for the exception contains the status value 18487 or 18488. The first value (18487) indicates that the password has expired and the second (18488) indicates that the password must be reset before logging in. This method opens its own connection to the server, requests the password change, and closes the connection as soon as it has completed. This connection is not retrieved from, nor returned to, the SQL Server connection pool.
      </remarks>
      <example>
        <para>
          The following is a simple example of changing a password:
        </para>
        <code language='c#'>
          class Program
          {
            static void Main(string[] args)
            {
              Microsoft.Data.SqlClient.SqlConnection.ChangePassword(
                "Data Source=a_server;Initial Catalog=a_database;UID=user;PWD=old_password",
                "new_password");
            }
          }
        </code>
        <code language="vb">
          Module Module1
            Sub Main()
              Microsoft.Data.SqlClient.SqlConnection.ChangePassword(
                "Data Source=a_server;Initial Catalog=a_database;UID=user;PWD=old_password",
                "new_password")
            End Sub
          End Module
        </code>
      </example>
      <example>
        <para>
          The following console application demonstrates the issues involved in changing a user's password because the current password has expired.
        </para>
        <!-- SqlConnection_ConnectionString1 -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  try
                  {
                      DemonstrateChangePassword();
                  }
                  catch (Exception ex)
                  {
                      Console.WriteLine("Error: " + ex.Message);
                  }
                  Console.WriteLine("Press ENTER to continue...");
                  Console.ReadLine();
              }
          
              private static void DemonstrateChangePassword()
              {
                  // Retrieve the connection string. In a production application,
                  // this string should not be contained within the source code.
                  string connectionString = GetConnectionString();
          
                  using (SqlConnection cnn = new SqlConnection())
                  {
                      for (int i = 0; i &lt;= 1; i++)
                      {
                          // Run this loop at most two times. If the first attempt fails, 
                          // the code checks the Number property of the SqlException object.
                          // If that contains the special values 18487 or 18488, the code 
                          // attempts to set the user's password to a new value. 
                          // Assuming this succeeds, the second pass through 
                          // successfully opens the connection.
                          // If not, the exception handler catches the exception.
                          try
                          {
                              cnn.ConnectionString = connectionString;
                              cnn.Open();
                              // Once this succeeds, just get out of the loop.
                              // No need to try again if the connection is already open.
                              break;
                          }
                          catch (SqlException ex)
                          {
                              if (i == 0 &amp;&amp; ((ex.Number == 18487) || (ex.Number == 18488)))
                              {
                                  // You must reset the password. 
                                  connectionString =
                                      ModifyConnectionString(connectionString,
                                      GetNewPassword());
          
                              }
                              else
                                  // Bubble all other SqlException occurrences
                                  // back up to the caller.
                                  throw;
                          }
                      }
                      SqlCommand cmd = new SqlCommand(
                          "SELECT ProductID, Name FROM Product", cnn);
                      // Use the connection and command here...
                  }
              }
          
              private static string ModifyConnectionString(
                  string connectionString, string NewPassword)
              {
          
                  // Use the SqlConnectionStringBuilder class to modify the
                  // password portion of the connection string. 
                  SqlConnectionStringBuilder builder =
                      new SqlConnectionStringBuilder(connectionString);
                  builder.Password = NewPassword;
                  return builder.ConnectionString;
              }
          
              private static string GetNewPassword()
              {
                  // In a real application, you might display a modal
                  // dialog box to retrieve the new password. The concepts
                  // are the same as for this simple console application, however.
                  Console.Write("Your password must be reset. Enter a new password: ");
                  return Console.ReadLine();
              }
          
              private static string GetConnectionString()
              {
                  // For this demonstration, the connection string must
                  // contain both user and password information. In your own
                  // application, you might want to retrieve this setting
                  // from a config file, or from some other source.
          
                  // In a production application, you would want to 
                  // display a modal form that could gather user and password
                  // information.
                  SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder(
                      "Data Source=(local);Initial Catalog=AdventureWorks");
          
                  Console.Write("Enter your user id: ");
                  builder.UserID = Console.ReadLine();
                  Console.Write("Enter your password: ");
                  builder.Password = Console.ReadLine();
          
                  return builder.ConnectionString;
              }
          }
        </code>
      </example>
      <exception cref="T:System.ArgumentException">
        <list type="bullet">
          <item>
            The connection string includes the option to use integrated security.
          </item>
          <item>
            The <paramref name="newPassword" /> exceeds 128 characters.
          </item>
        </list>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        Either the <paramref name="connectionString" /> or the <paramref name="newPassword" /> parameter is null.
      </exception>
    </ChangePasswordConnectionStringNewPassword>
    <ChangePasswordConnectionStringCredentialNewSecurePassword>
      <param name="connectionString">
        The connection string that contains enough information to connect to a server. The connection string should not use any of the following connection string keywords: <c>Integrated Security = true</c>, <c>UserId</c>, or <c>Password</c> ; or <c>ContextConnection = true</c>.
      </param>
      <param name="credential">
        A <see cref="T:Microsoft.Data.SqlClient.SqlCredential" /> object.
      </param>
      <param name="newSecurePassword">
        The new password. <paramref name="newSecurePassword" /> must be read only. The password must also comply with any password security policy set on the server (for example, minimum length and requirements for specific characters).
      </param>
      <summary>
        Changes the SQL Server password for the user indicated in the <see cref="T:Microsoft.Data.SqlClient.SqlCredential" /> object.
      </summary>
      <exception cref="T:System.ArgumentException">
        <list type="bullet">
          <item>
            The connection string contains any combination of <c>UserId</c>, <c>Password</c>, or <c>Integrated Security=true</c>.
          </item>
          <item>
            <paramref name="newSecurePassword" /> is greater than 128 characters.
          </item>
          <item>
            <paramref name="newSecurePassword" /> is not read only.
          </item>
          <item>
            <paramref name="newSecurePassword" /> is an empty string.
          </item>
        </list>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        One of the parameters (<paramref name="connectionString" />, <paramref name="credential" />, or <paramref name="newSecurePassword" />) is null.
      </exception>
    </ChangePasswordConnectionStringCredentialNewSecurePassword>
    <ClearAllPools>
      <summary>
        Empties the connection pool.
      </summary>
      <remarks>
        <see cref="M:Microsoft.Data.SqlClient.SqlConnection.ClearAllPools" /> resets (or empties) the connection pool. If there are connections in use at the time of the call, they are marked appropriately and will be discarded (instead of being returned to the pool) when <see cref="M:Microsoft.Data.SqlClient.SqlConnection.Close" /> is called on them.
      </remarks>
    </ClearAllPools>
    <ClearPool>
      <param name="connection">
        The <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> to be cleared from the pool.
      </param>
      <summary>
        Empties the connection pool associated with the specified connection.
      </summary>
      <remarks>
        <see cref="M:Microsoft.Data.SqlClient.SqlConnection.ClearPool" /> clears the connection pool that is associated with the <paramref name="connection" />. If additional connections associated with <paramref name="connection" /> are in use at the time of the call, they are marked appropriately and are discarded (instead of being returned to the pool) when <see cref="M:Microsoft.Data.SqlClient.SqlConnection.Close" /> is called on them.
      </remarks>
    </ClearPool>
    <ClientConnectionId>
      <summary>
        The connection ID of the most recent connection attempt, regardless of whether the attempt succeeded or failed.
      </summary>
      <value>
        The connection ID of the most recent connection attempt.
      </value>
      <remarks>
        <para>
          <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ClientConnectionId" /> works regardless of which version of the server you connect to, but extended events logs and entry on connectivity ring buffer errors will not be present in SQL Server 2008 R2 and earlier.
        </para>
        <para>
          You can locate the connection ID in the extended events log to see if the failure was on the server if the extended event for logging connection ID is enabled. You can also locate the connection ID in the connection ring buffer (<see href="https://go.microsoft.com/fwlink/?LinkId=207752">Connectivity troubleshooting in SQL Server 2008 with the Connectivity Ring Buffer</see>) for certain connection errors. If the connection ID is not in the connection ring buffer, you can assume a network error.
        </para>
      </remarks>
    </ClientConnectionId>
    <Close>
      <summary>
        Closes the connection to the database. This is the preferred method of closing any open connection.
      </summary>
      <remarks>
        <para>
          The <see cref="M:Microsoft.Data.SqlClient.SqlConnection.Close" /> method rolls back any pending transactions. It then releases the connection to the connection pool, or closes the connection if connection pooling is disabled.
        </para>
        <note type="note">
          Pending transactions started using Transact-SQL or <see cref="M:Microsoft.Data.SqlClient.SqlConnection.BeginTransaction" /> are automatically rolled back when the connection is reset if connection pooling is enabled. If connection pooling is off, the transaction is rolled back after <c>SqlConnection.Close</c> is called. Transactions started through <see cref="T:System.Transactions" /> are controlled through the <see cref="T:System.Transactions" /> infrastructure, and are not affected by <c>SqlConnection.Close</c>.
        </note>
        <para>
          An application can call <see cref="M:Microsoft.Data.SqlClient.SqlConnection.Close" /> more than one time. No exception is generated. If the <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> goes out of scope, it won't be closed. Therefore, you must explicitly close the connection by calling <c>Close</c> or <c>Dispose</c>. <c>Close</c> and <c>Dispose</c> are functionally equivalent. If the connection pooling value <c>Pooling</c> is set to <c>true</c> or <c>yes</c>, the underlying connection is returned back to the connection pool. On the other hand, if <c>Pooling</c> is set to <c>false</c> or <c>no</c>, the underlying connection to the server is closed.
        </para>
        <note type="note">
          Login and logout events will not be raised on the server when a connection is fetched from or returned to the connection pool, because the connection is not actually closed when it is returned to the connection pool. For more information, see <see href="/sql/connect/ado-net/sql-server-connection-pooling">SQL Server Connection Pooling (ADO.NET)</see>.
        </note>
        <note type="caution">
          Do not call <c>Close</c> or <c>Dispose</c> on a Connection, a DataReader, or any other managed object in the <c>Finalize</c> method of your class. In a finalizer, you should only release unmanaged resources that your class owns directly. If your class does not own any unmanaged resources, do not include a <c>Finalize</c> method in your class definition. For more information, see <see href="/dotnet/standard/garbage-collection/">Garbage Collection</see>.
        </note>
      </remarks>
      <example>
        <para>
          The following example creates a <see cref="T:Microsoft.Data.SqlClient.SqlConnection" />, opens it, displays some of its properties. The connection is automatically closed at the end of the <c>using</c> block.
        </para>
        <!-- SqlConnection_Open -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program1
          {
              static void Main()
              {
                  string s = GetConnectionString();
          
                  OpenSqlConnection(s);
                  Console.ReadLine();
              }
          
              private static void OpenSqlConnection(string connectionString)
              {
                  using (SqlConnection connection = new SqlConnection(connectionString))
                  {
                      connection.Open();
                      Console.WriteLine("ServerVersion: {0}", connection.ServerVersion);
                      Console.WriteLine("State: {0}", connection.State);
                  }
              }
          
              static private string GetConnectionString()
              {
                  // To avoid storing the connection string in your code, 
                  // you can retrieve it from a configuration file, using the 
                  // System.Configuration.ConfigurationSettings.AppSettings property 
                  return "Data Source=(local);Initial Catalog=AdventureWorks;"
                       + "Integrated Security=SSPI;";
              }
          }
        </code>
      </example>
      <exception cref="T:Microsoft.Data.SqlClient.SqlException">
        The connection-level error that occurred while opening the connection.
      </exception>
    </Close>
    <ColumnEncryptionKeyCacheTtl>
      <summary>
        Gets or sets the time-to-live for column encryption key entries in the column encryption key cache for the <see href="https://docs.microsoft.com/sql/relational-databases/security/encryption/always-encrypted-database-engine">Always Encrypted</see> feature. The default value is 2 hours. 0 means no caching at all.
      </summary>
      <value>
        The time interval.
      </value>
    </ColumnEncryptionKeyCacheTtl>
    <ColumnEncryptionQueryMetadataCacheEnabled>
      <summary>
        Gets or sets a value that indicates whether query metadata caching is enabled (true) or not (false) for parameterized queries running against <see href="https://docs.microsoft.com/sql/relational-databases/security/encryption/always-encrypted-database-engine">Always Encrypted</see> enabled databases. The default value is true.
      </summary>
      <value>
        Returns true if query metadata caching is enabled; otherwise false. true is the default.
      </value>
      <remarks>
        For parameterized queries, SqlClient makes a roundtrip to SQL Server for parameter metadata, to see which parameter it needs to encrypt and how (which keys and algorithms should be used). If the application calls the same query multiple times, an extra roundtrip is made to the server each time, which degrades application performance. With <b>ColumnEncryptionQueryMetadataCacheEnabled</b> set to true, if the same query is called multiple times, the roundtrip to the server will be made only once. The cache has a non-configurable Max size parameter that is set to 2000 queries.
      </remarks>
    </ColumnEncryptionQueryMetadataCacheEnabled>
    <ColumnEncryptionTrustedMasterKeyPaths>
      <summary>
        Allows you to set a list of trusted key paths for a database server. If while processing an application query the driver receives a key path that is not on the list, the query will fail. This property provides additional protection against security attacks that involve a compromised SQL Server providing fake key paths, which may lead to leaking key store credentials.
      </summary>
      <value>
        The list of trusted master key paths for the column encryption.
      </value>
    </ColumnEncryptionTrustedMasterKeyPaths>
    <CommandTimeout>
      <summary>
        Gets the default wait time (in seconds) before terminating the attempt to execute a command and generating an error. The default is 30 seconds.
      </summary>
      <value>
        The time in seconds to wait for the command to execute. The default is 30 seconds.
      </value>
      <remarks>
        You can set the default wait time by using the <c>Command Timeout</c> keyword in the connection string. A value of 0 indicates no limit (an attempt to execute a command will wait indefinitely).
      </remarks>
    </CommandTimeout>
    <ConnectionString>
      <summary>
        Gets or sets the string used to open a SQL Server database.
      </summary>
      <value>
        The connection string that includes the source database name, and other parameters needed to establish the initial connection. The default value is an empty string.
      </value>
      <remarks>
        <para>
          The <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionString" /> is similar to an OLE DB connection string, but is not identical. Unlike OLE DB or ADO, the connection string that is returned is the same as the user-set <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionString" />, minus security information if the Persist Security Info value is set to <c>false</c> (default). The .NET Framework Data Provider for SQL Server does not persist or return the password in a connection string unless you set Persist Security Info to <c>true</c>. You can use the <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionString" /> property to connect to a database. The following example illustrates a typical connection string.
        </para>
        <code>
          "Persist Security Info=False;Integrated Security=true;Initial Catalog=Northwind;server=(local)"
        </code>
        <para>
          Use the new <see cref="T:Microsoft.Data.SqlClient.SqlConnectionStringBuilder" /> to construct valid connection strings at run time. For more information, see <see href="/sql/connect/ado-net/connection-string-builders">Connection String Builders</see>. The <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionString" /> property can be set only when the connection is closed. Many of the connection string values have corresponding read-only properties. When the connection string is set, these properties are updated, except when an error is detected. In this case, none of the properties are updated. <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> properties return only those settings that are contained in the <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionString" />. To connect to a local computer, specify "(local)" for the server. If a server name is not specified, a connection will be attempted to the default instance on the local computer. Resetting the <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionString" /> on a closed connection resets all connection string values (and related properties) including the password. For example, if you set a connection string that includes "Database= AdventureWorks", and then reset the connection string to <c>Data Source=myserver;Integrated Security=true</c>, the <see cref="P:Microsoft.Data.SqlClient.SqlConnection.Database" /> property is no longer set to "AdventureWorks". The connection string is parsed immediately after being set. If errors in syntax are found when parsing, a runtime exception, such as <see cref="T:System.ArgumentException" />, is generated. Other errors can be found only when an attempt is made to open the connection. The basic format of a connection string includes a series of keyword/value pairs separated by semicolons. The equal sign (=) connects each keyword and its value. To include values that contain a semicolon, single-quote character, or double-quote character, the value must be enclosed in double quotation marks. If the value contains both a semicolon and a double-quote character, the value can be enclosed in single quotation marks. The single quotation mark is also useful if the value starts with a double-quote character. Conversely, the double quotation mark can be used if the value starts with a single quotation mark. If the value contains both single-quote and double-quote characters, the quotation mark character used to enclose the value must be doubled every time it occurs within the value. To include preceding or trailing spaces in the string value, the value must be enclosed in either single quotation marks or double quotation marks. Any leading or trailing spaces around integer, Boolean, or enumerated values are ignored, even if enclosed in quotation marks. However, spaces within a string literal keyword or value are preserved. Single or double quotation marks may be used within a connection string without using delimiters (for example, Data Source= my'Server or Data Source= my"Server), unless a quotation mark character is the first or last character in the value. Keywords are not case-sensitive. The following table lists the valid names for keyword values within the <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionString" />.
        </para>
        <list type="table">
          <listheader>
            <term>Keyword</term>
            <description>Default</description>
            <description>Description</description>
          </listheader>
          <item>
            <term>Addr</term>
            <description>N/A</description>
            <description>Synonym of <b>Data Source</b>.</description>
          </item>
          <item>
            <term>Address</term>
            <description>N/A</description>
            <description>Synonym of <b>Data Source</b>.</description>
          </item>
          <item>
            <term>App</term>
            <description>N/A</description>
            <description>Synonym of <b>Application Name</b>.</description>
          </item>
          <item>
            <term>
              <b>Application Intent</b> or <b>ApplicationIntent</b>
            </term>
            <description>ReadWrite</description>
            <description>
              <para>
                Declares the application workload type when connecting to a server. Possible values are <c>ReadOnly</c> and <c>ReadWrite</c>. For example: <c>ApplicationIntent=ReadOnly</c>
              </para>
              <para>
                For more information about SqlClient support for Always On Availability Groups, see <see href="/sql/connect/ado-net/sql/sqlclient-support-high-availability-disaster-recovery">SqlClient Support for High Availability, Disaster Recovery</see>.
              </para>
            </description>
          </item>
          <item>
            <term>Application Name</term>
            <description>N/A</description>
            <description>
              <para>
                The name of the application. If no application name is provided, 'Framework Microsoft SqlClient Data Provider' when running on .NET Framework and 'Core Microsoft SqlClient Data Provider' otherwise.
              </para>
              <para>
                An application name can be 128 characters or fewer.
              </para>
            </description>
          </item>
          <item>
            <term>
              <b>AttachDBFilename</b> or <b>Extended Properties</b> or <b>Initial File Name</b>
            </term>
            <description>N/A</description>
            <description>
              <para>
                The name of the primary database file, including the full path name of an attachable database. AttachDBFilename is only supported for primary data files with an .mdf extension.
              </para>
              <para>
                If the value of the AttachDBFileName key is specified in the connection string, the database is attached and becomes the default database for the connection.
              </para>
              <para>
                If this key is not specified and if the database was previously attached, the database will not be reattached. The previously attached database will be used as the default database for the connection.
              </para>
              <para>
                If this key is specified together with the AttachDBFileName key, the value of this key will be used as the alias. However, if the name is already used in another attached database, the connection will fail.
              </para>
              <para>
                The path may be absolute or relative by using the DataDirectory substitution string. If DataDirectory is used, the database file must exist within a subdirectory of the directory pointed to by the substitution string. <b>Note:</b> Remote server, HTTP, and UNC path names are not supported.
              </para>
              <para>
                The database name must be specified with the keyword 'database' (or one of its aliases) as in the following:
              </para>
              <code>
                AttachDbFileName=|DataDirectory|\data\YourDB.mdf;integrated security=true;database=YourDatabase
              </code>
              <para>
                An error will be generated if a log file exists in the same directory as the data file and the 'database' keyword is used when attaching the primary data file. In this case, remove the log file. Once the database is attached, a new log file will be automatically generated based on the physical path.
              </para>
            </description>
          </item>
          <item>
            <term>Attestation Protocol</term>
            <description>NotSpecified</description>
            <description>
              <para>
                Gets or sets the value of Attestation Protocol.
              </para>
              <para>
                When no value is specified, secure enclaves are disabled on the connection.
              </para>
              <para>
                Valid values are:
              </para>
              <list type="bullet">
                <item><c>AAS</c></item>
                <item><c>HGS</c></item>
                <item><c>None</c> (Only valid in v3.1 and v4.1+)</item>
              </list>
            </description>
          </item>
          <item>
            <term>Authentication</term>
            <description>N/A</description>
            <description>
              <para>
                The authentication method used for <see href="https://azure.microsoft.com/documentation/articles/sql-database-aad-authentication/#7-connect-to-your-database-by-using-azure-active-directory-identities">Connecting to SQL Database By Using Azure Active Directory Authentication</see>.
              </para>
              <para>
                Valid values are:
              </para>
              <list type="bullet">
                <item><c>Active Directory Integrated</c></item>
                <item><c>Active Directory Interactive</c></item>
                <item><c>Active Directory Password</c></item>
                <item><c>Active Directory Service Principal</c></item>
                <item><c>Active Directory Device Code Flow</c></item>
                <item><c>Active Directory Managed Identity</c></item>
                <item><c>Active Directory MSI</c></item>
                <item><c>Active Directory Default</c></item>
                <item><c>Sql Password</c></item>
              </list>
              <para>
                For additional information see <see href="https://docs.microsoft.com/sql/connect/ado-net/sql/azure-active-directory-authentication?view=sql-server-ver15">Using Azure Active Directory authentication with SqlClient</see>.
              </para>
            </description>
          </item>
          <item>
            <term>Column Encryption Setting</term>
            <description>disabled</description>
            <description>
              Enables or disables <see href="/sql/relational-databases/security/encryption/always-encrypted-database-engine">Always Encrypted</see> functionality for the connection. Supported values are: <c>enabled</c> and <c>disabled</c>
            </description>
          </item>
          <item>
            <term>Command Timeout</term>
            <description>30</description>
            <description>
              <para>
                The default wait time (in seconds) before terminating the attempt to execute a command and generating an error.
              </para>
              <para>
                Valid values are greater than or equal to 0 and less than or equal to 2147483647.
              </para>
            </description>
          </item>
          <item>
            <term>
              <b>Connect Retry Count</b> or <b>ConnectRetryCount</b>
            </term>
            <description>1</description>
            <description>
              <para>
                Controls the number of reconnection attempts after the client identifies an idle connection failure. Valid values are 0 to 255. 0 means do not attempt to reconnect (disable connection resiliency).
              </para>
              <para>
                <b>Note:</b> Since version 5.x the default value for non Azure endpoints is 1. For Azure SQL endpoints, the default is 2. For Azure SQL serverless or on demand endpoints, the default is 5 to improve connection success for connections to an idle or paused instance.
              </para>
              <para>
                For additional information about idle connection resiliency, see <see href="https://learn.microsoft.com/azure/azure-sql/database/troubleshoot-common-connectivity-issues?view=azuresql#net-sqlconnection-parameters-for-connection-retry">.NET SqlConnection parameters for connection retry</see> and <see href="https://go.microsoft.com/fwlink/?LinkId=393996">Technical Article - Idle Connection Resiliency</see>.
              </para>
            </description>
          </item>
          <item>
            <term>
              <b>Connect Retry Interval</b> or <b>ConnectRetryInterval</b>
            </term>
            <description>10</description>
            <description>
              <para>
                Specifies the time between each connection retry attempt (<c>ConnectRetryCount</c>). Valid values are 1 to 60 seconds (default=10), applied after the first reconnection attempt. When a broken connection is detected, the client immediately attempts to reconnect; this is the first reconnection attempt and only occurs if <c>ConnectRetryCount</c> is greater than 0. If the first reconnection attempt fails and <c>ConnectRetryCount</c> is greater than 1, the client waits <c>ConnectRetryInterval</c> to try the second and subsequent reconnection attempts.
              </para>
              <para>
                For additional information about idle connection resiliency, see <see href="https://learn.microsoft.com/azure/azure-sql/database/troubleshoot-common-connectivity-issues?view=azuresql#net-sqlconnection-parameters-for-connection-retry">.NET SqlConnection parameters for connection retry</see> and <see href="https://go.microsoft.com/fwlink/?LinkId=393996">Technical Article - Idle Connection Resiliency</see>.
              </para>
            </description>
          </item>
          <item>
            <term>
              <b>Connect Timeout</b> or <b>Connection Timeout</b> or <b>Timeout</b>
            </term>
            <description>15</description>
            <description>
              <para>
                The length of time (in seconds) to wait for a connection to the server before terminating the attempt and generating an error.
              </para>
              <para>
                Valid values are greater than or equal to 0 and less than or equal to 2147483647.
              </para>
              <para>
                When opening a connection to a Azure SQL Database, set the connection timeout to 30 seconds.
              </para>
            </description>
          </item>
          <item>
            <term>
              <b>Current Language</b> or <b>Language</b>
            </term>
            <description>N/A</description>
            <description>
              <para>
                Sets the language used for database server warning or error messages.
              </para>
              <para>
                The language name can be 128 characters or fewer.
              </para> 
            </description>
          </item>
          <item>
            <term>
              <b>Data Source</b> or <b>Server</b> or <b>Address</b> or <b>Addr</b> or <b>Network Address</b>
            </term>
            <description>N/A</description>
            <description>
              <para>
                The name or network address of the instance of SQL Server to which to connect. The port number can be specified after the server name: <c>server=tcp:servername, portnumber</c>
              </para>
              <para>
                When specifying a local instance, always use (local). To force a protocol, add one of the following prefixes: <c>np:(local), tcp:(local), lpc:(local)</c>
              </para>
              <para>
                You can also connect to a LocalDB database as follows: <c>server=(localdb)\\myInstance</c>
              </para>
              <para>
                For more information about LocalDB, see <see href="/sql/connect/ado-net/sql/sqlclient-support-localdb">SqlClient Support for LocalDB</see>.
              </para>
              <para>
                <b>Data Source</b> must use the TCP format or the Named Pipes format.
              </para>
              <para>
                TCP format is as follows:
              </para>
              <list type="bullet">
                <item><c>tcp:\&lt;host name&gt;\\&lt;instance name&gt;\</c></item>
                <item><c>tcp:\&lt;host name&gt;,\&lt;TCP/IP port number&gt;</c></item>
              </list>
              <para>
                The TCP format must start with the prefix "tcp:" and is followed by the database instance, as specified by a host name and an instance name. This format is not applicable when connecting to Azure SQL Database. TCP is automatically selected for connections to Azure SQL Database when no protocol is specified.
              </para>
              <para>
                The host name MUST be specified in one of the following ways:
              </para>
              <list type="bullet">
                <item>NetBIOSName</item>
                <item>IPv4Address</item>
                <item>IPv6Address</item>
              </list>
              <para>
                The instance name is used to resolve to a particular TCP/IP port number on which a database instance is hosted. Alternatively, specifying a TCP/IP port number directly is also allowed. If both instance name and port number are not present, the default database instance is used.
              </para>
              <para>
                The Named Pipes format is as follows:
              </para>
              <list type="bullet">
                <item>np:\\\\&lt;host name&gt;\pipe\\&lt;pipe name&gt;</item>
              </list>
              <para>
                The Named Pipes format MUST start with the prefix "np:" and is followed by a named pipe name. <br /><br />
                The host name MUST be specified in one of the following ways:
              </para>
              <list type="bullet">
                <item>NetBIOSName</item>
                <item>IPv4Address</item>
                <item>IPv6Address</item>
              </list>
              <para>
                The pipe name is used to identify the database instance to which the .NET application will connect.
              </para>
              <para>
                If the value of the <b>Network</b> key is specified, the prefixes "tcp:" and "np:" should not be specified. <b>Note:</b> You can force the use of TCP instead of shared memory, either by prefixing <b>tcp:</b> to the server name in the connection string, or by using <b>localhost</b>.
              </para>
            </description>
          </item>
          <item>
            <term>Enclave Attestation Url</term>
            <description>N/A</description>
            <description>Gets or sets the enclave attestation URL to be used with enclave based Always Encrypted.</description>
          </item>
          <item>
            <term>Encrypt</term>
            <description>
              <c>true</c> in 4.0 and above <br /><br />
              <c>false</c> in 3.x and below
            </description>
            <description>
              <para>
                Recognized values are:
              </para>
              <list type="bullet">
                <item>
                  versions 1 - 4: <c>true</c> / <c>yes</c> and <c>false</c> / <c>no</c>
                </item>
                <item>
                  versions 5+: <c>true</c> / <c>yes</c> / <c>mandatory</c>, <c>false</c> / <c>no</c> / <c>optional</c> and <c>strict</c>. When <c>true</c>, TLS encryption is used for all data sent between the client and server if the server has a certificate installed. When <c>strict</c>, TDS 8.0 TLS encryption is used and the <c>TrustServerCertificate</c> setting is ignored and treated as false. For more information, see <see href="/sql/connect/ado-net/connection-string-syntax">Connection String Syntax</see>.
                </item>
              </list>
              <para>
                When <c>Encrypt</c> is <c>mandatory</c> or <c>strict</c> and <c>TrustServerCertificate</c> is <c>false</c>, the server name (or IP address) in a server's certificate must exactly match the server name (or IP address) specified in the connection string. Otherwise, the connection attempt will fail.
              </para>
            </description>
          </item>
          <item>
            <term>Enlist</term>
            <description>'true'</description>
            <description>
              <c>true</c> indicates that the SQL Server connection pooler automatically enlists the connection in the creation thread's current transaction context.
            </description>
          </item>
          <item>
            <term>Failover Partner</term>
            <description>N/A</description>
            <description>
              <para>
                The name of the failover partner server where database mirroring is configured.
              </para>
              <para>
                If the value of this key is "", then <b>Initial Catalog</b> must be present, and its value must not be "".
              </para>
              <para>
                The server name can be 128 characters or fewer.
              </para>
              <para>
                If you specify a failover partner but the failover partner server is not configured for database mirroring and the primary server (specified with the Server keyword) is not available, then the connection will fail.
              </para>
              <para>
                If you specify a failover partner and the primary server is not configured for database mirroring, the connection to the primary server (specified with the Server keyword) will succeed if the primary server is available.
              </para>
            </description>
          </item>
          <item>
            <term>
              <b>Failover Partner SPN</b> or <b>FailoverPartnerSPN</b>
            </term>
            <description>N/A</description>
            <description>
              The SPN for the failover partner. The default value is an empty string, which causes SqlClient to use the default, driver-generated SPN. (Only available in v5.0+)
            </description>
          </item>
          <item>
            <term>
              <b>Host Name In Certificate</b> or <b>HostNameInCertificate</b>
            </term>
            <description>N/A</description>
            <description>
              The host name to use when validating the server certificate. When not specified, the server name from the Data Source is used for certificate validation. (Only available in v5.0+)
            </description>
          </item>
          <item>
            <term>
              <b>Server Certificate</b> or <b>ServerCertificate</b>
            </term>
            <description>N/A</description>
            <description>
              The path to a certificate file to match against the SQL Server TLS/SSL certificate. The accepted certificate formats are PEM, DER, and CER. If specified, the SQL Server certificate is checked by verifying if the ServerCertificate provided is an exact match. (Only available in v5.1+)
            </description>
          </item>
          <item>
            <term>
              <b>Initial Catalog</b> or <b>Database</b>
            </term>
            <description>N/A</description>
            <description>
              <para>
                The name of the database.
              </para>
              <para>
                The database name can be 128 characters or fewer.
              </para>
            </description>
          </item>
          <item>
            <term>
              <b>Integrated Security</b> or <b>Trusted_Connection</b>
            </term>
            <description><c>false</c></description>
            <description>
              <para>
                When <c>false</c>, User ID and Password are specified in the connection. When <c>true</c>, the current Windows account credentials are used for authentication.
              </para>
              <para>
                Recognized values are <c>true</c>, <c>false</c>, <c>yes</c>, <c>no</c>, and <c>sspi</c> (strongly recommended), which is equivalent to <c>true</c>.
              </para>
              <para>
                If User ID and Password are specified and Integrated Security is set to true, the User ID and Password will be ignored and Integrated Security will be used.
              </para>
              <para>
                <see cref="T:Microsoft.Data.SqlClient.SqlCredential" /> is a more secure way to specify credentials for a connection that uses SQL Server Authentication (<c>Integrated Security=false</c>).
              </para>
            </description>
          </item>
          <item>
            <term>
              <b>IP Address Preference</b> or <b>IPAddressPreference</b>
            </term>
            <description><c>IPv4First</c></description>
            <description>
              <para>
                The IP address family preference when establishing TCP connections. If <c>Transparent Network IP Resolution</c> (in .NET Framework) or <c>Multi Subnet Failover</c> is set to true, this setting has no effect. Supported values include:
              </para>
              <list type="bullet">
                <item><c>IPAddressPreference=IPv4First</c></item>
                <item><c>IPAddressPreference=IPv6First</c></item>
                <item><c>IPAddressPreference=UsePlatformDefault</c></item>
              </list>
            </description>
          </item>
          <item>
            <term>
              <b>Load Balance Timeout</b> or <b>Connection Lifetime</b>
            </term>
            <description>0</description>
            <description>
              <para>
                When a connection is returned to the pool, its creation time is compared with the current time, and the connection is destroyed if that time span (in seconds) exceeds the value specified by <c>Connection Lifetime</c>. This is useful in clustered configurations to force load balancing between a running server and a server just brought online.
              </para>
              <para>
                A value of zero (0) causes pooled connections to have the maximum connection timeout.
              </para>
            </description>
          </item>
          <item>
            <term>Max Pool Size</term>
            <description>100</description>
            <description>
              <para>
                The maximum number of connections that are allowed in the pool.
              </para>
              <para>
                Valid values are greater than or equal to 1. Values that are less than <b>Min Pool Size</b> generate an error.
              </para>
            </description>
          </item>
          <item>
            <term>Min Pool Size</term>
            <description>0</description>
            <description>
              <para>
                The minimum number of connections that are allowed in the pool.
              </para>
              <para>
                Valid values are greater than or equal to 0. Zero (0) in this field means no minimum connections are initially opened.
              </para>
              <para>
                Values that are greater than <b>Max Pool Size</b> generate an error.
              </para>
            </description>
          </item>
          <item>
            <term>
              <b>Multiple Active Result Sets</b> or <b>MultipleActiveResultSets</b>
            </term>
            <description>false</description>
            <description>
              <para>
                When <c>true</c>, an application can maintain multiple active result sets (MARS). When <c>false</c>, an application must process or cancel all result sets from one batch before it can execute any other batch on that connection.
              </para>
              <para>
                Recognized values are <c>true</c> and <c>false</c>.
              </para>
              <para>
                For more information, see <see href="/sql/connect/ado-net/sql/multiple-active-result-sets-mars">Multiple Active Result Sets (MARS)</see>.
              </para>
            </description>
          </item>
          <item>
            <term>
              <b>Multi Subnet Failover</b> or <b>MultiSubnetFailover</b>
            </term>
            <description>false</description>
            <description>
              <para>
                Always specify <c>multiSubnetFailover=True</c> when connecting to the availability group listener of a SQL Server 2012 (or later) availability group or a SQL Server 2012 (or later) Failover Cluster Instance. <c>multiSubnetFailover=True</c> configures SqlClient to provide faster detection of and connection to the (currently) active server. Possible values are <c>Yes</c> and <c>No</c>, <c>True</c> and <c>False</c> or <c>1</c> and <c>0</c>. For example:
              </para>
              <para>
                <c>MultiSubnetFailover=True</c>
              </para>
              <para>
                The default is <c>False</c>. For more information about SqlClient's support for Always On AGs, see <see href="/sql/connect/ado-net/sql/sqlclient-support-high-availability-disaster-recovery">SqlClient Support for High Availability, Disaster Recovery</see>.
              </para>
            </description>
          </item>
          <item>
            <term>
              <b>Network Library</b> or <b>Network</b> or <b>Net</b>
            </term>
            <description>N/A</description>
            <description>
              <para>
                The network library used to establish a connection to an instance of SQL Server. Supported values include:
              </para>
              <list type="bullet">
                <item>dbnmpntw (Named Pipes)</item>
                <item>dbmsrpcn (Multiprotocol, Windows RPC)</item>
                <item>dbmsadsn (Apple Talk)</item>
                <item>dbmsgnet (VIA)</item>
                <item>dbmslpcn (Shared Memory)</item>
                <item>dbmsspxn (IPX/SPX)</item>
                <item>dbmssocn (TCP/IP)</item>
                <item>Dbmsvinn (Banyan Vines)</item>
              </list>
              <para>
                The corresponding network DLL must be installed on the system to which you connect. If you do not specify a network and you use a local server (for example, "." or "(local)"), shared memory is used. In this example, the network library is Win32 Winsock TCP/IP (dbmssocn), and 1433 is the port being used.
              </para>
              <para>
                <c>Network Library=dbmssocn;Data Source=000.000.000.000,1433;</c>
              </para>
            </description>
          </item>
          <item>
            <term>Packet Size</term>
            <description>8000</description>
            <description>
              <para>
                Size in bytes of the network packets used to communicate with an instance of SQL Server.
              </para>
              <para>
                The packet size can be greater than or equal to 512 and less than or equal to 32768.
              </para>
            </description>
          </item>
          <item>
            <term>
              <b>Password</b> or <b>PWD</b>
            </term>
            <description>N/A</description>
            <description>
              <para>
                The password for the SQL Server account logging on. Not recommended. To maintain a high level of security, we strongly recommend that you use the <c>Integrated Security</c> or <c>Trusted_Connection</c> keyword instead. <see cref="T:Microsoft.Data.SqlClient.SqlCredential" /> is a more secure way to specify credentials for a connection that uses SQL Server Authentication.
              </para>
              <para>
                The password must be 128 characters or fewer.
              </para>
            </description>
          </item>
          <item>
            <term>
              <b>Persist Security Info</b> or <b>PersistSecurityInfo</b>
            </term>
            <description><c>false</c></description>
            <description>
              <para>
                When set to <c>false</c> or <c>no</c> (strongly recommended), security-sensitive information, such as the password or access token, is not returned as part of the connection if the connection is open or has ever been in an open state. This property should only be set to <c>true</c> if your application has a specific need to read the password out of an already-opened database connection. The default value of <c>false</c> is the more secure setting; using <c>true</c> for this property opens your application to security risks such as accidentally logging or tracing the database password.
              </para>
              <para>
                Resetting the connection string resets all connection string values including the password. 
              </para>
              <para>
                Recognized values are <c>true</c>, <c>false</c>, <c>yes</c>, and <c>no</c>.
              </para>
            </description>
          </item>
          <item>
            <term>
              <b>Pool Blocking Period</b> or <b>PoolBlockingPeriod</b>
            </term>
            <description>Auto</description>
            <description>
              Sets the blocking period behavior for a connection pool. See <see cref="P:Microsoft.Data.SqlClient.SqlConnectionStringBuilder.PoolBlockingPeriod" /> property for details.
            </description>
          </item>
          <item>
            <term>Pooling</term>
            <description><c>true</c></description>
            <description>
              <para>
                When the value of this key is set to true, any newly created connection will be added to the pool when closed by the application. In a next attempt to open the same connection, that connection will be drawn from the pool.
              </para>
              <para>
                Connections are considered the same if they have the same connection string. Different connections have different connection strings.
              </para>
              <para>
                The value of this key can be <c>true</c>, <c>false</c>, <c>yes</c>, and <c>no</c>.
              </para>
            </description>
          </item>
          <item>
            <term>Replication</term>
            <description><c>false</c></description>
            <description><c>true</c> if replication is supported using the connection.</description>
          </item>
          <item>
            <term>
              <b>Server SPN</b> or <b>ServerSPN</b>
            </term>
            <description>N/A</description>
            <description>
              <para>
                The SPN for the data source. The default value is an empty string, which causes SqlClient to use the default, driver-generated SPN. (Only available in v5.0+)
              </para>
            </description>
          </item>
          <item>
            <term>Transaction Binding</term>
            <description>Implicit Unbind</description>
            <description>
              <para>
                Controls connection association with an enlisted <c>System.Transactions</c> transaction.
              </para>
              <para>
                Possible values are:
              </para>
              <list type="bullet">
                <item><c>Transaction Binding=Implicit Unbind;</c></item>
                <item><c>Transaction Binding=Explicit Unbind;</c></item>
              </list>
              <para>
                Implicit Unbind causes the connection to detach from the transaction when it ends. After detaching, additional requests on the connection are performed in autocommit mode. The <c>System.Transactions.Transaction.Current</c> property is not checked when executing requests while the transaction is active. After the transaction has ended, additional requests are performed in autocommit mode.
              </para>
              <para>
                If the system ends the transaction (in the scope of a using block) before the last command completes, it will throw <see cref="T:System.InvalidOperationException" />.
              </para>
              <para>
                Explicit Unbind causes the connection to remain attached to the transaction until the connection is closed or an explicit <c>SqlConnection.TransactionEnlist(null)</c> is called. Beginning in .NET Framework 4.0, changes to Implicit Unbind make Explicit Unbind obsolete. An <c>InvalidOperationException</c> is thrown if <c>Transaction.Current</c> is not the enlisted transaction or if the enlisted transaction is not active.
              </para>
            </description>
          </item>
          <item>
            <term>
              <b>Transparent Network IP Resolution</b> or <b>TransparentNetworkIPResolution</b>
            </term>
            <description>See description.</description>
            <description>
              <para>
                When the value of this key is set to <c>true</c>, the application is required to retrieve all IP addresses for a particular DNS entry and attempt to connect with the first one in the list. If the connection is not established within 0.5 seconds, the application will try to connect to all others in parallel. When the first answers, the application will establish the connection with the respondent IP address.
              </para>
              <para>
                If the <c>MultiSubnetFailover</c> key is set to <c>true</c>, <c>TransparentNetworkIPResolution</c> is ignored.
              </para>
              <para>
                If the <c>Failover Partner</c> key is set, <c>TransparentNetworkIPResolution</c> is ignored.
              </para>
              <para>
                The value of this key must be <c>true</c>, <c>false</c>, <c>yes</c>, or <c>no</c>.
              </para>
              <para>
                A value of <c>yes</c> is treated the same as a value of <c>true</c>.
              </para>
              <para>
                A value of <c>no</c> is treated the same as a value of <c>false</c>.
              </para>
              <para>
                The default values are as follows:
              </para>
              <list type="bullet">
                <item>
                  <c>false</c> when:
                  <list type="bullet">
                    <item>
                      Connecting to Azure SQL Database where the data source ends with:
                      <list type="bullet">
                        <item>.database.chinacloudapi.cn</item>
                        <item>.database.usgovcloudapi.net</item>
                        <item>.database.cloudapi.de</item>
                        <item>.database.windows.net</item>
                      </list>
                    </item>
                    <item><c>Authentication</c> is 'Active Directory Password' or 'Active Directory Integrated'</item>
                  </list>
                </item>
                <item><c>true</c> in all other cases.</item>
              </list>
            </description>
          </item>
          <item>
            <term>
              <b>Trust Server Certificate</b> or <b>TrustServerCertificate</b>
            </term>
            <description><c>false</c></description>
            <description>
              When set to <c>true</c>, TLS is used to encrypt the channel when bypassing walking the certificate chain to validate trust. If TrustServerCertificate is set to <c>true</c> and Encrypt is set to <c>false</c>, the channel is not encrypted. Recognized values are <c>true</c>, <c>false</c>, <c>yes</c>, and <c>no</c>. For more information, see <see href="/sql/connect/ado-net/connection-string-syntax">Connection String Syntax</see>.
            </description>
          </item>
          <item>
            <term>Type System Version</term>
            <description>N/A</description>
            <description>
              <b>
                A string value that indicates the type system the application expects. The functionality available to a client application is dependent on the version of SQL Server and the compatibility level of the database. Explicitly setting the type system version that the client application was written for avoids potential problems that could cause an application to break if a different version of SQL Server is used. <b>Note:</b> The type system version cannot be set for common language runtime (CLR) code executing in-process in SQL Server. For more information, see <see href="/dotnet/framework/data/adonet/sql/sql-server-common-language-runtime-integration">SQL Server Common Language Runtime Integration</see>.
              </b>
              <b>
                Possible values are:
              </b>
              <list type="bullet">
                <item><c>Type System Version=SQL Server 2012;</c></item>
                <item><c>Type System Version=SQL Server 2008;</c></item>
                <item><c>Type System Version=SQL Server 2005;</c></item>
                <item><c>Type System Version=Latest;</c></item>
              </list>
              <para>
                <c>Type System Version=SQL Server 2012;</c> specifies that the application will require version 11.0.0.0 of Microsoft.SqlServer.Types.dll. The other <c>Type System Version</c> settings will require version 10.0.0.0 of Microsoft.SqlServer.Types.dll.
              </para>
              <para>
                <c>Latest</c> is obsolete and should not be used. <c>Latest</c> is equivalent to <c>Type System Version=SQL Server 2008;</c>.
              </para>
            </description>
          </item>
          <item>
            <term>
              <b>User ID</b> or <b>UID</b> or <b>User</b>
            </term>
            <description>N/A</description>
            <description>
              <para>
                The SQL Server login account. Not recommended. To maintain a high level of security, we strongly recommend that you use the <c>Integrated Security</c> or <c>Trusted_Connection</c> keywords instead. <see cref="T:Microsoft.Data.SqlClient.SqlCredential" /> is a more secure way to specify credentials for a connection that uses SQL Server Authentication.
              </para>
              <para>
                The user ID must be 128 characters or fewer.
              </para>
            </description>
          </item>
          <item>
            <term>User Instance</term>
            <description><c>false</c></description>
            <description>
              A value that indicates whether to redirect the connection from the default SQL Server Express instance to a runtime-initiated instance running under the account of the caller.
            </description>
          </item>
          <item>
            <term>
              <b>Workstation ID</b> or <b>WSID</b>
            </term>
            <description>The local computer name</description>
            <description>
              <para>The name of the workstation connecting to SQL Server.</para>
              <para>The ID must be 128 characters or fewer.</para>
            </description>
          </item>
        </list>
        <para>
          The following list contains the valid names for connection pooling values within the <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionString" />. For more information, see <see href="/sql/connect/ado-net/sql-server-connection-pooling">SQL Server Connection Pooling (ADO.NET)</see>.
        </para>
        <list type="bullet">
          <item>Connection Lifetime (or Load Balance Timeout)</item>
          <item>Enlist</item>
          <item>Max Pool Size</item>
          <item>Min Pool Size</item>
          <item>Pooling</item>
        </list>
        <para>
          When you are setting keyword or connection pooling values that require a Boolean value, you can use <c>yed</c> instead of <c>true</c>, and <c>no</c> instead of <c>false</c>. Integer values are represented as strings.
        </para>
        <note type="note">
          The .NET Framework Data Provider for SQL Server uses its own protocol to communicate with SQL Server. Therefore, it does not support the use of an ODBC data source name (DSN) when connecting to SQL Server because it does not add an ODBC layer.
        </note>
        <note type="note">
          Universal data link (UDL) files are not supported for the .NET Framework Data Provider for SQL Server.
        </note>
        <note type="caution">
          In this release, the application should use caution when constructing a connection string based on user input (for example when retrieving user ID and password information from a dialog box, and appending it to the connection string). The application should make sure that a user cannot embed additional connection string parameters in these values (for example, entering a password as "validpassword;database=somedb" in an attempt to attach to a different database). If you need to construct connection strings based on user input, use the new <see cref="T:Microsoft.Data.SqlClient.SqlConnectionStringBuilder" />, which validates the connection string and helps to eliminate this problem. See <see href="/sql/connect/ado-net/connection-string-builders">Connection String Builders</see> for more information.
        </note>
      </remarks>
      <example>
        <para>
          The following example creates a <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> and sets the <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionString" /> property before opening the connection.
        </para>
        <!-- SqlConnection_ConnectionString -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  OpenSqlConnection();
                  Console.ReadLine();
              }
          
              private static void OpenSqlConnection()
              {
                  string connectionString = GetConnectionString();
          
                  using (SqlConnection connection = new SqlConnection())
                  {
                      connection.ConnectionString = connectionString;
          
                      connection.Open();
          
                      Console.WriteLine("State: {0}", connection.State);
                      Console.WriteLine("ConnectionString: {0}",
                          connection.ConnectionString);
                  }
              }
          
              static private string GetConnectionString()
              {
                  // To avoid storing the connection string in your code, 
                  // you can retrieve it from a configuration file.
                  return "Data Source=MSSQL1;Initial Catalog=AdventureWorks;"
                      + "Integrated Security=true;";
              }
          }
        </code>
      </example>
      <exception cref="T:System.ArgumentException">
        An invalid connection string argument has been supplied, or a required connection string argument has not been supplied.
      </exception>
    </ConnectionString>
    <ConnectionTimeout>
      <summary>
        Gets the time to wait while trying to establish a connection before terminating the attempt and generating an error.
      </summary>
      <value>
        The time (in seconds) to wait for a connection to open. The default value is 15 seconds.
      </value>
      <remarks>
        You can set the amount of time a connection waits to time out by using the <c>Connect Timeout</c> or <c>Connection Timeout</c> keywords in the connection string. A value of 0 indicates no limit, and should be avoided in a <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionString" /> because an attempt to connect waits indefinitely.
      </remarks>
      <example>
        <para>
          The following example creates a <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> and sets the <c>Connection Timeout</c> to 30 seconds in the connection string. The code opens the connection and displays the <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionTimeout" /> property in the console window.
        </para>
        <!-- SqlConnection_ConnectionTimeout -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  OpenSqlConnection();
                  Console.ReadLine();
              }
          
              private static void OpenSqlConnection()
              {
                  string connectionString = GetConnectionString();
                  using (SqlConnection connection = new SqlConnection(connectionString))
                  {
                      connection.Open();
                      Console.WriteLine("State: {0}", connection.State);
                      Console.WriteLine("ConnectionTimeout: {0}",
                          connection.ConnectionTimeout);
                  }
              }
          
              static private string GetConnectionString()
              {
                  // To avoid storing the connection string in your code, 
                  // you can retrieve it from a configuration file, using the 
                  // System.Configuration.ConfigurationSettings.AppSettings property 
                  return "Data Source=(local);Initial Catalog=AdventureWorks;"
                      + "Integrated Security=SSPI;Connection Timeout=30";
              }
          }
        </code>
      </example>
      <exception cref="T:System.ArgumentException">
        The value set is less than 0.
      </exception>
    </ConnectionTimeout>
    <CreateCommand>
      <summary>
        Creates and returns a <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object associated with the <see cref="T:Microsoft.Data.SqlClient.SqlConnection" />.
      </summary>
      <returns>
        A <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object.
      </returns>
      <example>
        <!-- SqlConnection_CreateCommand -->
        <code language="c#">
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          public class A
          {
              public static void Main()
              {
                  using (SqlConnection connection = new SqlConnection("Data Source=(local);Initial Catalog=Northwind;Integrated Security=SSPI;"))
                  {
                      connection.Open();
                      SqlCommand command = connection.CreateCommand();
                      command.CommandText = "SELECT * FROM Categories ORDER BY CategoryID";
                      command.CommandTimeout = 15;
                      command.CommandType = CommandType.Text;
                  }
              }
          }
        </code>
      </example>
    </CreateCommand>
    <CreateDbBatch>
      <summary>
        Returns a new instance of the <see cref="T:Microsoft.Data.SqlClient.SqlBatch" /> class that implements the <see cref="T:System.Data.Common.DbBatch" /> class.
      </summary>
      <returns>
        A new instance of <see cref="T:Microsoft.Data.SqlClient.SqlBatch" />.
      </returns>
    </CreateDbBatch>
    <CreateDbCommand>
      <summary>
        To be added.
      </summary>
      <returns>
        To be added.
      </returns>
      <remarks>
        To be added.
      </remarks>
    </CreateDbCommand>
    <Credential>
      <summary>
        Gets or sets the <see cref="T:Microsoft.Data.SqlClient.SqlCredential" /> object for this connection.
      </summary>
      <value>
        The <see cref="T:Microsoft.Data.SqlClient.SqlCredential" /> object for this connection.
      </value>
      <remarks>
        <para>
          <c>Persist Security Info = true</c> is required to get the value of the <see cref="T:Microsoft.Data.SqlClient.SqlCredential" /> object with <see cref="P:Microsoft.Data.SqlClient.SqlConnection.Credential" />. The default value of <see cref="P:Microsoft.Data.SqlClient.SqlConnection.Credential" /> is null. An <see cref="T:System.InvalidOperationException" /> exception will be raised:
        </para>
        <list type="bullet">
          <item>
            If <see cref="P:Microsoft.Data.SqlClient.SqlConnection.Credential" /> is set on an open connection.
          </item>
          <item>
            If <see cref="P:Microsoft.Data.SqlClient.SqlConnection.Credential" /> is set when <c>Integrated Security = true</c>.
          </item>
          <item>
            If <see cref="P:Microsoft.Data.SqlClient.SqlConnection.Credential" /> is set when the connection string uses <c>Password</c>.
          </item>
          <item>
            If <see cref="P:Microsoft.Data.SqlClient.SqlConnection.Credential" /> is set when the connection string uses <c>UserID</c>.
          </item>
        </list>
      </remarks>
    </Credential>
    <Database>
      <summary>
        Gets the name of the current database or the database to be used after a connection is opened.
      </summary>
      <value>
        The name of the current database or the name of the database to be used after a connection is opened. The default value is an empty string.
      </value>
      <remarks>
        The <see cref="P:Microsoft.Data.SqlClient.SqlConnection.Database" /> property updates dynamically. If you change the current database using a Transact-SQL statement or the <see cref="M:Microsoft.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)" /> method, an informational message is sent and the property is updated automatically.
        <para>
        </para>
      </remarks>
      <example>
        <para>
          The following example creates a <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> and displays some of its read-only properties.
        </para>
        <!-- SqlConnection_Database -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program1
          {
              static void Main()
              {
                  string s = GetConnectionString();
          
                  ChangeSqlDatabase(s);
                  Console.ReadLine();
              }
          
              private static void ChangeSqlDatabase(string connectionString)
              {
                  // Assumes connectionString represents a valid connection string
                  // to the AdventureWorks sample database.
                  using (SqlConnection connection = new SqlConnection(connectionString))
                  {
                      connection.Open();
                      Console.WriteLine("ServerVersion: {0}", connection.ServerVersion);
                      Console.WriteLine("Database: {0}", connection.Database);
          
                      connection.ChangeDatabase("Northwind");
                      Console.WriteLine("Database: {0}", connection.Database);
                  }
              }
          
              static private string GetConnectionString()
              {
                  // To avoid storing the connection string in your code, 
                  // you can retrieve it from a configuration file, using the 
                  // System.Configuration.ConfigurationSettings.AppSettings property 
                  return "Data Source=(local);Initial Catalog=AdventureWorks;"
                       + "Integrated Security=SSPI;";
              }
          }
        </code>
      </example>
    </Database>
    <DataSource>
      <summary>
        Gets the name of the instance of SQL Server to which to connect.
      </summary>
      <value>
        The name of the instance of SQL Server to which to connect. The default value is an empty string.
      </value>
      <example>
        <para>
          The following example creates a <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> and displays some of its read-only properties.
        </para>
        <!-- SqlConnection_DataSource -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program1
          {
              static void Main()
              {
                  string s = GetConnectionString();
          
                  OpenSqlConnection(s);
                  Console.ReadLine();
              }
          
              private static void OpenSqlConnection(string connectionString)
              {
                  using (SqlConnection connection = new SqlConnection(connectionString))
                  {
                      connection.Open();
                      Console.WriteLine("ServerVersion: {0}", connection.ServerVersion);
                      Console.WriteLine("DataSource: {0}", connection.DataSource);
                  }
              }
          
              static private string GetConnectionString()
              {
                  // To avoid storing the connection string in your code, 
                  // you can retrieve it from a configuration file, using the 
                  // System.Configuration.ConfigurationSettings.AppSettings property 
                  return "Data Source=(local);Initial Catalog=AdventureWorks;"
                       + "Integrated Security=SSPI;";
              }
          }
        </code>
      </example>
    </DataSource>
    <DbProviderFactory>
      <summary>
        To be added.
      </summary>
      <value>
        To be added.
      </value>
      <remarks>
        To be added.
      </remarks>
    </DbProviderFactory>
    <Dispose>
      <param name="disposing">
        To be added.
      </param>
      <summary>
        To be added.
      </summary>
      <remarks>
        To be added.
      </remarks>
    </Dispose>
    <EnlistDistributedTransaction>
      <param name="transaction">
        A reference to an existing <see cref="T:System.EnterpriseServices.ITransaction" /> in which to enlist.
      </param>
      <summary>
        Enlists in the specified transaction as a distributed transaction.
      </summary>
      <remarks>
        <para>
          You can use the <see cref="M:Microsoft.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)" /> method to enlist in a distributed transaction. Because it enlists a connection in a <see cref="T:System.Transactions.Transaction" /> instance, <see cref="M:Microsoft.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)" /> takes advantage of functionality available in the <see cref="T:System.Transactions" /> namespace for managing distributed transactions, making it preferable to <see cref="M:Microsoft.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)" /> for this purpose. For more information, see <see href="/sql/connect/ado-net/distributed-transactions">Distributed Transactions</see>.
        </para>
        <para>
          You can continue to enlist in an existing distributed transaction using the <b>EnlistDistributedTransaction</b> method if auto-enlistment is disabled. Enlisting in an existing distributed transaction makes sure that, if the transaction is committed or rolled back, modifications made by the code at the data source are also committed or rolled back. <c>EnlistDistributedTransaction</c> returns an exception if the <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> has already started a transaction using <see cref="M:Microsoft.Data.SqlClient.SqlConnection.BeginTransaction" />. However, if the transaction is a local transaction started at the data source (for example, by explicitly executing the BEGIN TRANSACTION statement using an <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object), <b>EnlistDistributedTransaction</b> rolls back the local transaction and enlists in the existing distributed transaction as requested. You do not receive notice that the local transaction was rolled back, and are responsible for managing any local transactions not started using <see cref="M:Microsoft.Data.SqlClient.SqlConnection.BeginTransaction" />.
        </para>
      </remarks>
    </EnlistDistributedTransaction>
    <EnlistTransaction>
      <param name="transaction">
        A reference to an existing <see cref="T:System.Transactions.Transaction" /> in which to enlist.
      </param>
      <summary>
        Enlists in the specified transaction as a distributed transaction.
      </summary>
      <remarks>
        You can use the <see cref="M:Microsoft.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)" /> method to enlist in a distributed transaction. Because it enlists a connection in a <see cref="T:System.Transactions.Transaction" /> instance, <see cref="M:Microsoft.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)" /> takes advantage of functionality available in the <see cref="T:System.Transactions" /> namespace for managing distributed transactions, making it preferable to <see cref="M:Microsoft.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)" />, which uses a <see cref="T:System.EnterpriseServices.ITransaction" /> object (from <see cref="T:System.EnterpriseServices" /> namespace). It also has slightly different semantics: once a connection is explicitly enlisted on a transaction, it cannot be unenlisted or enlisted in another transaction until the first transaction finishes. For more information about distributed transactions, see <see href="/sql/connect/ado-net/distributed-transactions">Distributed Transactions</see>.
      </remarks>
    </EnlistTransaction>
    <FireInfoMessageEventOnUserErrors>
      <summary>
        Gets or sets the <see cref="P:Microsoft.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" /> property.
      </summary>
      <value>
        <see langword="true" /> if the <see cref="P:Microsoft.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" /> property has been set; otherwise <see langword="false" />.
      </value>
      <remarks>
        <para>
          When you set <see cref="P:Microsoft.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" /> to <c>true</c>, errors that were previously treated as exceptions are now handled as <see cref="E:Microsoft.Data.SqlClient.SqlConnection.InfoMessage" /> events. All events fire immediately and are handled by the event handler. If is <see cref="P:Microsoft.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" /> is set to <c>false</c>, then <see cref="E:Microsoft.Data.SqlClient.SqlConnection.InfoMessage" /> events are handled at the end of the procedure.
        </para>
        <note type="note">
          An error with a severity level of 17 or above that causes the server to stop processing the command needs to be handled as an exception. In this case, an exception is thrown regardless of how the error is handled in the <see cref="E:Microsoft.Data.SqlClient.SqlConnection.InfoMessage" /> event.
        </note>
        <para>
          For more information on working with events, see <see href="/sql/connect/ado-net/connection-events">Connection Events</see>. For more information on errors generated by the SQL Server engine, see <see href="/sql/relational-databases/errors-events/database-engine-events-and-errors">Database Engine Errors</see>.
        </para>
      </remarks>
    </FireInfoMessageEventOnUserErrors>
    <GetSchema2>
      <summary>
        Returns schema information for the data source of this <see cref="T:Microsoft.Data.SqlClient.SqlConnection" />. For more information about scheme, see <see href="/sql/connect/ado-net/sql-server-schema-collections">SQL Server Schema Collections</see>.
      </summary>
      <returns>
        A <see cref="T:System.Data.DataTable" /> that contains schema information.
      </returns>
    </GetSchema2>
    <GetSchemaCollectionName>
      <param name="collectionName">
        Specifies the name of the schema to return.
      </param>
      <summary>
        Returns schema information for the data source of this <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> using the specified string for the schema name.
      </summary>
      <returns>
        A <see cref="T:System.Data.DataTable" /> that contains schema information.
      </returns>
      <remarks>
        <para>
          You may need the schema information of the database, tables or columns. This sample:
        </para>
        <list type="bullet">
          <item>Uses GetSchema to get schema information.</item>
          <item>Use schema restrictions to get the specified information.</item>
          <item>Gets schema information of the database, tables, and some columns.</item>
        </list>
      </remarks>
      <example>
        <para>
          Before you run the sample, you need to create the sample database, using the following Transact-SQL:
        </para>
        <code language="sql">
          USE [master]
          GO

          CREATE DATABASE [MySchool]
          GO

          USE [MySchool]
          GO

          SET ANSI_NULLS ON
          GO
          SET QUOTED_IDENTIFIER ON
          GO

          CREATE TABLE [dbo].[Course](
            [CourseID] [nvarchar](10) NOT NULL,
            [Year] [smallint] NOT NULL,
            [Title] [nvarchar](100) NOT NULL,
            [Credits] [int] NOT NULL,
            [DepartmentID] [int] NOT NULL,
            CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED (
              [CourseID] ASC,
              [Year] ASC
            ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
          ) ON [PRIMARY]
          GO

          SET ANSI_NULLS ON
          GO
          SET QUOTED_IDENTIFIER ON
          GO

          CREATE TABLE [dbo].[Department](
            [DepartmentID] [int] IDENTITY(1,1) NOT NULL,
            [Name] [nvarchar](50) NOT NULL,
            [Budget] [money] NOT NULL,
            [StartDate] [datetime] NOT NULL,
            [Administrator] [int] NULL,
            CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED (
              [DepartmentID] ASC
            ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
          ) ON [PRIMARY]
          GO

          INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID])
            VALUES (N'C1045', 2012, N'Calculus', 4, 7)
          INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID])
            VALUES (N'C1061', 2012, N'Physics', 4, 1)
          INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID])
            VALUES (N'C2021', 2012, N'Composition', 3, 2)
          INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID])
            VALUES (N'C2042', 2012, N'Literature', 4, 2)
          SET IDENTITY_INSERT [dbo].[Department] ON
          INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator])
            VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)
          INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator])
            VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)
          INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator])
            VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)
          INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator])
            VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)
          SET IDENTITY_INSERT [dbo].[Department] OFF

          ALTER TABLE [dbo].[Course]
          WITH CHECK ADD
            CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])
              REFERENCES [dbo].[Department] ([DepartmentID])
          GO

          ALTER TABLE [dbo].[Course]
          CHECK CONSTRAINT [FK_Course_Department]
          GO
        </code>
        <para>
          <see href="https://code.msdn.microsoft.com/How-to-Get-Schema-b66d62e2">How to Get Schema Information from Database</see> has C# and Visual Basic versions of this code sample in a Visual Studio project.
        </para>
        <!-- SqlConnection_GetSchema -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main(string[] args)
              {
                  using (SqlConnection conn = new SqlConnection("Data Source=(local);Initial Catalog=MySchool;Integrated Security=True;"))
                  {
                      conn.Open();
          
                      // Get the Meta Data for Supported Schema Collections  
                      DataTable metaDataTable = conn.GetSchema("MetaDataCollections");
          
                      Console.WriteLine("Meta Data for Supported Schema Collections:");
                      ShowDataTable(metaDataTable, 25);
                      Console.WriteLine();
          
                      // Get the schema information of Databases in your instance  
                      DataTable databasesSchemaTable = conn.GetSchema("Databases");
          
                      Console.WriteLine("Schema Information of Databases:");
                      ShowDataTable(databasesSchemaTable, 25);
                      Console.WriteLine();
          
                      // First, get schema information of all the tables in current database;  
                      DataTable allTablesSchemaTable = conn.GetSchema("Tables");
          
                      Console.WriteLine("Schema Information of All Tables:");
                      ShowDataTable(allTablesSchemaTable, 20);
                      Console.WriteLine();
          
                      // You can specify the Catalog, Schema, Table Name, Table Type to get   
                      // the specified table(s).  
                      // You can use four restrictions for Table, so you should create a 4 members array.  
                      String[] tableRestrictions = new String[4];
          
                      // For the array, 0-member represents Catalog; 1-member represents Schema;   
                      // 2-member represents Table Name; 3-member represents Table Type.   
                      // Now we specify the Table Name of the table what we want to get schema information.  
                      tableRestrictions[2] = "Course";
          
                      DataTable courseTableSchemaTable = conn.GetSchema("Tables", tableRestrictions);
          
                      Console.WriteLine("Schema Information of Course Tables:");
                      ShowDataTable(courseTableSchemaTable, 20);
                      Console.WriteLine();
          
                      // First, get schema information of all the columns in current database.  
                      DataTable allColumnsSchemaTable = conn.GetSchema("Columns");
          
                      Console.WriteLine("Schema Information of All Columns:");
                      ShowColumns(allColumnsSchemaTable);
                      Console.WriteLine();
          
                      // You can specify the Catalog, Schema, Table Name, Column Name to get the specified column(s).  
                      // You can use four restrictions for Column, so you should create a 4 members array.  
                      String[] columnRestrictions = new String[4];
          
                      // For the array, 0-member represents Catalog; 1-member represents Schema;   
                      // 2-member represents Table Name; 3-member represents Column Name.   
                      // Now we specify the Table_Name and Column_Name of the columns what we want to get schema information.  
                      columnRestrictions[2] = "Course";
                      columnRestrictions[3] = "DepartmentID";
          
                      DataTable departmentIDSchemaTable = conn.GetSchema("Columns", columnRestrictions);
          
                      Console.WriteLine("Schema Information of DepartmentID Column in Course Table:");
                      ShowColumns(departmentIDSchemaTable);
                      Console.WriteLine();
          
                      // First, get schema information of all the IndexColumns in current database  
                      DataTable allIndexColumnsSchemaTable = conn.GetSchema("IndexColumns");
          
                      Console.WriteLine("Schema Information of All IndexColumns:");
                      ShowIndexColumns(allIndexColumnsSchemaTable);
                      Console.WriteLine();
          
                      // You can specify the Catalog, Schema, Table Name, Constraint Name, Column Name to   
                      // get the specified column(s).  
                      // You can use five restrictions for Column, so you should create a 5 members array.  
                      String[] indexColumnsRestrictions = new String[5];
          
                      // For the array, 0-member represents Catalog; 1-member represents Schema;   
                      // 2-member represents Table Name; 3-member represents Constraint Name;4-member represents Column Name.   
                      // Now we specify the Table_Name and Column_Name of the columns what we want to get schema information.  
                      indexColumnsRestrictions[2] = "Course";
                      indexColumnsRestrictions[4] = "CourseID";
          
                      DataTable courseIdIndexSchemaTable = conn.GetSchema("IndexColumns", indexColumnsRestrictions);
          
                      Console.WriteLine("Index Schema Information of CourseID Column in Course Table:");
                      ShowIndexColumns(courseIdIndexSchemaTable);
                      Console.WriteLine();
                  }
          
                  Console.WriteLine("Please press any key to exit...");
                  Console.ReadKey();
              }
          
              private static void ShowDataTable(DataTable table, Int32 length)
              {
                  foreach (DataColumn col in table.Columns)
                  {
                      Console.Write("{0,-" + length + "}", col.ColumnName);
                  }
                  Console.WriteLine();
          
                  foreach (DataRow row in table.Rows)
                  {
                      foreach (DataColumn col in table.Columns)
                      {
                          if (col.DataType.Equals(typeof(DateTime)))
                          {
                              Console.Write("{0,-" + length + ":d}", row[col]);
                          }
                          else if (col.DataType.Equals(typeof(Decimal)))
                          {
                              Console.Write("{0,-" + length + ":C}", row[col]);
                          }
                          else {
                              Console.Write("{0,-" + length + "}", row[col]);
                          }
                      }
                      Console.WriteLine();
                  }
              }
          
              private static void ShowDataTable(DataTable table)
              {
                  ShowDataTable(table, 14);
              }
          
              private static void ShowColumns(DataTable columnsTable)
              {
                  var selectedRows = from info in columnsTable.AsEnumerable()
                                     select new
                                     {
                                         TableCatalog = info["TABLE_CATALOG"],
                                         TableSchema = info["TABLE_SCHEMA"],
                                         TableName = info["TABLE_NAME"],
                                         ColumnName = info["COLUMN_NAME"],
                                         DataType = info["DATA_TYPE"]
                                     };
          
                  Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", "TableCatalog", "TABLE_SCHEMA",
                      "TABLE_NAME", "COLUMN_NAME", "DATA_TYPE");
                  foreach (var row in selectedRows)
                  {
                      Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", row.TableCatalog,
                          row.TableSchema, row.TableName, row.ColumnName, row.DataType);
                  }
              }
          
              private static void ShowIndexColumns(DataTable indexColumnsTable)
              {
                  var selectedRows = from info in indexColumnsTable.AsEnumerable()
                                     select new
                                     {
                                         TableSchema = info["table_schema"],
                                         TableName = info["table_name"],
                                         ColumnName = info["column_name"],
                                         ConstraintSchema = info["constraint_schema"],
                                         ConstraintName = info["constraint_name"],
                                         KeyType = info["KeyType"]
                                     };
          
                  Console.WriteLine("{0,-14}{1,-11}{2,-14}{3,-18}{4,-16}{5,-8}", "table_schema", "table_name", "column_name", "constraint_schema", "constraint_name", "KeyType");
                  foreach (var row in selectedRows)
                  {
                      Console.WriteLine("{0,-14}{1,-11}{2,-14}{3,-18}{4,-16}{5,-8}", row.TableSchema,
                          row.TableName, row.ColumnName, row.ConstraintSchema, row.ConstraintName, row.KeyType);
                  }
              }
          }
        </code>
      </example>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionName" /> is specified as null.
      </exception>
    </GetSchemaCollectionName>
    <GetSchemaCollectionNameRestrictionValues>
      <param name="collectionName">
        Specifies the name of the schema to return.
      </param>
      <param name="restrictionValues">
        A set of restriction values for the requested schema.
      </param>
      <summary>
        Returns schema information for the data source of this <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> using the specified string for the schema name and the specified string array for the restriction values.
      </summary>
      <returns>
        A <see cref="T:System.Data.DataTable" /> that contains schema information.
      </returns>
      <remarks>
        <para>
          The <paramref name="restrictionValues" /> parameter can supply <i>n</i> depth of values, which are specified by the restrictions collection for a specific collection. In order to set values on a given restriction, and not set the values of other restrictions, you need to set the preceding restrictions to <see langword="null" /> and then put the appropriate value in for the restriction that you would like to specify a value for.
        </para>
        <para>
          An example of this is the "Tables" collection. If the "Tables" collection has three restrictions--database, owner, and table name--and you want to get back only the tables associated with the owner "Carl", you need to pass in the following values: null, "Carl". If a restriction value is not passed in, the default values are used for that restriction. This is the same mapping as passing in <see langword="null" />, which is different from passing in an empty string for the parameter value. In that case, the empty string ("") is considered to be the value for the specified parameter.
        </para>
      </remarks>
      <example>
        For a code sample demonstrating <see cref="M:Microsoft.Data.SqlClient.SqlConnection.GetSchema" />, see <see cref="M:Microsoft.Data.SqlClient.SqlConnection.GetSchema" />.
      </example>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionName" /> is specified as null.
      </exception>
      <seealso cref="M:Microsoft.Data.SqlClient.SqlConnection.GetSchema" />
    </GetSchemaCollectionNameRestrictionValues>
    <InfoMessage>
      <summary>
        Occurs when SQL Server returns a warning or informational message.
      </summary>
      <remarks>
        <para>
          Clients that want to process warnings or informational messages sent by the server should create an <see cref="T:Microsoft.Data.SqlClient.SqlInfoMessageEventHandler" /> delegate to listen to this event.
        </para>
        <para>
          The <see cref="E:Microsoft.Data.SqlClient.SqlConnection.InfoMessage" /> event occurs when a message with a severity of 10 or less is returned by SQL Server. Messages that have a severity between 11 and 20 raise an error and messages that have a severity over 20 causes the connection to close. For more information on SQL Server error levels, see <see href="/sql/relational-databases/errors-events/database-engine-error-severities">Database Engine Error Severities</see>.
          For more information and an example, see <see href="/sql/connect/ado-net/connection-events">Connection Events</see>.
        </para>
      </remarks>
    </InfoMessage>
    <OnStateChange>
      <param name="stateChange">
        To be added.
      </param>
      <summary>
        To be added.
      </summary>
      <remarks>
        To be added.
      </remarks>
    </OnStateChange>
    <Open>
      <summary>
        Opens a database connection with the property settings specified by the <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionString" />.
      </summary>
      <remarks>
        <para>
          The <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> draws an open connection from the connection pool if one is available. Otherwise, it establishes a new connection to an instance of SQL Server.
        </para>
        <note type="note">
          If the <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> goes out of scope, it is not closed. Therefore, you must explicitly close the connection by calling <see cref="M:Microsoft.Data.SqlClient.SqlConnection.Close" />.
        </note>
        <note type="note">
          If you specify a port number other than 1433 when you are trying to connect to an instance of SQL Server and using a protocol other than TCP/IP, the <see cref="M:Microsoft.Data.SqlClient.SqlConnection.Open" /> method fails. To specify a port number other than 1433, include "server=machinename,port number" in the connection string, and use the TCP/IP protocol.
        </note>
        <note type="note">
          The .NET Framework Data Provider for SQL Server requires the Security permission with "Allows calls to unmanaged assemblies" enabled (<see cref="T:System.Security.Permission.SecurityPermission" /> with <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /> set to <c>UnmanagedCode</c>) to open a <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> with SQL Debugging enabled.
        </note>
      </remarks>
      <example>
        <para>
          The following example creates a <see cref="T:Microsoft.Data.SqlClient.SqlConnection" />, opens it, and displays some of its properties. The connection is automatically closed at the end of the <c>using</c> block.
        </para>
        <!-- SqlConnection_Open -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program1
          {
              static void Main()
              {
                  string s = GetConnectionString();
          
                  OpenSqlConnection(s);
                  Console.ReadLine();
              }
          
              private static void OpenSqlConnection(string connectionString)
              {
                  using (SqlConnection connection = new SqlConnection(connectionString))
                  {
                      connection.Open();
                      Console.WriteLine("ServerVersion: {0}", connection.ServerVersion);
                      Console.WriteLine("State: {0}", connection.State);
                  }
              }
          
              static private string GetConnectionString()
              {
                  // To avoid storing the connection string in your code, 
                  // you can retrieve it from a configuration file, using the 
                  // System.Configuration.ConfigurationSettings.AppSettings property 
                  return "Data Source=(local);Initial Catalog=AdventureWorks;"
                       + "Integrated Security=SSPI;";
              }
          }
        </code>
      </example>
      <exception cref="T:System.InvalidOperationException">
        <list type="bullet">
          <item>Cannot open a connection without specifying a data source or server.</item>
          <item>The connection is already open.</item>
        </list>
      </exception>
      <exception cref="T:Microsoft.Data.SqlClient.SqlException">
        <para>
          A connection-level error occurred while opening the connection. If the <see cref="P:Microsoft.Data.SqlClient.SqlException.Number" /> property contains the value 18487 or 18488, this indicates that the specified password has expired or must be reset. See the <see cref="M:Microsoft.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)" /> method for more information.
        </para>
        <para>
          The <c>&lt;system.data.localdb&gt;</c> tag in the app.config file has invalid or unknown elements.
        </para>
      </exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        There are two entries with the same name in the <c>&lt;localdbinstances&gt;</c> section.
      </exception>
    </Open>
    <OpenWithOverrides>
      <param name="overrides">
        Options to override default connection open behavior.
      </param>
      <summary>
        Opens a database connection with the property settings specified by the <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionString" />.
      </summary>
      <remarks>
        <para>
          The <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> draws an open connection from the connection pool if one is available. Otherwise, it establishes a new connection to an instance of SQL Server. If overrides are specified, the first open attempt will apply the specified overrides to the open action.
        </para>
        <note type="note">
          If the <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> goes out of scope, it is not closed. Therefore, you must explicitly close the connection by calling <see cref="M:Microsoft.Data.SqlClient.SqlConnection.Close" />.
        </note>
        <note type="note">
          If you specify a port number other than 1433 when you are trying to connect to an instance of SQL Server and using a protocol other than TCP/IP, the <see cref="M:Microsoft.Data.SqlClient.SqlConnection.Open" /> method fails. To specify a port number other than 1433, include "server=machinename,port number" in the connection string, and use the TCP/IP protocol.
        </note>
        <note type="note">
          The .NET Framework Data Provider for SQL Server requires the Security permission with "Allows calls to unmanaged assemblies" enabled (<see cref="T:System.Security.Permissions.SecurityPermission" /> with <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /> set to <c>UnmanagedCode</c>) to open a <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> with SQL Debugging enabled.
        </note>
      </remarks>
      <example>
        <para>
          The following example creates a <see cref="T:Microsoft.Data.SqlClient.SqlConnection" />, opens it, and displays some of its properties. The connection is automatically closed at the end of the <c>using</c> block.
        </para>
        <!-- SqlConnection_Open -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program1
          {
              static void Main()
              {
                  string s = GetConnectionString();
          
                  OpenSqlConnection(s);
                  Console.ReadLine();
              }
          
              private static void OpenSqlConnection(string connectionString)
              {
                  using (SqlConnection connection = new SqlConnection(connectionString))
                  {
                      connection.Open();
                      Console.WriteLine("ServerVersion: {0}", connection.ServerVersion);
                      Console.WriteLine("State: {0}", connection.State);
                  }
              }
          
              static private string GetConnectionString()
              {
                  // To avoid storing the connection string in your code, 
                  // you can retrieve it from a configuration file, using the 
                  // System.Configuration.ConfigurationSettings.AppSettings property 
                  return "Data Source=(local);Initial Catalog=AdventureWorks;"
                       + "Integrated Security=SSPI;";
              }
          }
        </code>
      </example>
      <exception cref="T:System.InvalidOperationException">
        <list type="bullet">
          <item>Cannot open a connection without specifying a data source or server.</item>
          <item>The connection is already open.</item>
        </list>
      </exception>
      <exception cref="T:Microsoft.Data.SqlClient.SqlException">
        A connection-level error occurred while opening the connection. If the <see cref="P:Microsoft.Data.SqlClient.SqlException.Number" /> property contains the value 18487 or 18488, this indicates that the specified password has expired or must be reset. See the <see cref="M:Microsoft.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)" /> method for more information. The <c>&lt;system.data.localdb&gt;</c> tag in the app.config file has invalid or unknown elements.
      </exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        There are two entries with the same name in the <c>&lt;localdbinstances&gt;</c> section.
      </exception>
    </OpenWithOverrides>
    <OpenAsync>
      <param name="cancellationToken">
        The cancellation instruction.
      </param>
      <summary>
        An asynchronous version of <see cref="M:Microsoft.Data.SqlClient.SqlConnection.Open" />, which opens a database connection with the property settings specified by the <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionString" />. The cancellation token can be used to request that the operation be abandoned before the connection timeout elapses. Exceptions will be propagated via the returned Task. If the connection timeout time elapses without successfully connecting, the returned Task will be marked as faulted with an Exception. The implementation returns a Task without blocking the calling thread for both pooled and non-pooled connections.
      </summary>
      <returns>
        A task representing the asynchronous operation.
      </returns>
      <remarks>
        <para>
          After calling <see cref="M:Microsoft.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" />, <see cref="P:Microsoft.Data.SqlClient.SqlConnection.State" /> must return <see cref="F:System.Data.ConnectionState.Connecting" /> until the returned <see cref="T:System.Threading.Tasks.Task" /> is completed. Then, if the connection was successful, <see cref="P:Microsoft.Data.SqlClient.SqlConnection.State" /> must return <see cref="F:System.Data.ConnectionState.Open" />. If the connection fails, <see cref="P:Microsoft.Data.SqlClient.SqlConnection.State" /> must return <see cref="F:System.Data.ConnectionState.Closed" />.
        </para>
        <para>
          A call to <see cref="M:Microsoft.Data.SqlClient.SqlConnection.Close" /> will attempt to cancel or close the corresponding <see cref="M:Microsoft.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" /> call. For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <see href="/sql/connect/ado-net/asynchronous-programming">Asynchronous Programming</see>.
        </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">
        <para>
          Calling <see cref="M:Microsoft.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" /> more than once for the same instance before task completion.
        </para>
        <para>
          A connection was not available from the connection pool before the connection time out elapsed.
        </para>
      </exception>
      <exception cref="T:Microsoft.Data.SqlClient.SqlException">
        Any error returned by SQL Server that occurred while opening the connection.
      </exception>
    </OpenAsync>
    <PacketSize>
      <summary>
        Gets the size (in bytes) of network packets used to communicate with an instance of SQL Server.
      </summary>
      <value>
        The size (in bytes) of network packets. The default value is 8000.
      </value>
      <remarks>
        <para>
          If an application performs bulk copy operations, or sends or receives lots of text or image data, a packet size larger than the default may improve efficiency because it causes fewer network read and write operations. If an application sends and receives small amounts of information, you can set the packet size to 512 bytes (using the Packet Size value in the <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ConnectionString" />), which is sufficient for most data transfer operations. For most applications, the default packet size is best. <see cref="P:Microsoft.Data.SqlClient.SqlConnection.PacketSize" /> may be a value in the range of 512 and 32767 bytes. An exception is generated if the value is outside this range.
        </para>
        <para>
          Setting the default value to a number greater than 8000 will cause the packets to use the MultiPage allocator on the instance of SQL Server instead of the much more efficient SinglePage allocator, reducing the overall scalability of the SQL Server. For more information on how SQL Server uses memory, see <see href="/sql/relational-databases/memory-management-architecture-guide">Memory Management Architecture Guide</see>.
        </para>
      </remarks>
      <example>
        <para>
          The following example creates a <see cref="T:Microsoft.Data.SqlClient.SqlConnection" />, including setting the <c>Packet Size</c> to 512 in the connection string. It displays the <see cref="P:Microsoft.Data.SqlClient.SqlConnection.PacketSize" /> and <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ServerVersion" /> properties in the console window.
        </para>
        <!-- SqlConnection_PacketSize -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  OpenSqlConnection();
                  Console.ReadLine();
              }
          
              private static void OpenSqlConnection()
              {
                  string connectionString = GetConnectionString();
                  using (SqlConnection connection = new SqlConnection(connectionString))
                  {
                      connection.Open();
                      Console.WriteLine("ServerVersion: {0}", connection.ServerVersion);
                      Console.WriteLine("PacketSize: {0}", connection.PacketSize);
                  }
              }
          
              static private string GetConnectionString()
              {
                  // To avoid storing the connection string in your code, 
                  // you can retrieve it from a configuration file, using the 
                  // System.Configuration.ConfigurationSettings.AppSettings property 
                  return "Data Source=(local);Initial Catalog=AdventureWorks;"
                       + "Integrated Security=SSPI;Packet Size=512";
              }
          }
        </code>
      </example>
    </PacketSize>
    <RegisterColumnEncryptionKeyStoreProviders>
      <param name="customProviders">
        Dictionary of custom column encryption key store providers
      </param>
      <summary>
        <para>
          Registers the column encryption key store providers. This function should only be called once in an app. This does shallow copying of the dictionary so that the app cannot alter the custom provider list once it has been set.
        </para>
        <para>
          The built-in column master key store providers that are available for the Windows Certificate Store, CNG Store and CSP are pre-registered.
        </para>
      </summary>
      <example>
        <code language='c#'>
          Dictionary&lt;string, SqlColumnEncryptionKeyStoreProvider&gt; customKeyStoreProviders = new Dictionary&lt;string, SqlColumnEncryptionKeyStoreProvider&gt;();
          MySqlClientHSMProvider myProvider = new MySqlClientHSMProvider();
          customKeyStoreProviders.Add(@"HSM Provider", myProvider);
          SqlConnection.RegisterColumnEncryptionKeyStoreProviders(customKeyStoreProviders);
        </code>
      </example>
      <exception cref="T:System.ArgumentNullException">
        <list type="bullet">
          <item>A null dictionary was provided.</item>
          <item>A string key in the dictionary was null or empty.</item>
          <item>A <see cref="T:Microsoft.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider" /> value in the dictionary was null.</item>
        </list>
      </exception>
      <exception cref="T:System.ArgumentException">
        A string key in the dictionary started with "MSSQL_". This prefix is reserved for system providers.
      </exception>
      <exception cref="T:System.InvalidOperationException">
        This function was called more than once.
      </exception>
    </RegisterColumnEncryptionKeyStoreProviders>
    <RegisterColumnEncryptionKeyStoreProvidersOnConnection>
      <param name="customProviders">
        Dictionary of custom column encryption key providers
      </param>
      <summary>
        Registers the encryption key store providers on the <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> instance. If this function has been called, any providers registered using the static <see cref="M:Microsoft.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,Microsoft.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})" /> methods will be ignored. This function can be called more than once. This does shallow copying of the dictionary so that the app cannot alter the custom provider list once it has been set.
      </summary>
      <remarks>
        <para>
          Custom master key store providers can be registered with the driver at three different layers. The precedence of the three registrations is as follows:
        </para>
        <list type="bullet">
          <item>
            The per-command registration will be checked if it is not empty.
          </item>
          <item>
            If the per-command registration is empty, the per-connection registration will be checked if it is not empty.
          </item>
          <item>
            If the per-connection registration is empty, the global registration will be checked.
          </item>
        </list>
        <para>
          Once any key store provider is found at a registration level, the driver will <b>NOT</b> fall back to the other registrations to search for a provider. If providers are registered but the proper provider is not found at a level, an exception will be thrown containing only the registered providers in the registration that was checked.
        </para>
        <para>
          The built-in column master key store providers that are available for the Windows Certificate Store, CNG Store and CSP are pre-registered.
        </para>
        <para>
          This does shallow copying of the dictionary so that the app cannot alter the custom provider list once it has been set.
        </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <list type="bullet">
          <item>A null dictionary was provided.</item>
          <item>A string key in the dictionary was null or empty.</item>
          <item>A <see cref="T:Microsoft.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider" /> value in the dictionary was null.</item>
        </list>
      </exception>
      <exception cref="T:System.ArgumentException">
        A string key in the dictionary started with "MSSQL_". This prefix is reserved for system providers.
      </exception>
    </RegisterColumnEncryptionKeyStoreProvidersOnConnection>
    <RetryLogicProvider>
      <summary>
        Gets or sets a value that specifies the <see cref="T:Microsoft.Data.SqlClient.SqlRetryLogicBaseProvider" /> object bound to this command.
      </summary>
      <value>
        When set to null (default), the default non-retryable provider will be applied.
      </value>
      <remarks>
        <para>
          You must set the value for this property before opening the connection to take effect.
        </para>
        <para>
          To apply the retry logic, do the following steps before opening the connection:
        </para>
        <list type="number">
          <item>
            Define the configuration parameters by using <see cref="T:Microsoft.Data.SqlClient.SqlRetryLogicOption" /> type.
          </item>
          <item>
            Create a <see cref="T:Microsoft.Data.SqlClient.SqlRetryLogicBaseProvider" /> by using one of the following static methods of the <see cref="T:Microsoft.Data.SqlClient.SqlConfigurableRetryFactory" /> class:
            <list type="bullet">
              <item><see cref="M:Microsoft.Data.SqlClient.SqlConfigurableRetryFactory.CreateFixedRetryProvider(Microsoft.Data.SqlClient.SqlRetryLogicOption)" /></item>
              <item><see cref="M:Microsoft.Data.SqlClient.SqlConfigurableRetryFactory.CreateIncrementalRetryProvider(Microsoft.Data.SqlClient.SqlRetryLogicOption)" /></item>
              <item><see cref="M:Microsoft.Data.SqlClient.SqlConfigurableRetryFactory.CreateExponentialRetryProvider(Microsoft.Data.SqlClient.SqlRetryLogicOption)" /></item>
              <item><see cref="M:Microsoft.Data.SqlClient.SqlConfigurableRetryFactory.CreateNoneRetryProvider" /></item>
            </list>
          </item>
          <item>
            Assign the <see cref="T:Microsoft.Data.SqlClient.SqlRetryLogicBaseProvider" /> object to the <c>RetryLogicProvider</c> property.
          </item>
        </list>
        <note type="note">
          Detecting retryable exceptions is a vital part of the retry pattern. Before applying retry logic, it is important to investigate exceptions and choose a retry provider that best fits your scenario. First, log your exceptions and find transient faults.
        </note>
        <note type="note">
          The connection <b>timeout</b> restarts for each execution of a connection open. There is no timing overlap between these two actions.
        </note>
        <note type="note">
          The default retry logic provider is not enabled unless it is configured in an application configuration file. For more information, see <see href="/sql/connect/ado-net/configurable-retry-logic-config-file-sqlclient">Configurable retry logic and configuration file</see>.
        </note>
      </remarks>
      <example>
        <para>
          The following sample tries to open a connection to an invalid database to simulate a condition that the database service is temporarily unavailable . You should manually create the database while the <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> tries to establish the connection.
        </para>
        <!-- SqlConfigurableRetryLogic_OpenConnection -->
        <code language="c#">
          using System;
          using Microsoft.Data.SqlClient;
          
          /// Detecting retriable exceptions is a vital part of the retry pattern.
          /// Before applying retry logic it is important to investigate exceptions and choose a retry provider that best fits your scenario.
          /// First, log your exceptions and find transient faults.
          /// The purpose of this sample is to illustrate how to use this feature and the condition might not be realistic.
          class RetryLogicSample
          {
              private const string DefaultDB = "Northwind";
              private const string CnnStringFormat = "Server=localhost; Initial Catalog={0}; Integrated Security=true; pooling=false;";
              private const string DropDatabaseFormat = "DROP DATABASE {0}";
          
              // For general use
              private static SqlConnection s_generalConnection = new SqlConnection(string.Format(CnnStringFormat, DefaultDB));
          
              static void Main(string[] args)
              {
                  // 1. Define the retry logic parameters
                  var options = new SqlRetryLogicOption()
                  {
                      NumberOfTries = 5,
                      MaxTimeInterval = TimeSpan.FromSeconds(20),
                      DeltaTime = TimeSpan.FromSeconds(1)
                  };
          
                  // 2. Create a retry provider
                  var provider = SqlConfigurableRetryFactory.CreateExponentialRetryProvider(options);
          
                  // define the retrying event to report the execution attempts
                  provider.Retrying += (object s, SqlRetryingEventArgs e) =>
                      {
                          int attempts = e.RetryCount + 1;
                          Console.ForegroundColor = ConsoleColor.Yellow;
                          Console.WriteLine($"attempt {attempts} - current delay time:{e.Delay} \n");
                          Console.ForegroundColor = ConsoleColor.DarkGray;
                          if (e.Exceptions[e.Exceptions.Count - 1] is SqlException ex)
                          {
                              Console.WriteLine($"{ex.Number}-{ex.Message}\n");
                          }
                          else
                          {
                              Console.WriteLine($"{e.Exceptions[e.Exceptions.Count - 1].Message}\n");
                          }
          
                          // It is not a good practice to do time-consuming tasks inside the retrying event which blocks the running task.
                          // Use parallel programming patterns to mitigate it.
                          if (e.RetryCount == provider.RetryLogic.NumberOfTries - 1)
                          {
                              Console.WriteLine("This is the last chance to execute the command before throwing the exception.");
                              Console.WriteLine("Press Enter when you're ready:");
                              Console.ReadLine();
                              Console.WriteLine("continue ...");
                          }
                      };
          
                  // Open the general connection.
                  s_generalConnection.Open();
          
                  try
                  {
                      // Assume the database is being created and other services are going to connect to it.
                      RetryConnection(provider);
                  }
                  catch
                  {
                      // exception is thrown if connecting to the database isn't successful.
                      throw;
                  }
              }
          
              private static void ExecuteCommand(SqlConnection cn, string command)
              {
                  using var cmd = cn.CreateCommand();
                  cmd.CommandText = command;
                  cmd.ExecuteNonQuery();
              }
          
              private static void RetryConnection(SqlRetryLogicBaseProvider provider)
              {
                  // Change this if you already have a database with the same name in your database.
                  string dbName = "Invalid_DB_Open";
          
                  // Create a connection to an invalid database.
                  using var cnn = new SqlConnection(string.Format(CnnStringFormat, dbName));
                  // 3. Assign the `provider` to the connection
                  cnn.RetryLogicProvider = provider;
                  Console.WriteLine($"Connecting to the [{dbName}] ...");
                  // Manually execute the following command in SSMS to create the invalid database while the SqlConnection is attempting to connect to it.
                  // >> CREATE DATABASE Invalid_DB_Open;
                  Console.WriteLine($"Manually, run the 'CREATE DATABASE {dbName};' in the SQL Server before exceeding the {provider.RetryLogic.NumberOfTries} attempts.");
                  // the connection tries to connect to the database 5 times
                  Console.WriteLine("The first attempt, before getting into the retry logic.");
                  cnn.Open();
                  Console.WriteLine($"Connected to the [{dbName}] successfully.");
          
                  cnn.Close();
          
                  // Drop it after test
                  ExecuteCommand(s_generalConnection, string.Format(DropDatabaseFormat, dbName));
                  Console.WriteLine($"The [{dbName}] is removed.");
              }
          }
        </code>
      </example>
    </RetryLogicProvider>
    <ResetStatistics>
      <summary>
        If statistics gathering is enabled, all values are reset to zero.
      </summary>
      <remarks>
        If statistics gathering is not enabled and this method is called, no error is thrown.
      </remarks>
    </ResetStatistics>
    <RetrieveStatistics>
      <summary>
        Returns a name value pair collection of statistics at the point in time the method is called.
      </summary>
      <returns>
        Returns a reference of type <see cref="T:System.Collections.IDictionary" /> of <see cref="T:System.Collections.DictionaryEntry" /> items.
      </returns>
      <remarks>
        When this method is called, the values retrieved are those at the current point in time. If you continue using the connection, the values are incorrect. You need to re-execute the method to obtain the most current values.
      </remarks>
    </RetrieveStatistics>
    <RetrieveInternalInfo>
      <summary>
        Returns a name value pair collection of internal properties at the point in time the method is called.
      </summary>
      <returns>
        Returns a reference of type <see cref="T:System.Collections.Generic.IDictionary`2" /> of (string, object) items.
      </returns>
      <remarks>
        <para>
          When this method is called, the values retrieved are those at the current point in time. If you continue using the connection, the values are incorrect. You need to re-execute the method to obtain the most current values.
        </para>
        <list type="table">
          <listheader>
            <term>Supported internal properties</term>
            <term>Type</term>
            <term>Information provided</term>
            <term>Return value</term>
          </listheader>
          <item>
            <description><c>SQLDNSCachingSupportedState</c></description>
            <description>string</description>
            <description>To indicate the IsSupported flag sent by the server for DNS Caching</description>
            <description>"true", "false", "innerConnection is null!"</description>
          </item>
          <item>
            <description><c>SQLDNSCachingSupportedStateBeforeRedirect</c></description>
            <description>string</description>
            <description>To indicate the IsSupported flag sent by the server for DNS Caching before redirection.</description>
            <description>"true", "false", "innerConnection is null!"</description>
          </item>
        </list>
      </remarks>
    </RetrieveInternalInfo>
    <ServerVersion>
      <summary>
        Gets a string that contains the version of the instance of SQL Server to which the client is connected.
      </summary>
      <value>
        The version of the instance of SQL Server.
      </value>
      <remarks>
        The version is of the form <i>##.##.####</i>, where the first two digits are the major version, the next two digits are the minor version, and the last four digits are the release version. The string is of the form <i>major.minor.build</i>, where major and minor are exactly two digits and build is exactly four digits. <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ServerVersion" /> was called while the returned Task was not completed and the connection was not opened after a call to <see cref="M:Microsoft.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" />.
      </remarks>
      <example>
        <para>
          The following example creates a <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> and displays the <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ServerVersion" /> property.
        </para>
        <!-- SqlConnection_ServerVersion -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          namespace SqlConnection1CS
          {
              class Program
              {
                  static void Main()
                  {
                      string connectionString =
                          "Persist Security Info=False;Integrated Security=SSPI;database=Northwind;server=(local)";
                      CreateSqlConnection(connectionString);
                      Console.ReadLine();
                  }
                
                  private static void CreateSqlConnection(string connectionString)
                  {
                      using (SqlConnection connection = new SqlConnection(connectionString))
                      {
                          connection.Open();
                          Console.WriteLine("ServerVersion: {0}", connection.ServerVersion);
                          Console.WriteLine("State: {0}", connection.State);
                      }
                  }
              }
          }
        </code>
      </example>
      <exception cref="T:System.InvalidOperationException">
        The connection is closed. <see cref="P:Microsoft.Data.SqlClient.SqlConnection.ServerVersion" /> was called while the returned Task was not completed and the connection was not opened after a call to <see cref="M:Microsoft.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" />.
      </exception>
    </ServerVersion>
    <ServerProcessId>
      <summary>
        Gets the server process ID (SPID) of the active connection.
      </summary>
      <value>
        The server process ID (SPID) of the active connection.
      </value>
      <remarks>
        Returns 0 if the connection is inactive on the client side.
      </remarks>
    </ServerProcessId>
    <State>
      <summary>
        Indicates the state of the <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> during the most recent network operation performed on the connection.
      </summary>
      <value>
        An <see cref="T:System.Data.ConnectionState" /> enumeration.
      </value>
      <remarks>
        Returns an <see cref="T:System.Data.ConnectionState" /> enumeration indicating the state of the <see cref="T:Microsoft.Data.SqlClient.SqlConnection" />. Closing and reopening the connection will refresh the value of <see cref="P:Microsoft.Data.SqlClient.SqlConnection.State" />.
      </remarks>
    </State>
    <StatisticsEnabled>
      <summary>
        When set to <see langword="true" />, enables statistics gathering for the current connection.
      </summary>
      <value>
        Returns <see langword="true" /> if statistics gathering is enabled; otherwise <see langword="false" />. <see langword="false" /> is the default.
      </value>
      <remarks>
        Enabling statistics gathering has a minor, but measurable effect on performance and therefore should be enabled only when it is required.
      </remarks>
    </StatisticsEnabled>
    <System.ICloneable.Clone>
      <summary>
        Creates a new object that is a copy of the current instance.
      </summary>
      <returns>
        A new object that is a copy of this instance.
      </returns>
      <remarks>
        <para>
          This member is an explicit interface member implementation. It can be used only when the <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> instance is cast to an <see cref="T:System.ICloneable" /> interface.
        </para>
        <para>
          This member is only supported by the .NET Compact Framework.
        </para>
      </remarks>
    </System.ICloneable.Clone>
    <WorkstationId>
      <summary>
        Gets a string that identifies the database client.
      </summary>
      <value>
        A string that identifies the database client. If not specified, the name of the client computer. If neither is specified, the value is an empty string.
      </value>
      <remarks>
        The string typically contains the network name of the client. The <see cref="P:Microsoft.Data.SqlClient.SqlConnection.WorkstationId" /> property corresponds to the <c>Workstation ID</c> connection string property.
      </remarks>
      <example>
        <para>
          The following example creates a <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> and displays the <see cref="P:Microsoft.Data.SqlClient.SqlConnection.WorkstationId" /> property.
        </para>
        <!-- SqlConnection_WorkstationId -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  string s = GetConnectionString();
          
                  OpenSqlConnection(s);
                  Console.ReadLine();
              }
          
              private static void OpenSqlConnection(string connectionString)
              {
                  using (SqlConnection connection = new SqlConnection(connectionString))
                  {
                      connection.Open();
                      Console.WriteLine("ServerVersion: {0}", connection.ServerVersion);
                      Console.WriteLine("WorkstationId: {0}", connection.WorkstationId);
                  }
              }
          
              static private string GetConnectionString()
              {
                  // To avoid storing the connection string in your code, 
                  // you can retrieve it from a configuration file, using the 
                  // System.Configuration.ConfigurationSettings.AppSettings property 
                  return "Data Source=(local);Initial Catalog=AdventureWorks;"
                       + "Integrated Security=SSPI;";
              }
          }
        </code>
      </example>
    </WorkstationId>
  </members>
</docs>

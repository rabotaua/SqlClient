<docs>
  <members name="SqlCommandBuilder">
    <SqlCommandBuilder>
      <summary>
        Automatically generates single-table commands that are used to reconcile changes made to a <see cref="T:System.Data.DataSet" /> with the associated SQL Server database. This class cannot be inherited.
      </summary>
      <remarks>
        <para>
          The <see cref="T:Microsoft.Data.SqlClient.SqlDataAdapter" /> does not automatically generate the Transact-SQL statements required to reconcile changes made to a <see cref="T:System.Data.DataSet" /> with the associated instance of SQL Server. However, you can create a <see cref="T:Microsoft.Data.SqlClient.SqlCommandBuilder" /> object to automatically generate Transact-SQL statements for single-table updates if you set the <see cref="P:Microsoft.Data.SqlClient.SqlDataAdapter.SelectCommand" /> property of the <see cref="T:Microsoft.Data.SqlClient.SqlDataAdapter" />. Then, any additional Transact-SQL statements that you do not set are generated by the <see cref="T:Microsoft.Data.SqlClient.SqlCommandBuilder" />.
        </para>
        <para>
          The <see cref="T:Microsoft.Data.SqlClient.SqlCommandBuilder" /> registers itself as a listener for <see cref="E:Microsoft.Data.SqlClient.SqlDataAdapter.RowUpdating" /> events whenever you set the <see cref="P:Microsoft.Data.SqlClient.SqlCommandBuilder.DataAdapter" /> property. You can only associate one <see cref="T:Microsoft.Data.SqlClient.SqlDataAdapter" /> or <see cref="T:Microsoft.Data.SqlClient.SqlCommandBuilder" /> object with each other at one time.
        </para>
        <para>
          To generate INSERT, UPDATE, or DELETE statements, the <see cref="T:Microsoft.Data.SqlClient.SqlCommandBuilder" /> uses the <see cref="P:Microsoft.Data.SqlClient.SqlDataAdapter.SelectCommand" /> property to retrieve a required set of metadata automatically. If you change the <see cref="P:Microsoft.Data.SqlClient.SqlDataAdapter.SelectCommand" /> after the metadata has been retrieved, such as after the first update, you should call the <see cref="M:System.Data.Common.DbCommandBuilder.RefreshSchema" /> method to update the metadata.
        </para>
        <para>
          The <see cref="P:Microsoft.Data.SqlClient.SqlDataAdapter.SelectCommand" /> must also return at least one primary key or unique column. If none are present, an <see cref="T:System.InvalidOperationException" /> exception is generated, and the commands are not generated.
        </para>
        <para>
          The <see cref="T:Microsoft.Data.SqlClient.SqlCommandBuilder" /> also uses the <see cref="P:Microsoft.Data.SqlClient.SqlCommand.Connection" />, <see cref="P:Microsoft.Data.SqlClient.SqlCommand.CommandTimeout" />, and <see cref="P:Microsoft.Data.SqlClient.SqlCommand.Transaction" /> properties referenced by the <see cref="P:Microsoft.Data.SqlClient.SqlDataAdapter.SelectCommand" />. The user should call <see cref="M:System.Data.Common.DbCommandBuilder.RefreshSchema" /> if one or more of these properties are modified, or if the <see cref="P:Microsoft.Data.SqlClient.SqlDataAdapter.SelectCommand" /> itself is replaced. Otherwise the <see cref="P:Microsoft.Data.SqlClient.SqlDataAdapter.InsertCommand" />, <see cref="P:Microsoft.Data.SqlClient.SqlDataAdapter.UpdateCommand" />, and <see cref="P:Microsoft.Data.SqlClient.SqlDataAdapter.DeleteCommand" /> properties retain their previous values.
        </para>
        <para>
          If you call <see cref="M:System.ComponentModel.Component.Dispose" />, the <see cref="T:Microsoft.Data.SqlClient.SqlCommandBuilder" /> is disassociated from the <see cref="T:Microsoft.Data.SqlClient.SqlDataAdapter" />, and the generated commands are no longer used.
        </para>
      </remarks>
      <example>
        <para>
          The following example uses the <see cref="T:Microsoft.Data.SqlClient.SqlCommand" />, along <see cref="T:Microsoft.Data.SqlClient.SqlDataAdapter" /> and <see cref="T:Microsoft.Data.SqlClient.SqlConnection" />, to select rows from a data source. The example is passed a connection string, a query string that is a Transact-SQL SELECT statement, and a string that is the name of the database table. The example then creates a <see cref="T:Microsoft.Data.SqlClient.SqlCommandBuilder" />.
        </para>
        <!-- SqlCommandBuilder #1 -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          namespace SqlCommandBuilderCS
          {
              class Program
              {
                  static void Main()
                  {
                      string cnnst = "";
                      string queryst = "";
                      string tablen = "";
                      DataSet ds = SelectSqlRows(cnnst, queryst, tablen);
                  }
          
                  public static DataSet SelectSqlRows(string connectionString, string queryString, string tableName)
                  {
                      using (SqlConnection connection = new SqlConnection(connectionString))
                      {
                          SqlDataAdapter adapter = new SqlDataAdapter();
                          adapter.SelectCommand = new SqlCommand(queryString, connection);
                          SqlCommandBuilder builder = new SqlCommandBuilder(adapter);
          
                          connection.Open();
          
                          DataSet dataSet = new DataSet();
                          adapter.Fill(dataSet, tableName);
          
                          // code to modify data in DataSet here
          
                          builder.GetUpdateCommand();
          
                          // Without the SqlCommandBuilder this line would fail
                          adapter.Update(dataSet, tableName);
          
                          return dataSet;
                      }
                  }
              }
          }
        </code>
      </example>
    </SqlCommandBuilder>
    <ctor1>
      <summary>
        Initializes a new instance of the <see cref="T:Microsoft.Data.SqlClient.SqlCommandBuilder" /> class.
      </summary>
    </ctor1>
    <ctor2>
      <param name="adapter">
        The name of the <see cref="T:Microsoft.Data.SqlClient.SqlDataAdapter" />.
      </param>
      <summary>
        Initializes a new instance of the <see cref="T:Microsoft.Data.SqlClient.SqlCommandBuilder" /> class with the associated <see cref="T:Microsoft.Data.SqlClient.SqlDataAdapter" /> object.
      </summary>
      <remarks>
        <para>
          The <see cref="T:Microsoft.Data.SqlClient.SqlCommandBuilder" /> registers itself as a listener for <see cref="E:Microsoft.Data.SqlClient.SqlDataAdapter.RowUpdating" /> events that are generated by the <see cref="T:Microsoft.Data.SqlClient.SqlDataAdapter" /> specified in this property.
        </para>
        <para>
          When you create a new instance of <see cref="T:Microsoft.Data.SqlClient.SqlCommandBuilder" />, any existing <see cref="T:Microsoft.Data.SqlClient.SqlCommandBuilder" /> associated with this <see cref="T:Microsoft.Data.SqlClient.SqlDataAdapter" /> is released.
        </para>
      </remarks>
    </ctor2>
    <ApplyParameterInfo>
      <param name="parameter">
        To be added.
      </param>
      <param name="datarow">
        To be added.
      </param>
      <param name="statementType">
        To be added.
      </param>
      <param name="whereClause">
        To be added.
      </param>
      <summary>
        To be added.
      </summary>
      <remarks>
        To be added.
      </remarks>
    </ApplyParameterInfo>
    <CatalogLocation>
      <summary>
        Sets or gets the <see cref="T:System.Data.Common.CatalogLocation" /> for an instance of the <see cref="T:Microsoft.Data.SqlClient.SqlCommandBuilder" /> class.
      </summary>
      <value>
        A <see cref="T:System.Data.Common.CatalogLocation" /> object.
      </value>
    </CatalogLocation>
    <CatalogSeparator>
      <summary>
        Sets or gets a string used as the catalog separator for an instance of the <see cref="T:Microsoft.Data.SqlClient.SqlCommandBuilder" /> class.
      </summary>
      <value>
        A string that indicates the catalog separator for use with an instance of the <see cref="T:Microsoft.Data.SqlClient.SqlCommandBuilder" /> class.
      </value>
    </CatalogSeparator>
    <DataAdapter>
      <summary>
        Gets or sets a <see cref="T:Microsoft.Data.SqlClient.SqlDataAdapter" /> object for which Transact-SQL statements are automatically generated.
      </summary>
      <value>
        A <see cref="T:Microsoft.Data.SqlClient.SqlDataAdapter" /> object.
      </value>
      <remarks>
        <para>
          The <see cref="T:Microsoft.Data.SqlClient.SqlCommandBuilder" /> registers itself as a listener for <see cref="E:Microsoft.Data.SqlClient.SqlDataAdapter.RowUpdating" /> events that are generated by the <see cref="T:Microsoft.Data.SqlClient.SqlDataAdapter" /> specified in this property.
        </para>
        <para>
          When you create a new instance of <see cref="T:Microsoft.Data.SqlClient.SqlCommandBuilder" />, any existing <see cref="T:Microsoft.Data.SqlClient.SqlCommandBuilder" /> associated with this <see cref="T:Microsoft.Data.SqlClient.SqlDataAdapter" /> is released.
        </para>
      </remarks>
    </DataAdapter>
    <DeriveParameters>
      <param name="command">
        The <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> referencing the stored procedure from which the parameter information is to be derived. The derived parameters are added to the <see cref="P:Microsoft.Data.SqlClient.SqlCommand.Parameters" /> collection of the <see cref="T:Microsoft.Data.SqlClient.SqlCommand" />.
      </param>
      <summary>
        Retrieves parameter information from the stored procedure specified in the <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> and populates the <see cref="P:Microsoft.Data.SqlClient.SqlCommand.Parameters" /> collection of the specified <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object.
      </summary>
      <remarks>
        <para>
          <c>DeriveParameters</c> overwrites any existing parameter information for the <see cref="T:Microsoft.Data.SqlClient.SqlCommand" />.
        </para>
        <para>
          <c>DeriveParameters</c> requires an additional call to the database to obtain the information. If the parameter information is known in advance, it is more efficient to populate the parameters collection by setting the information explicitly.
        </para>
        <para>
          You can only use <c>DeriveParameters</c> with stored procedures. You cannot use <c>DeriveParameters</c> with extended stored procedures. You cannot use <c>DeriveParameters</c> to populate the <see cref="T:Microsoft.Data.SqlClient.SqlParameterCollection" /> with arbitrary Transact-SQL statements, such as a parameterized SELECT statement.
        </para>
        <para>
          For more information, see <see href="/sql/connect/ado-net/configure-parameters">Configuring parameters</see>.
        </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">
        The command text is not a valid stored procedure name.
      </exception>
    </DeriveParameters>
    <Dispose>
      <param name="disposing">
        To be added.
      </param>
      <summary>
        To be added.
      </summary>
      <remarks>
        To be added.
      </remarks>
    </Dispose>
    <GetDeleteCommand2>
      <summary>
        Gets the automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object required to perform deletions on the database.
      </summary>
      <returns>
        The automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object required to perform deletions.
      </returns>
      <remarks>
        <para>
          An application can use the <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand" /> method for informational or troubleshooting purposes because it returns the <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object to be executed.
        </para>
        <para>
          You can also use <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand" /> as the basis of a modified command. For example, you might call <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand" /> and modify the <see cref="P:Microsoft.Data.SqlClient.SqlCommand.CommandTimeout" /> value, and then explicitly set that on the <see cref="T:Microsoft.Data.SqlClient.SqlDataAdapter" />.
        </para>
        <para>
          After the SQL statement is first generated, the application must explicitly call <see cref="M:System.Data.Common.DbCommandBuilder.RefreshSchema" /> if it changes the statement in any way. Otherwise, the <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand" /> will still be using information from the previous statement, which might not be correct. The SQL statements are first generated when the application calls either <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> or <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand" />.
        </para>
        <para>
          For more information, see <see href="/sql/connect/ado-net/generate-commands-with-commandbuilders">Generating Commands with CommandBuilders</see>.
        </para>
      </remarks>
    </GetDeleteCommand2>
    <GetDeleteCommand3>
      <param name="useColumnsForParameterNames">
        If <see langword="true" />, generate parameter names matching column names if possible. If <see langword="false" />, generate <c>@p1</c>, <c>@p2</c>, and so on.
      </param>
      <summary>
        Gets the automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object that is required to perform deletions on the database.
      </summary>
      <returns>
        The automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object that is required to perform deletions.
      </returns>
      <remarks>
        <para>
          An application can use the <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand" /> method for informational or troubleshooting purposes because it returns the <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object to be executed.
        </para>
        <para>
          You can also use <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand" /> as the basis of a modified command. For example, you might call <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand" /> and modify the <see cref="P:Microsoft.Data.SqlClient.SqlCommand.CommandTimeout" /> value, and then explicitly set that on the <see cref="T:Microsoft.Data.SqlClient.SqlDataAdapter" />.
        </para>
        <para>
          After the SQL statement is first generated, the application must explicitly call <see cref="M:System.Data.Common.DbCommandBuilder.RefreshSchema" /> if it changes the statement in any way. Otherwise, the <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand" /> will still be using information from the previous statement, which might not be correct. The SQL statements are first generated when the application calls either <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> or <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand" />.
        </para>
        <para>
          The default behavior, when generating parameter names, is to use <c>@p1</c>, <c>@p2</c>, and so on for the various parameters. Passing <see langword="true" /> for the <paramref name="useColumnsForParameterNames" /> parameter lets you force the command builder to generate parameters based on the column names instead. This succeeds only if the following conditions are met:
        </para>
        <list type="bullet">
          <item>
            The <see cref="F:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength" /> returned from the <b>GetSchema</b> method call and found in the <see cref="F:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation" /> collection has been specified and its length is equal to or greater than the generated parameter name.
          </item>
          <item>
            The generated parameter name meets the criteria specified in the <see cref="F:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern" /> returned from the <b>GetSchema</b> method call and found in the <see cref="F:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation" /> collection regular expression.
          </item>
          <item>
            A <see cref="F:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat" /> returned from the <b>GetSchema</b> method call and found in the <see cref="F:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation" /> collection is specified.
          </item>
        </list>
        <para>
          For more information, see <see href="/sql/connect/ado-net/generate-commands-with-commandbuilders">Generating Commands with CommandBuilders</see>.
        </para>
      </remarks>
    </GetDeleteCommand3>
    <GetInsertCommand2>
      <summary>
        Gets the automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object required to perform insertions on the database.
      </summary>
      <returns>
        The automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object required to perform insertions.
      </returns>
      <remarks>
        <para>
          An application can use the <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand" /> method for informational or troubleshooting purposes because it returns the <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object to be executed.
        </para>
        <para>
          You can also use <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand" /> as the basis of a modified command. For example, you might call <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand" /> and modify the <see cref="P:Microsoft.Data.SqlClient.SqlCommand.CommandTimeout" /> value, and then explicitly set that on the <see cref="T:Microsoft.Data.SqlClient.SqlDataAdapter" />.
        </para>
        <para>
          After the Transact-SQL statement is first generated, the application must explicitly call <see cref="M:System.Data.Common.DbCommandBuilder.RefreshSchema" /> if it changes the statement in any way. Otherwise, the <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand" /> will still be using information from the previous statement, which might not be correct. The Transact-SQL statements are first generated when the application calls either <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> or <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand" />.
        </para>
        <para>
          For more information, see <see href="/sql/connect/ado-net/generate-commands-with-commandbuilders">Generating Commands with CommandBuilders</see>.
        </para>
      </remarks>
    </GetInsertCommand2>
    <GetInsertCommand3>
      <param name="useColumnsForParameterNames">
        If <see langword="true" />, generate parameter names matching column names if possible. If <see langword="false" />, generate <c>@p1</c>, <c>@p2</c>, and so on.
      </param>
      <summary>
        Gets the automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object that is required to perform insertions on the database.
      </summary>
      <returns>
        The automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object that is required to perform insertions.
      </returns>
      <remarks>
        <para>
          An application can use the <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand" /> method for informational or troubleshooting purposes because it returns the <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object to be executed.
        </para>
        <para>
          You can also use <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand" /> as the basis of a modified command. For example, you might call <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand" /> and modify the <see cref="M:Microsoft.Data.SqlClient.SqlCommand.CommandTimeout" /> value, and then explicitly set that on the <see cref="T:Microsoft.Data.SqlClient.SqlDataAdapter" />.
        </para>
        <para>
          After the Transact-SQL statement is first generated, the application must explicitly call <see cref="M:System.Data.Common.DbCommandBuilder.RefreshSchema" /> if it changes the statement in any way. Otherwise, the <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand" /> will still be using information from the previous statement, which might not be correct. The Transact-SQL statements are first generated when the application calls either <see cref="M:System.Data.Common.DbDataAdapter.Update" /> or <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand" />.
        </para>
        <para>
          The default behavior, when generating parameter names, is to use <c>@p1</c>, <c>@p2</c>, and so on for the various parameters. Passing <see langword="true" /> for the <paramref name="useColumnsForParameterNames" /> parameter lets you force the command builder to generate parameters based on the column names instead. This succeeds only if the following conditions are met:
        </para>
        <list type="bullet">
          <item>
            The <see cref="F:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength" /> returned from the <b>GetSchema</b> method call and found in the <see cref="F:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation" /> collection has been specified and its length is equal to or greater than the generated parameter name.
          </item>
          <item>
            The generated parameter name meets the criteria specified in the <see cref="F:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern" /> returned from the <b>GetSchema</b> method call and found in the <see cref="F:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation" /> collection regular expression.
          </item>
          <item>
            A <see cref="F:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat" /> returned from the <b>GetSchema</b> method call and found in the <see cref="F:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation" /> collection is specified.
          </item>
        </list>
        <para>
          For more information, see <see href="/sql/connect/ado-net/generate-commands-with-commandbuilders">Generating Commands with CommandBuilders</see>.
        </para>
      </remarks>
    </GetInsertCommand3>
    <GetParameterName1>
      <param name="parameterOrdinal">
        To be added.
      </param>
      <summary>
        To be added.
      </summary>
      <returns>
        To be added.
      </returns>
      <remarks>
        To be added.
      </remarks>
    </GetParameterName1>
    <GetParameterName2>
      <param name="parameterName">
        To be added.
      </param>
      <summary>
        To be added.
      </summary>
      <returns>
        To be added.
      </returns>
      <remarks>
        To be added.
      </remarks>
    </GetParameterName2>
    <GetParameterPlaceholder>
      <param name="parameterOrdinal">
        To be added.
      </param>
      <summary>
        To be added.
      </summary>
      <returns>
        To be added.
      </returns>
      <remarks>
        To be added.
      </remarks>
    </GetParameterPlaceholder>
    <GetSchemaTable>
      <param name="srcCommand">
        To be added.
      </param>
      <summary>
        To be added.
      </summary>
      <returns>
        To be added.
      </returns>
      <remarks>
        To be added.
      </remarks>
    </GetSchemaTable>
    <GetUpdateCommand2>
      <summary>
        Gets the automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object required to perform updates on the database.
      </summary>
      <returns>
        The automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object that is required to perform updates.
      </returns>
      <remarks>
        <para>
          An application can use the <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand" /> method for informational or troubleshooting purposes because it returns the <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object to be executed.
        </para>
        <para>
          You can also use <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand" /> as the basis of a modified command. For example, you might call <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand" /> and modify the <see cref="P:Microsoft.Data.SqlClient.SqlCommand.CommandTimeout" /> value, and then explicitly set that on the <see cref="T:Microsoft.Data.SqlClient.SqlDataAdapter" />.
        </para>
        <para>
          After the Transact-SQL statement is first generated, the application must explicitly call <see cref="M:System.Data.Common.DbCommandBuilder.RefreshSchema" /> if it changes the statement in any way. Otherwise, the <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand" /> will still be using information from the previous statement, which might not be correct. The Transact-SQL statements are first generated when the application calls either <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> or <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand" />.
        </para>
        <para>
          For more information, see <see href="/sql/connect/ado-net/generate-commands-with-commandbuilders">Generating Commands with CommandBuilders</see>.
        </para>
      </remarks>
    </GetUpdateCommand2>
    <GetUpdateCommand3>
      <param name="useColumnsForParameterNames">
        If <see langword="true" />, generate parameter names matching column names if possible. If <see langword="false" />, generate <c>@p1</c>, <c>@p2</c>, and so on.
      </param>
      <summary>
        Gets the automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object required to perform updates on the database.
      </summary>
      <returns>
        The automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object required to perform updates.
      </returns>
      <remarks>
        <para>
          An application can use the <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand" /> method for informational or troubleshooting purposes because it returns the <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object to be executed.
        </para>
        <para>
          You can also use <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand" /> as the basis of a modified command. For example, you might call <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand" /> and modify the <see cref="P:Microsoft.Data.SqlClient.SqlCommand.CommandTimeout" /> value, and then explicitly set that on the <see cref="T:Microsoft.Data.SqlClient.SqlDataAdapter" />.
        </para>
        <para>
          After the Transact-SQL statement is first generated, the application must explicitly call <see cref="M:System.Data.Common.DbCommandBuilder.RefreshSchema" /> if it changes the statement in any way. Otherwise, the <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand" /> will still be using information from the previous statement, which might not be correct. The Transact-SQL statements are first generated when the application calls either <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> or <see cref="M:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand" />.
        </para>
        <para>
          The default behavior, when generating parameter names, is to use <c>@p1</c>, <c>@p2</c>, and so on for the various parameters. Passing <see langword="true" /> for the <paramref name="useColumnsForParameterNames" /> parameter lets you force the command builder to generate parameters based on the column names instead. This succeeds only if the following conditions are met:
        </para>
        <list type="bullet">
          <item>
            The <see cref="F:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength" /> returned from the <b>GetSchema</b> method call and found in the <see cref="F:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation" /> collection has been specified and its length is equal to or greater than the generated parameter name.
          </item>
          <item>
            The generated parameter name meets the criteria specified in the <see cref="F:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern" /> returned from the <b>GetSchema</b> method call and found in the <see cref="F:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation" /> collection regular expression.
          </item>
          <item>
            A <see cref="F:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat" /> returned from the <b>GetSchema</b> method call and found in the <see cref="F:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation" /> collection is specified.
          </item>
        </list>
        <para>
          For more information, see <see href="/sql/connect/ado-net/generate-commands-with-commandbuilders">Generating Commands with CommandBuilders</see>.
        </para>
      </remarks>
    </GetUpdateCommand3>
    <InitializeCommand>
      <param name="command">
        To be added.
      </param>
      <summary>
        To be added.
      </summary>
      <returns>
        To be added.
      </returns>
      <remarks>
        To be added.
      </remarks>
    </InitializeCommand>
    <QuoteIdentifier>
      <param name="unquotedIdentifier">
        To be added.
      </param>
      <summary>
        To be added.
      </summary>
      <returns>
        To be added.
      </returns>
      <remarks>
        To be added.
      </remarks>
    </QuoteIdentifier>
    <QuotePrefix>
      <summary>
        Gets or sets the starting character or characters to use when specifying SQL Server database objects, such as tables or columns, whose names contain characters such as spaces or reserved tokens.
      </summary>
      <value>
        The starting character or characters to use. The default is an empty string.
      </value>
      <remarks>
        <note type="note">
          Although you cannot change the <see cref="P:Microsoft.Data.SqlClient.SqlCommandBuilder.QuotePrefix" /> or <see cref="P:Microsoft.Data.SqlClient.SqlCommandBuilder.QuoteSuffix" /> properties after an insert, update, or delete command has been generated, you can change their settings after calling the <c>Update</c> method of a DataAdapter.
        </note>
      </remarks>
      <exception cref="T:System.InvalidOperationException">
        This property cannot be changed after an INSERT, UPDATE, or DELETE command has been generated.
      </exception>
    </QuotePrefix>
    <QuoteSuffix>
      <summary>
        Gets or sets the ending character or characters to use when specifying SQL Server database objects, such as tables or columns, whose names contain characters such as spaces or reserved tokens.
      </summary>
      <value>
        The ending character or characters to use. The default is an empty string.
      </value>
      <remarks>
        <note type="note">
          Although you cannot change the <see cref="P:Microsoft.Data.SqlClient.SqlCommandBuilder.QuotePrefix" /> or <see cref="P:Microsoft.Data.SqlClient.SqlCommandBuilder.QuoteSuffix" /> properties after an insert, update, or delete operation has been generated, you can change their settings after calling the <c>Update</c> method of a DataAdapter.
        </note>
      </remarks>
      <exception cref="T:System.InvalidOperationException">
        This property cannot be changed after an insert, update, or delete command has been generated.
      </exception>
    </QuoteSuffix>
    <SchemaSeparator>
      <summary>
        Gets or sets the character to be used for the separator between the schema identifier and any other identifiers.
      </summary>
      <value>
        The character to be used as the schema separator.
      </value>
      <remarks>
        <para>
          Generally, database servers indicate the schema for a identifier by separating the schema name from the identifier with some character. For example, SQL Server uses a period, creating complete identifiers such as Person.CustomerName, where "Person" is the schema name and "CustomerName" is the identifier. Setting this property lets developers modify this behavior.
        </para>
      </remarks>
    </SchemaSeparator>
    <SetRowUpdatingHandler>
      <param name="adapter">
        To be added.
      </param>
      <summary>
        To be added.
      </summary>
      <remarks>
        To be added.
      </remarks>
    </SetRowUpdatingHandler>
    <UnquoteIdentifier>
      <param name="quotedIdentifier">
        The identifier that will have its embedded quotes removed.
      </param>
      <summary>
        Given a quoted identifier, returns the correct unquoted form of that identifier. This includes correctly unescaping any embedded quotes in the identifier.
      </summary>
      <returns>
        The unquoted identifier, with embedded quotes properly unescaped.
      </returns>
      <seealso href="/sql/connect/ado-net/retrieving-modifying-data">
        Connecting and Retrieving Data in ADO.NET
      </seealso>
      <seealso type="Article" href="/sql/connect/ado-net/sql/">
        Using the .NET Framework Data Provider for SQL Server
      </seealso>
      <seealso type="Article" href="/sql/connect/ado-net/overview-sqlclient-driver">
        Overview of the SqlClient driver
      </seealso>
    </UnquoteIdentifier>
  </members>
</docs>

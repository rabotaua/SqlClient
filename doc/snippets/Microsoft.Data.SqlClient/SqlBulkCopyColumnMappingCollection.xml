<docs>
  <members name="SqlBulkCopyColumnMappingCollection">
    <SqlBulkCopyColumnMappingCollection>
      <summary>
        Collection of <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> objects that inherits from <see cref="T:System.Collections.CollectionBase" />.
      </summary>
      <remarks>
        <para>
          Column mappings define the mapping between data source and the target table.
        </para>
        <para>
          If mappings are not defined - that is, the <see cref="P:Microsoft.Data.SqlClient.SqlBulkCopy.ColumnMappings" /> collection is empty - the columns are mapped implicitly based on ordinal position.  For this to work, source and target schemas must match. If they do not, an <see cref="T:System.InvalidOperationException" /> is thrown.
        </para>
        <para>
          If the <see cref="P:Microsoft.Data.SqlClient.SqlBulkCopy.ColumnMappings" /> collection is not empty, not every column present in the data source has to be specified. Those not mapped by the collection are ignored.
        </para>
        <para>
          You can refer to source and target columns by either name or ordinal. You can mix by-name and by-ordinal column references in the same mappings collection.
        </para>
      </remarks>
      <example>
        <para>
          The following example bulk copies data from a source table in the <b>AdventureWorks</b> sample database to a destination table in the same database.  Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> are added to the <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection" /> for the <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopy" /> object to create a column map for the bulk copy.
        </para>
        <note type="important">
          This sample will not run unless you have created the work tables as described in <see href="/sql/connect/ado-net/sql/bulk-copy-example-setup">Bulk Copy Example Setup</see>.
        </note>
        <para>
          This code is provided to demonstrate the syntax for using <b>SqlBulkCopy</b> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <c>INSERT … SELECT</c> statement to copy the data.
        </para>
        <!-- SqlBulkCopy_ColumnMappingCollection -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  string connectionString = GetConnectionString();
                  // Open a sourceConnection to the AdventureWorks database.
                  using (SqlConnection sourceConnection = new SqlConnection(connectionString))
                  {
                      sourceConnection.Open();
          
                      // Perform an initial count on the destination table.
                      SqlCommand commandRowCount = new SqlCommand(
                          "SELECT COUNT(*) FROM " +
                          "dbo.BulkCopyDemoDifferentColumns;",
                          sourceConnection);
                      long countStart = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Starting row count = {0}", countStart);
          
                      // Get data from the source table as a SqlDataReader.
                      SqlCommand commandSourceData = new SqlCommand(
                          "SELECT ProductID, Name, " +
                          "ProductNumber " +
                          "FROM Production.Product;", sourceConnection);
                      SqlDataReader reader =
                          commandSourceData.ExecuteReader();
          
                      // Set up the bulk copy object. 
                      using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connectionString))
                      {
                          bulkCopy.DestinationTableName =
                              "dbo.BulkCopyDemoDifferentColumns";
          
                          // The column order in the source doesn't match the order 
                          // in the destination, so ColumnMappings must be defined.
                          bulkCopy.ColumnMappings.Add("ProductID", "ProdID");
                          bulkCopy.ColumnMappings.Add("Name", "ProdName");
                          bulkCopy.ColumnMappings.Add("ProductNumber", "ProdNum");
          
                          // Write from the source to the destination.
                          try
                          {
                              bulkCopy.WriteToServer(reader);
                          }
                          catch (Exception ex)
                          {
                              Console.WriteLine(ex.Message);
                          }
                          finally
                          {
                              // Close the SqlDataReader. The SqlBulkCopy
                              // object is automatically closed at the end
                              // of the using block.
                              reader.Close();
                          }
                      }
          
                      // Perform a final count on the destination 
                      // table to see how many rows were added.
                      long countEnd = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Ending row count = {0}", countEnd);
                      Console.WriteLine("{0} rows were added.", countEnd - countStart);
                      Console.WriteLine("Press Enter to finish.");
                      Console.ReadLine();
                  }
              }
          
              private static string GetConnectionString()
              {
                  // To avoid storing the sourceConnection string in your code,
                  // you can retrieve it from a configuration file.
                  return "Data Source=(local); " +
                         " Integrated Security=true;" +
                         "Initial Catalog=AdventureWorks;";
              }
          }
        </code>
      </example>
    </SqlBulkCopyColumnMappingCollection>
    <Add name="bulkCopyColumnMappingParameter">
      <param name="bulkCopyColumnMapping">
        The <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> object that describes the mapping to be added to the collection.
      </param>
      <summary>
        Adds the specified mapping to the <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection" />.
      </summary>
      <returns>
        A <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> object.
      </returns>
      <example>
        <para>
          The following example bulk copies data from a source table in the <b>AdventureWorks</b> sample database to a destination table in the same database.  Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> objects are used to create a column map for the bulk copy.
        </para>
        <note type="important">
          This sample will not run unless you have created the work tables as described in <see href="/sql/connect/ado-net/sql/bulk-copy-example-setup">Bulk Copy Example Setup</see>.
        </note>
        <para>
          This code is provided to demonstrate the syntax for using <b>SqlBulkCopy</b> only. If the source and destination tables are in the same SQL Server instance,  it is easier and faster to use a Transact-SQL <c>INSERT … SELECT</c> statement to copy the data.
        </para>
        <!-- SqlBulkCopy_ColumnMapping -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  string connectionString = GetConnectionString();
                  // Open a sourceConnection to the AdventureWorks database.
                  using (SqlConnection sourceConnection = new SqlConnection(connectionString))
                  {
                      sourceConnection.Open();
          
                      // Perform an initial count on the destination table.
                      SqlCommand commandRowCount = new SqlCommand(
                          "SELECT COUNT(*) FROM " +
                          "dbo.BulkCopyDemoDifferentColumns;",
                          sourceConnection);
                      long countStart = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Starting row count = {0}", countStart);
          
                      // Get data from the source table as a SqlDataReader.
                      SqlCommand commandSourceData = new SqlCommand(
                          "SELECT ProductID, Name, " +
                          "ProductNumber " +
                          "FROM Production.Product;", sourceConnection);
                      SqlDataReader reader =
                          commandSourceData.ExecuteReader();
          
                      // Set up the bulk copy object.
                      using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connectionString))
                      {
                          bulkCopy.DestinationTableName =
                              "dbo.BulkCopyDemoDifferentColumns";
          
                          // Set up the column mappings by name.
                          SqlBulkCopyColumnMapping mapID =
                              new SqlBulkCopyColumnMapping("ProductID", "ProdID");
                          bulkCopy.ColumnMappings.Add(mapID);
          
                          SqlBulkCopyColumnMapping mapName =
                              new SqlBulkCopyColumnMapping("Name", "ProdName");
                          bulkCopy.ColumnMappings.Add(mapName);
          
                          SqlBulkCopyColumnMapping mapNumber =
                              new SqlBulkCopyColumnMapping("ProductNumber", "ProdNum");
                          bulkCopy.ColumnMappings.Add(mapNumber);
          
                          // Write from the source to the destination.
                          try
                          {
                              bulkCopy.WriteToServer(reader);
                          }
                          catch (Exception ex)
                          {
                              Console.WriteLine(ex.Message);
                          }
                          finally
                          {
                              // Close the SqlDataReader. The SqlBulkCopy
                              // object is automatically closed at the end
                              // of the using block.
                              reader.Close();
                          }
                      }
          
                      // Perform a final count on the destination 
                      // table to see how many rows were added.
                      long countEnd = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Ending row count = {0}", countEnd);
                      Console.WriteLine("{0} rows were added.", countEnd - countStart);
                      Console.WriteLine("Press Enter to finish.");
                      Console.ReadLine();
                  }
              }
          
              private static string GetConnectionString()
              {
                  // To avoid storing the sourceConnection string in your code,
                  // you can retrieve it from a configuration file.
                  return "Data Source=(local); " +
                         " Integrated Security=true;" +
                         "Initial Catalog=AdventureWorks;";
              }
          }
        </code>
      </example>
    </Add>
    <Add name="sourceColumnIndexIntegerAndDestinationColumnIndexInteger">
      <param name="sourceColumnIndex">
        The ordinal position of the source column within the data source.
      </param>
      <param name="destinationColumnIndex">
        The ordinal position of the destination column within the destination table.
      </param>
      <summary>
        Creates a new <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> and adds it to the collection, using ordinals to specify both source and destination columns.
      </summary>
      <returns>
        A column mapping.
      </returns>
      <remarks>
        Mappings in a collection must be uniform: either all integer/integer pairs, all string/string pairs, all integer/string pairs, or all string/integer pairs. If you try to add a mapping that is different from others already in the collection, an <see cref="T:System.InvalidOperationException" /> is thrown.
      </remarks>
      <example>
        <para>
          The following example bulk copies data from a source table in the <b>AdventureWorks</b> sample database to a destination table in the same database.  Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> objects are used to create a column map for the bulk copy using the ordinal position of the source and destination columns.
        </para>
        <note type="important">
          This sample will not run unless you have created the work tables as described in <see href="/sql/connect/ado-net/sql/bulk-copy-example-setup">Bulk Copy Example Setup</see>.
        </note>
        <para>
          This code is provided to demonstrate the syntax for using <b>SqlBulkCopy</b> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <c>INSERT … SELECT</c> statement to copy the data.
        </para>
        <!-- SqlBulkCopy_ColumnMappingCollectionOrdinal -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  string connectionString = GetConnectionString();
                  // Open a sourceConnection to the AdventureWorks database.
                  using (SqlConnection sourceConnection = new SqlConnection(connectionString))
                  {
                      sourceConnection.Open();
          
                      // Perform an initial count on the destination table.
                      SqlCommand commandRowCount = new SqlCommand(
                          "SELECT COUNT(*) FROM " +
                          "dbo.BulkCopyDemoDifferentColumns;",
                          sourceConnection);
                      long countStart = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Starting row count = {0}", countStart);
          
                      // Get data from the source table as a SqlDataReader.
                      SqlCommand commandSourceData = new SqlCommand(
                          "SELECT ProductID, Name, " +
                          "ProductNumber " +
                          "FROM Production.Product;", sourceConnection);
                      SqlDataReader reader =
                          commandSourceData.ExecuteReader();
          
                      // Set up the bulk copy object. 
                      using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connectionString))
                      {
                          bulkCopy.DestinationTableName =
                              "dbo.BulkCopyDemoDifferentColumns";
          
                          // The column order in the source doesn't match the order 
                          // in the destination, so ColumnMappings must be defined.
                          bulkCopy.ColumnMappings.Add(0, 0);
                          bulkCopy.ColumnMappings.Add(1, 2);
                          bulkCopy.ColumnMappings.Add(2, 1);
          
                          // Write from the source to the destination.
                          try
                          {
                              bulkCopy.WriteToServer(reader);
                          }
                          catch (Exception ex)
                          {
                              Console.WriteLine(ex.Message);
                          }
                          finally
                          {
                              // Close the SqlDataReader. The SqlBulkCopy
                              // object is automatically closed at the end
                              // of the using block.
                              reader.Close();
                          }
                      }
          
                      // Perform a final count on the destination 
                      // table to see how many rows were added.
                      long countEnd = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Ending row count = {0}", countEnd);
                      Console.WriteLine("{0} rows were added.", countEnd - countStart);
                      Console.WriteLine("Press Enter to finish.");
                      Console.ReadLine();
                  }
              }
          
              private static string GetConnectionString()
              {
                  // To avoid storing the sourceConnection string in your code,
                  // you can retrieve it from a configuration file.
                  return "Data Source=(local); " +
                         " Integrated Security=true;" +
                         "Initial Catalog=AdventureWorks;";
              }
          }
        </code>
      </example>
    </Add>
    <Add name="sourceColumnIndexIntegerAndDestinationColumnString">
      <param name="sourceColumnIndex">
        The ordinal position of the source column within the data source.
      </param>
      <param name="destinationColumn">
        The name of the destination column within the destination table.
      </param>
      <summary>
        Creates a new <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> and adds it to the collection, using an ordinal for the source column and a string for the destination column.
      </summary>
      <returns>
        A column mapping.
      </returns>
      <remarks>
        Mappings in a collection must be uniform: either all integer/integer pairs, all string/string pairs, all integer/string pairs, or all string/integer pairs.  If you try to add a mapping that is different from others already in the collection, an <see cref="T:System.InvalidOperationException" /> is thrown.
      </remarks>
      <example>
        <para>
          The following example bulk copies data from a source table in the <b>AdventureWorks</b> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> objects are used to create a column map for the bulk copy.
        </para>
        <note type="important">
          This sample will not run unless you have created the work tables as described in <see href="/sql/connect/ado-net/sql/bulk-copy-example-setup">Bulk Copy Example Setup</see>.
        </note>
        <para>
          This code is provided to demonstrate the syntax for using <b>SqlBulkCopy</b> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <c>INSERT … SELECT</c> statement to copy the data.
        </para>
        <!-- SqlBulkCopy_ColumnMappingIndexColName -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  string connectionString = GetConnectionString();
                  // Open a sourceConnection to the AdventureWorks database.
                  using (SqlConnection sourceConnection = new SqlConnection(connectionString))
                  {
                      sourceConnection.Open();
          
                      // Perform an initial count on the destination table.
                      SqlCommand commandRowCount = new SqlCommand(
                          "SELECT COUNT(*) FROM " +
                          "dbo.BulkCopyDemoDifferentColumns;",
                          sourceConnection);
                      long countStart = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Starting row count = {0}", countStart);
          
                      // Get data from the source table as a SqlDataReader.
                      SqlCommand commandSourceData = new SqlCommand(
                          "SELECT ProductID, Name, " +
                          "ProductNumber " +
                          "FROM Production.Product;", sourceConnection);
                      SqlDataReader reader =
                          commandSourceData.ExecuteReader();
          
                      // Set up the bulk copy object. 
                      using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connectionString))
                      {
                          bulkCopy.DestinationTableName =
                              "dbo.BulkCopyDemoDifferentColumns";
          
                          // The column order in the source doesn't match the order 
                          // in the destination, so ColumnMappings must be defined.
                          bulkCopy.ColumnMappings.Add(0, 0);
                          bulkCopy.ColumnMappings.Add(1, 2);
                          bulkCopy.ColumnMappings.Add(2, 1);
          
                          // Write from the source to the destination.
                          try
                          {
                              bulkCopy.WriteToServer(reader);
                          }
                          catch (Exception ex)
                          {
                              Console.WriteLine(ex.Message);
                          }
                          finally
                          {
                              // Close the SqlDataReader. The SqlBulkCopy
                              // object is automatically closed at the end
                              // of the using block.
                              reader.Close();
                          }
                      }
          
                      // Perform a final count on the destination 
                      // table to see how many rows were added.
                      long countEnd = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Ending row count = {0}", countEnd);
                      Console.WriteLine("{0} rows were added.", countEnd - countStart);
                      Console.WriteLine("Press Enter to finish.");
                      Console.ReadLine();
                  }
              }
          
              private static string GetConnectionString()
              {
                  // To avoid storing the sourceConnection string in your code,
                  // you can retrieve it from a configuration file.
                  return "Data Source=(local); " +
                         " Integrated Security=true;" +
                         "Initial Catalog=AdventureWorks;";
              }
          }
        </code>
      </example>
    </Add>
    <Add name="sourceColumnStringAndDestinationColumnIndexInteger">
      <param name="sourceColumn">
        The name of the source column within the data source.
      </param>
      <param name="destinationColumnIndex">
        The ordinal position of the destination column within the destination table.
      </param>
      <summary>
        Creates a new <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> and adds it to the collection, using a column name to describe the source column and an ordinal to specify the destination column.
      </summary>
      <returns>
        A column mapping.
      </returns>
      <remarks>
        Mappings in a collection must be uniform: either all integer/integer pairs, all string/string pairs, all integer/string pairs, or all string/integer pairs. If you try to add a mapping that is different from others already in the collection, an <see cref="T:System.InvalidOperationException" /> is thrown.
      </remarks>
      <example>
        <para>
          The following example bulk copies data from a source table in the <b>AdventureWorks</b> sample database to a destination table in the same database.  Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> objects are used to create a column map for the bulk copy.
        </para>
        <note type="important">
          This sample will not run unless you have created the work tables as described in <see href="/sql/connect/ado-net/sql/bulk-copy-example-setup">Bulk Copy Example Setup</see>.
        </note>
        <para>
          This code is provided to demonstrate the syntax for using <b>SqlBulkCopy</b> only. If the source and destination tables are in the same SQL Server instance,  it is easier and faster to use a Transact-SQL <c>INSERT … SELECT</c> statement to copy the data.
        </para>
        <!-- SqlBulkCopy_ColumnMappingColNameIndex -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  string connectionString = GetConnectionString();
                  // Open a sourceConnection to the AdventureWorks database.
                  using (SqlConnection sourceConnection = new SqlConnection(connectionString))
                  {
                      sourceConnection.Open();
          
                      // Perform an initial count on the destination table.
                      SqlCommand commandRowCount = new SqlCommand(
                          "SELECT COUNT(*) FROM " +
                          "dbo.BulkCopyDemoDifferentColumns;",
                          sourceConnection);
                      long countStart = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Starting row count = {0}", countStart);
          
                      // Get data from the source table as a SqlDataReader.
                      SqlCommand commandSourceData = new SqlCommand(
                          "SELECT ProductID, Name, " +
                          "ProductNumber " +
                          "FROM Production.Product;", sourceConnection);
                      SqlDataReader reader =
                          commandSourceData.ExecuteReader();
          
                      // Set up the bulk copy object. 
                      using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connectionString))
                      {
                          bulkCopy.DestinationTableName =
                              "dbo.BulkCopyDemoDifferentColumns";
          
                          // The column order in the source doesn't match the order 
                          // in the destination, so ColumnMappings must be defined.
                          bulkCopy.ColumnMappings.Add(0, 0);
                          bulkCopy.ColumnMappings.Add(1, 2);
                          bulkCopy.ColumnMappings.Add(2, 1);
          
                          // Write from the source to the destination.
                          try
                          {
                              bulkCopy.WriteToServer(reader);
                          }
                          catch (Exception ex)
                          {
                              Console.WriteLine(ex.Message);
                          }
                          finally
                          {
                              // Close the SqlDataReader. The SqlBulkCopy
                              // object is automatically closed at the end
                              // of the using block.
                              reader.Close();
                          }
                      }
          
                      // Perform a final count on the destination 
                      // table to see how many rows were added.
                      long countEnd = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Ending row count = {0}", countEnd);
                      Console.WriteLine("{0} rows were added.", countEnd - countStart);
                      Console.WriteLine("Press Enter to finish.");
                      Console.ReadLine();
                  }
              }
          
              private static string GetConnectionString()
              {
                  // To avoid storing the sourceConnection string in your code,
                  // you can retrieve it from a configuration file.
                  return "Data Source=(local); " +
                         " Integrated Security=true;" +
                         "Initial Catalog=AdventureWorks;";
              }
          }
        </code>
      </example>
    </Add>
    <Add name="sourceColumnStringAndDestinationColumnString">
      <param name="sourceColumn">
        The name of the source column within the data source.
      </param>
      <param name="destinationColumn">
        The name of the destination column within the destination table.
      </param>
      <summary>
        Creates a new <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> and adds it to the collection, using column names to specify both source and destination columns.
      </summary>
      <returns>
        A column mapping.
      </returns>
      <remarks>
        Mappings in a collection must be uniform: either all integer/integer pairs, all string/string pairs, all integer/string pairs, or all string/integer pairs. If you try to add a mapping that is different from others already in the collection, an <see cref="T:System.InvalidOperationException" /> is thrown.
      </remarks>
      <example>
        <para>
          The following example bulk copies data from a source table in the <b>AdventureWorks</b> sample database to a destination table in the same database.  Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. The code creates a <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> object by specifying the column names.
        </para>
        <note type="important">
          This sample will not run unless you have created the work tables as described in <see href="/sql/connect/ado-net/sql/bulk-copy-example-setup">Bulk Copy Example Setup</see>.
        </note>
        <para>
          This code is provided to demonstrate the syntax for using <b>SqlBulkCopy</b> only. If the source and destination tables are in the same SQL Server instance,  it is easier and faster to use a Transact-SQL <c>INSERT … SELECT</c> statement to copy the data.
        </para>
        <!-- SqlBulkCopy_ColumnMappingCollection -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  string connectionString = GetConnectionString();
                  // Open a sourceConnection to the AdventureWorks database.
                  using (SqlConnection sourceConnection = new SqlConnection(connectionString))
                  {
                      sourceConnection.Open();
          
                      // Perform an initial count on the destination table.
                      SqlCommand commandRowCount = new SqlCommand(
                          "SELECT COUNT(*) FROM " +
                          "dbo.BulkCopyDemoDifferentColumns;",
                          sourceConnection);
                      long countStart = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Starting row count = {0}", countStart);
          
                      // Get data from the source table as a SqlDataReader.
                      SqlCommand commandSourceData = new SqlCommand(
                          "SELECT ProductID, Name, " +
                          "ProductNumber " +
                          "FROM Production.Product;", sourceConnection);
                      SqlDataReader reader =
                          commandSourceData.ExecuteReader();
          
                      // Set up the bulk copy object. 
                      using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connectionString))
                      {
                          bulkCopy.DestinationTableName =
                              "dbo.BulkCopyDemoDifferentColumns";
          
                          // The column order in the source doesn't match the order 
                          // in the destination, so ColumnMappings must be defined.
                          bulkCopy.ColumnMappings.Add("ProductID", "ProdID");
                          bulkCopy.ColumnMappings.Add("Name", "ProdName");
                          bulkCopy.ColumnMappings.Add("ProductNumber", "ProdNum");
          
                          // Write from the source to the destination.
                          try
                          {
                              bulkCopy.WriteToServer(reader);
                          }
                          catch (Exception ex)
                          {
                              Console.WriteLine(ex.Message);
                          }
                          finally
                          {
                              // Close the SqlDataReader. The SqlBulkCopy
                              // object is automatically closed at the end
                              // of the using block.
                              reader.Close();
                          }
                      }
          
                      // Perform a final count on the destination 
                      // table to see how many rows were added.
                      long countEnd = System.Convert.ToInt32(
                          commandRowCount.ExecuteScalar());
                      Console.WriteLine("Ending row count = {0}", countEnd);
                      Console.WriteLine("{0} rows were added.", countEnd - countStart);
                      Console.WriteLine("Press Enter to finish.");
                      Console.ReadLine();
                  }
              }
          
              private static string GetConnectionString()
              {
                  // To avoid storing the sourceConnection string in your code,
                  // you can retrieve it from a configuration file.
                  return "Data Source=(local); " +
                         " Integrated Security=true;" +
                         "Initial Catalog=AdventureWorks;";
              }
          }
        </code>
      </example>
    </Add>
    <Clear>
      <summary>
        Clears the contents of the collection.
      </summary>
      <remarks>
        <para>
          The <see cref="M:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Clear" /> method is most commonly used when you use a single <see cref="Microsoft.Data.SqlClient.SqlBulkCopy" /> instance to process more than one bulk copy operation. If you create column mappings for one bulk copy operation, you must clear the <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection" /> after the <see cref="O:Microsoft.Data.SqlClient.SqlBulkCopy.WriteToServer" /> method and before processing the next bulk copy.
        </para>
        <para>
          Performing several bulk copies using the same <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopy" /> instance will usually be more efficient from a performance point of view than using a separate <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopy" /> for each operation.
        </para>
      </remarks>
      <example>
        <para>
          The following example performs two bulk copy operations. The first operation copies sales order header information, and the second copies sales order details. Although not strictly necessary in this example (because the ordinal positions of the source and destination columns do match), the example defines column mappings for each bulk copy operation. The <see cref="M:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Clear" /> method must be used after the first bulk copy is performed and before the next bulk copy's column mappings are defined.
        </para>
        <note type="important">
          This sample will not run unless you have created the work tables as described in <see href="/sql/connect/ado-net/sql/bulk-copy-example-setup">Bulk Copy Example Setup</see>.
        </note>
        <para>
          This code is provided to demonstrate the syntax for using <b>SqlBulkCopy</b> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <c>INSERT … SELECT</c> statement to copy the data.
        </para>
        <!-- SqlBulkCopy_ColumnMappingOrdersDetails -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  string connectionString = GetConnectionString();
                  // Open a connection to the AdventureWorks database.
                  using (SqlConnection connection = new SqlConnection(connectionString))
                  {
                      connection.Open();
          
                      // Empty the destination tables. 
                      SqlCommand deleteHeader = new SqlCommand(
                          "DELETE FROM dbo.BulkCopyDemoOrderHeader;",
                          connection);
                      deleteHeader.ExecuteNonQuery();
                      SqlCommand deleteDetail = new SqlCommand(
                          "DELETE FROM dbo.BulkCopyDemoOrderDetail;",
                          connection);
                      deleteDetail.ExecuteNonQuery();
          
                      // Perform an initial count on the destination
                      //  table with matching columns. 
                      SqlCommand countRowHeader = new SqlCommand(
                          "SELECT COUNT(*) FROM dbo.BulkCopyDemoOrderHeader;",
                          connection);
                      long countStartHeader = System.Convert.ToInt32(
                          countRowHeader.ExecuteScalar());
                      Console.WriteLine(
                          "Starting row count for Header table = {0}",
                          countStartHeader);
          
                      // Perform an initial count on the destination
                      // table with different column positions. 
                      SqlCommand countRowDetail = new SqlCommand(
                          "SELECT COUNT(*) FROM dbo.BulkCopyDemoOrderDetail;",
                          connection);
                      long countStartDetail = System.Convert.ToInt32(
                          countRowDetail.ExecuteScalar());
                      Console.WriteLine(
                          "Starting row count for Detail table = {0}",
                          countStartDetail);
          
                      // Get data from the source table as a SqlDataReader.
                      // The Sales.SalesOrderHeader and Sales.SalesOrderDetail
                      // tables are quite large and could easily cause a timeout
                      // if all data from the tables is added to the destination. 
                      // To keep the example simple and quick, a parameter is  
                      // used to select only orders for a particular account 
                      // as the source for the bulk insert. 
                      SqlCommand headerData = new SqlCommand(
                          "SELECT [SalesOrderID], [OrderDate], " +
                          "[AccountNumber] FROM [Sales].[SalesOrderHeader] " +
                          "WHERE [AccountNumber] = @accountNumber;",
                          connection);
                      SqlParameter parameterAccount = new SqlParameter();
                      parameterAccount.ParameterName = "@accountNumber";
                      parameterAccount.SqlDbType = SqlDbType.NVarChar;
                      parameterAccount.Direction = ParameterDirection.Input;
                      parameterAccount.Value = "10-4020-000034";
                      headerData.Parameters.Add(parameterAccount);
                      SqlDataReader readerHeader = headerData.ExecuteReader();
          
                      // Get the Detail data in a separate connection.
                      using (SqlConnection connection2 = new SqlConnection(connectionString))
                      {
                          connection2.Open();
                          SqlCommand sourceDetailData = new SqlCommand(
                              "SELECT [Sales].[SalesOrderDetail].[SalesOrderID], [SalesOrderDetailID], " +
                              "[OrderQty], [ProductID], [UnitPrice] FROM [Sales].[SalesOrderDetail] " +
                              "INNER JOIN [Sales].[SalesOrderHeader] ON [Sales].[SalesOrderDetail]." +
                              "[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID] " +
                              "WHERE [AccountNumber] = @accountNumber;", connection2);
          
                          SqlParameter accountDetail = new SqlParameter();
                          accountDetail.ParameterName = "@accountNumber";
                          accountDetail.SqlDbType = SqlDbType.NVarChar;
                          accountDetail.Direction = ParameterDirection.Input;
                          accountDetail.Value = "10-4020-000034";
                          sourceDetailData.Parameters.Add(accountDetail);
                          SqlDataReader readerDetail = sourceDetailData.ExecuteReader();
          
                          // Create the SqlBulkCopy object. 
                          using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connectionString))
                          {
                              bulkCopy.DestinationTableName =
                                  "dbo.BulkCopyDemoOrderHeader";
          
                              // Guarantee that columns are mapped correctly by
                              // defining the column mappings for the order.
                              bulkCopy.ColumnMappings.Add("SalesOrderID", "SalesOrderID");
                              bulkCopy.ColumnMappings.Add("OrderDate", "OrderDate");
                              bulkCopy.ColumnMappings.Add("AccountNumber", "AccountNumber");
          
                              // Write readerHeader to the destination.
                              try
                              {
                                  bulkCopy.WriteToServer(readerHeader);
                              }
                              catch (Exception ex)
                              {
                                  Console.WriteLine(ex.Message);
                              }
                              finally
                              {
                                  readerHeader.Close();
                              }
          
                              // Set up the order details destination. 
                              bulkCopy.DestinationTableName = "dbo.BulkCopyDemoOrderDetail";
          
                              // Clear the ColumnMappingCollection.
                              bulkCopy.ColumnMappings.Clear();
          
                              // Add order detail column mappings.
                              bulkCopy.ColumnMappings.Add("SalesOrderID", "SalesOrderID");
                              bulkCopy.ColumnMappings.Add("SalesOrderDetailID", "SalesOrderDetailID");
                              bulkCopy.ColumnMappings.Add("OrderQty", "OrderQty");
                              bulkCopy.ColumnMappings.Add("ProductID", "ProductID");
                              bulkCopy.ColumnMappings.Add("UnitPrice", "UnitPrice");
          
                              // Write readerDetail to the destination.
                              try
                              {
                                  bulkCopy.WriteToServer(readerDetail);
                              }
                              catch (Exception ex)
                              {
                                  Console.WriteLine(ex.Message);
                              }
                              finally
                              {
                                  readerDetail.Close();
                              }
                          }
          
                          // Perform a final count on the destination
                          // tables to see how many rows were added. 
                          long countEndHeader = System.Convert.ToInt32(
                              countRowHeader.ExecuteScalar());
                          Console.WriteLine("{0} rows were added to the Header table.",
                              countEndHeader - countStartHeader);
                          long countEndDetail = System.Convert.ToInt32(
                              countRowDetail.ExecuteScalar());
                          Console.WriteLine("{0} rows were added to the Detail table.",
                              countEndDetail - countStartDetail);
                          Console.WriteLine("Press Enter to finish.");
                          Console.ReadLine();
                      }
                  }
              }
          
              private static string GetConnectionString() 
              {
                  // To avoid storing the connection string in your code,
                  // you can retrieve it from a configuration file.
                  return "Data Source=(local); " +
                         " Integrated Security=true;" +
                         "Initial Catalog=AdventureWorks;";
              }
          }
        </code>
      </example>
    </Clear>
    <Contains>
      <param name="value">
        A valid <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> object.
      </param>
      <summary>
        Gets a value indicating whether a specified <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> object exists in the collection.
      </summary>
      <returns><see langword="true" /> if the specified mapping exists in the collection; otherwise <see langword="false" />.</returns>
    </Contains>
    <CopyTo>
      <param name="array">
        The one-dimensional <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> array that is the destination of the elements copied from <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection" />. The array must have zero-based indexing.
      </param>
      <param name="index">
        The zero-based index in <paramref name="array" /> at which copying begins.
      </param>
      <summary>
        Copies the elements of the <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection" /> to an array of <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> items, starting at a particular index.
      </summary>
    </CopyTo>
    <IndexOf>
      <param name="value">
        The <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> object for which to search.
      </param>
      <summary>
        Gets the index of the specified <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> object.
      </summary>
      <returns>
        The zero-based index of the column mapping, or -1 if the column mapping is not found in the collection.
      </returns>
    </IndexOf>
    <Insert>
      <param name="index">
        Integer value of the location within the <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection" /> at which to insert the new <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" />.
      </param>
      <param name="value"><see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> object to be inserted in the collection.</param>
      <summary>
        Insert a new <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> at the index specified.
      </summary>
    </Insert>
    <Item>
      <param name="index">
        The zero-based index of the <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> to find.
      </param>
      <summary>
        Gets the <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> object at the specified index.
      </summary>
      <value>
        A <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> object.
      </value>
    </Item>
    <Remove>
      <param name="value"><see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> object to be removed from the collection.</param>
      <summary>
        Removes the specified <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> element from the <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection" />.
      </summary>
      <remarks>
        <para>
          The <see cref="M:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Remove" /> method is most commonly used when you use a single <see cref="Microsoft.Data.SqlClient.SqlBulkCopy" /> instance to process more than one bulk copy operation. If you create column mappings for one bulk copy operation, you must remove mappings that no longer apply after the <see cref="O:Microsoft.Data.SqlClient.SqlBulkCopy.WriteToServer" /> method is called and before defining mapping for the next bulk copy. You can clear the entire collection by using the <see cref="M:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Clear" /> method, or remove mappings individually using the <see cref="M:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Remove" /> method or the <see cref="M:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection.RemoveAt" /> method.
        </para>
        <para>
          Performing several bulk copies using the same <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopy" /> instance will usually be more efficient from a performance point of view than using a separate <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopy" /> for each operation.
        </para>
      </remarks>
      <example>
        <para>
          The following example performs two bulk copy operations. The first operation copies sales order header information, and the second copies sales order details.  Although not strictly necessary in this example (because the ordinal positions of the source and destination columns do match), the example defines column mappings for each bulk copy operation.  Both bulk copies include a mapping for the <b>SalesOrderID</b>, so rather than clearing the entire collection between bulk copy operations, the example removes all mappings except for the <b>SalesOrderID</b> mapping and then adds the appropriate mappings for the second bulk copy operation.
        </para>
        <note type="important">
          This sample will not run unless you have created the work tables as described in <see href="/sql/connect/ado-net/sql/bulk-copy-example-setup">Bulk Copy Example Setup</see>.
        </note>
        <para>
          This code is provided to demonstrate the syntax for using <b>SqlBulkCopy</b> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <c>INSERT … SELECT</c> statement to copy the data.
        </para>
        <!-- SqlBulkCopy_ColumnMappingRemove -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  string connectionString = GetConnectionString();
                  // Open a connection to the AdventureWorks database.
                  using (SqlConnection connection = new SqlConnection(connectionString))
                  {
                      connection.Open();
          
                      // Empty the destination tables. 
                      SqlCommand deleteHeader = new SqlCommand(
                          "DELETE FROM dbo.BulkCopyDemoOrderHeader;",
                          connection);
                      deleteHeader.ExecuteNonQuery();
                      SqlCommand deleteDetail = new SqlCommand(
                          "DELETE FROM dbo.BulkCopyDemoOrderDetail;",
                          connection);
                      deleteDetail.ExecuteNonQuery();
          
                      // Perform an initial count on the destination
                      //  table with matching columns. 
                      SqlCommand countRowHeader = new SqlCommand(
                          "SELECT COUNT(*) FROM dbo.BulkCopyDemoOrderHeader;",
                          connection);
                      long countStartHeader = System.Convert.ToInt32(
                          countRowHeader.ExecuteScalar());
                      Console.WriteLine(
                          "Starting row count for Header table = {0}",
                          countStartHeader);
          
                      // Perform an initial count on the destination
                      // table with different column positions. 
                      SqlCommand countRowDetail = new SqlCommand(
                          "SELECT COUNT(*) FROM dbo.BulkCopyDemoOrderDetail;",
                          connection);
                      long countStartDetail = System.Convert.ToInt32(
                          countRowDetail.ExecuteScalar());
                      Console.WriteLine(
                          "Starting row count for Detail table = {0}",
                          countStartDetail);
          
                      // Get data from the source table as a SqlDataReader.
                      // The Sales.SalesOrderHeader and Sales.SalesOrderDetail
                      // tables are quite large and could easily cause a timeout
                      // if all data from the tables is added to the destination. 
                      // To keep the example simple and quick, a parameter is  
                      // used to select only orders for a particular account 
                      // as the source for the bulk insert. 
                      SqlCommand headerData = new SqlCommand(
                          "SELECT [SalesOrderID], [OrderDate], " +
                          "[AccountNumber] FROM [Sales].[SalesOrderHeader] " +
                          "WHERE [AccountNumber] = @accountNumber;",
                          connection);
                      SqlParameter parameterAccount = new SqlParameter();
                      parameterAccount.ParameterName = "@accountNumber";
                      parameterAccount.SqlDbType = SqlDbType.NVarChar;
                      parameterAccount.Direction = ParameterDirection.Input;
                      parameterAccount.Value = "10-4020-000034";
                      headerData.Parameters.Add(parameterAccount);
                      SqlDataReader readerHeader = headerData.ExecuteReader();
          
                      // Get the Detail data in a separate connection.
                      using (SqlConnection connection2 = new SqlConnection(connectionString))
                      {
                          connection2.Open();
                          SqlCommand sourceDetailData = new SqlCommand(
                              "SELECT [Sales].[SalesOrderDetail].[SalesOrderID], [SalesOrderDetailID], " +
                              "[OrderQty], [ProductID], [UnitPrice] FROM [Sales].[SalesOrderDetail] " +
                              "INNER JOIN [Sales].[SalesOrderHeader] ON [Sales].[SalesOrderDetail]." +
                              "[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID] " +
                              "WHERE [AccountNumber] = @accountNumber;", connection2);
          
                          SqlParameter accountDetail = new SqlParameter();
                          accountDetail.ParameterName = "@accountNumber";
                          accountDetail.SqlDbType = SqlDbType.NVarChar;
                          accountDetail.Direction = ParameterDirection.Input;
                          accountDetail.Value = "10-4020-000034";
                          sourceDetailData.Parameters.Add(accountDetail);
                          SqlDataReader readerDetail = sourceDetailData.ExecuteReader();
          
                          // Create the SqlBulkCopy object. 
                          using (SqlBulkCopy bulkCopy =
                                     new SqlBulkCopy(connectionString))
                          {
                              bulkCopy.DestinationTableName =
                                  "dbo.BulkCopyDemoOrderHeader";
          
                              // Guarantee that columns are mapped correctly by
                              // defining the column mappings for the order.
                              bulkCopy.ColumnMappings.Add("SalesOrderID", "SalesOrderID");
                              bulkCopy.ColumnMappings.Add("OrderDate", "OrderDate");
                              bulkCopy.ColumnMappings.Add("AccountNumber", "AccountNumber");
          
                              // Write readerHeader to the destination.
                              try
                              {
                                  bulkCopy.WriteToServer(readerHeader);
                              }
                              catch (Exception ex)
                              {
                                  Console.WriteLine(ex.Message);
                              }
                              finally
                              {
                                  readerHeader.Close();
                              }
          
                              // Set up the order details destination. 
                              bulkCopy.DestinationTableName = "dbo.BulkCopyDemoOrderDetail";
          
                              // Clear the ColumnMappingCollection.
                              bulkCopy.ColumnMappings.Clear();
          
                              // Add order detail column mappings.
                              bulkCopy.ColumnMappings.Add("SalesOrderID", "SalesOrderID");
                              bulkCopy.ColumnMappings.Add("SalesOrderDetailID", "SalesOrderDetailID");
                              bulkCopy.ColumnMappings.Add("OrderQty", "OrderQty");
                              bulkCopy.ColumnMappings.Add("ProductID", "ProductID");
                              bulkCopy.ColumnMappings.Add("UnitPrice", "UnitPrice");
          
                              // Write readerDetail to the destination.
                              try
                              {
                                  bulkCopy.WriteToServer(readerDetail);
                              }
                              catch (Exception ex)
                              {
                                  Console.WriteLine(ex.Message);
                              }
                              finally
                              {
                                  readerDetail.Close();
                              }
                          }
          
                          // Perform a final count on the destination
                          // tables to see how many rows were added. 
                          long countEndHeader = System.Convert.ToInt32(
                              countRowHeader.ExecuteScalar());
                          Console.WriteLine("{0} rows were added to the Header table.",
                              countEndHeader - countStartHeader);
                          long countEndDetail = System.Convert.ToInt32(
                              countRowDetail.ExecuteScalar());
                          Console.WriteLine("{0} rows were added to the Detail table.",
                              countEndDetail - countStartDetail);
                          Console.WriteLine("Press Enter to finish.");
                          Console.ReadLine();
                      }
                  }
              }
          
              private static string GetConnectionString() 
              {
                  // To avoid storing the connection string in your code,
                  // you can retrieve it from a configuration file.
                  return "Data Source=(local); " +
                         " Integrated Security=true;" +
                         "Initial Catalog=AdventureWorks;";
              }
          }
        </code>
      </example>
    </Remove>
    <RemoveAt>
      <param name="index">
        The zero-based index of the <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> object to be removed from the collection.
      </param>
      <summary>
        Removes the mapping at the specified index from the collection.
      </summary>
      <remarks>
        <para>
          The <see cref="M:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection.RemoveAt" /> method is most commonly used when you use a single <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopy" /> instance to process more than one bulk copy operation. If you create column mappings for one bulk copy operation, you must remove mappings that no longer apply after the <see cref="O:Microsoft.Data.SqlClient.SqlBulkCopy.WriteToServer" /> method is called and before defining mapping for the next bulk copy. You can clear the entire collection by using the <see cref="M:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Clear" /> method, or remove mappings individually using the <see cref="M:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Remove" /> method or the <see cref="M:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection.RemoveAt" /> method.
        </para>
        <para>
          Performing several bulk copies using the same <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopy" /> instance will usually be more efficient from a performance point of view than using a separate <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopy" /> for each operation.
        </para>
      </remarks>
      <example>
        <para>
          The following example performs two bulk copy operations. The first operation copies sales order header information, and the second copies sales order details.  Although not strictly necessary in this example (because the ordinal positions of the source and destination columns do match), the example defines column mappings for each bulk copy operation.  Both bulk copies include a mapping for the <b>SalesOrderID</b>, so rather than clearing the entire collection between bulk copy operations, the example removes all mappings except for the <b>SalesOrderID</b> mapping and then adds the appropriate mappings for the second bulk copy operation.
        </para>
        <note type="important">
          This sample will not run unless you have created the work tables as described in <see href="/sql/connect/ado-net/sql/bulk-copy-example-setup">Bulk Copy Example Setup</see>.
        </note>
        <para>
          This code is provided to demonstrate the syntax for using <b>SqlBulkCopy</b> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <c>INSERT … SELECT</c> statement to copy the data.
        </para>
        <!-- SqlBulkCopy_ColumnMappingRemoveAt -->
        <code language="c#">
          using System;
          using System.Data;
          using Microsoft.Data.SqlClient;
          
          class Program
          {
              static void Main()
              {
                  string connectionString = GetConnectionString();
                  // Open a connection to the AdventureWorks database.
                  using (SqlConnection connection = new SqlConnection(connectionString))
                  {
                      connection.Open();
          
                      // Empty the destination tables. 
                      SqlCommand deleteHeader = new SqlCommand(
                          "DELETE FROM dbo.BulkCopyDemoOrderHeader;",
                          connection);
                      deleteHeader.ExecuteNonQuery();
                      SqlCommand deleteDetail = new SqlCommand(
                          "DELETE FROM dbo.BulkCopyDemoOrderDetail;",
                          connection);
                      deleteDetail.ExecuteNonQuery();
          
                      // Perform an initial count on the destination
                      //  table with matching columns. 
                      SqlCommand countRowHeader = new SqlCommand(
                          "SELECT COUNT(*) FROM dbo.BulkCopyDemoOrderHeader;",
                          connection);
                      long countStartHeader = System.Convert.ToInt32(
                          countRowHeader.ExecuteScalar());
                      Console.WriteLine(
                          "Starting row count for Header table = {0}",
                          countStartHeader);
          
                      // Perform an initial count on the destination
                      // table with different column positions. 
                      SqlCommand countRowDetail = new SqlCommand(
                          "SELECT COUNT(*) FROM dbo.BulkCopyDemoOrderDetail;",
                          connection);
                      long countStartDetail = System.Convert.ToInt32(
                          countRowDetail.ExecuteScalar());
                      Console.WriteLine(
                          "Starting row count for Detail table = {0}",
                          countStartDetail);
          
                      // Get data from the source table as a SqlDataReader.
                      // The Sales.SalesOrderHeader and Sales.SalesOrderDetail
                      // tables are quite large and could easily cause a timeout
                      // if all data from the tables is added to the destination. 
                      // To keep the example simple and quick, a parameter is  
                      // used to select only orders for a particular account 
                      // as the source for the bulk insert. 
                      SqlCommand headerData = new SqlCommand(
                          "SELECT [SalesOrderID], [OrderDate], " +
                          "[AccountNumber] FROM [Sales].[SalesOrderHeader] " +
                          "WHERE [AccountNumber] = @accountNumber;",
                          connection);
                      SqlParameter parameterAccount = new SqlParameter();
                      parameterAccount.ParameterName = "@accountNumber";
                      parameterAccount.SqlDbType = SqlDbType.NVarChar;
                      parameterAccount.Direction = ParameterDirection.Input;
                      parameterAccount.Value = "10-4020-000034";
                      headerData.Parameters.Add(parameterAccount);
                      SqlDataReader readerHeader = headerData.ExecuteReader();
          
                      // Get the Detail data in a separate connection.
                      using (SqlConnection connection2 = new SqlConnection(connectionString))
                      {
                          connection2.Open();
                          SqlCommand sourceDetailData = new SqlCommand(
                              "SELECT [Sales].[SalesOrderDetail].[SalesOrderID], [SalesOrderDetailID], " +
                              "[OrderQty], [ProductID], [UnitPrice] FROM [Sales].[SalesOrderDetail] " +
                              "INNER JOIN [Sales].[SalesOrderHeader] ON [Sales].[SalesOrderDetail]." +
                              "[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID] " +
                              "WHERE [AccountNumber] = @accountNumber;", connection2);
          
                          SqlParameter accountDetail = new SqlParameter();
                          accountDetail.ParameterName = "@accountNumber";
                          accountDetail.SqlDbType = SqlDbType.NVarChar;
                          accountDetail.Direction = ParameterDirection.Input;
                          accountDetail.Value = "10-4020-000034";
                          sourceDetailData.Parameters.Add(accountDetail);
                          SqlDataReader readerDetail = sourceDetailData.ExecuteReader();
          
                          // Create the SqlBulkCopy object. 
                          using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connectionString))
                          {
                              bulkCopy.DestinationTableName =
                                  "dbo.BulkCopyDemoOrderHeader";
          
                              // Guarantee that columns are mapped correctly by
                              // defining the column mappings for the order.
                              bulkCopy.ColumnMappings.Add("SalesOrderID", "SalesOrderID");
                              bulkCopy.ColumnMappings.Add("OrderDate", "OrderDate");
                              bulkCopy.ColumnMappings.Add("AccountNumber", "AccountNumber");
          
                              // Write readerHeader to the destination.
                              try
                              {
                                  bulkCopy.WriteToServer(readerHeader);
                              }
                              catch (Exception ex)
                              {
                                  Console.WriteLine(ex.Message);
                              }
                              finally
                              {
                                  readerHeader.Close();
                              }
          
                              // Set up the order details destination. 
                              bulkCopy.DestinationTableName = "dbo.BulkCopyDemoOrderDetail";
          
                              // Rather than clearing mappings that are not necessary
                              // for the next bulk copy operation, the unneeded mappings
                              //  are removed with the RemoveAt method.
                              bulkCopy.ColumnMappings.RemoveAt(2);
                              bulkCopy.ColumnMappings.RemoveAt(1);
          
                              // Add order detail column mappings.
                              bulkCopy.ColumnMappings.Add("SalesOrderDetailID", "SalesOrderDetailID");
                              bulkCopy.ColumnMappings.Add("OrderQty", "OrderQty");
                              bulkCopy.ColumnMappings.Add("ProductID", "ProductID");
                              bulkCopy.ColumnMappings.Add("UnitPrice", "UnitPrice");
                              bulkCopy.WriteToServer(readerDetail);
          
                              // Write readerDetail to the destination.
                              try
                              {
                                  bulkCopy.WriteToServer(readerDetail);
                              }
                              catch (Exception ex)
                              {
                                  Console.WriteLine(ex.Message);
                              }
                              finally
                              {
                                  readerDetail.Close();
                              }
                          }
          
                          // Perform a final count on the destination
                          // tables to see how many rows were added. 
                          long countEndHeader = System.Convert.ToInt32(
                              countRowHeader.ExecuteScalar());
                          Console.WriteLine("{0} rows were added to the Header table.",
                              countEndHeader - countStartHeader);
                          long countEndDetail = System.Convert.ToInt32(
                              countRowDetail.ExecuteScalar());
                          Console.WriteLine("{0} rows were added to the Detail table.",
                              countEndDetail - countStartDetail);
                          Console.WriteLine("Press Enter to finish.");
                          Console.ReadLine();
                      }
                  }
              }
          
              private static string GetConnectionString()
              {
                  // To avoid storing the connection string in your code,
                  // you can retrieve it from a configuration file.
                  return "Data Source=(local); " +
                         " Integrated Security=true;" +
                         "Initial Catalog=AdventureWorks;";
              }
          }
        </code>
      </example>
    </RemoveAt>
    <IsSynchronized>
      <summary>
        Gets a value indicating whether access to the <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection" /> is synchronized (thread safe).
      </summary>
      <value>
        <see langword="true" /> if access to the <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.
      </value>
    </IsSynchronized>
  </members>
</docs>
